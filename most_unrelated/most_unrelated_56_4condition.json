{
    "pendingOwner() returns (address)": [],
    "renounceOwnership()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before renouncing ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "transferOwnership(address newOwner)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before transfer ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "addInitialLiquidity(address lpOwner)": [
        {
            "specific_checks": "_owner == msg.sender || address(_factory) == msg.sender",
            "involved_variables": ["_owner", "_factory"],
            "descriptions": "Restrict to owner or factory",
            "references": ["fundedDate", "_autoSwapInProgress", "_allowances"]
        }
    ],
    "isLiquidityPool(address queryAddress_) returns (bool)": [],
    "liquidityPools() returns (address[])": [],
    "addLiquidityPool(address newLiquidityPool_)": [
        {
            "specific_checks": "_owner == msg.sender || address(_factory) == msg.sender",
            "involved_variables": ["_owner", "_factory"],
            "descriptions": "Restrict to owner or factory",
            "references": ["potential_checks"]
        }
    ],
    "removeLiquidityPool(address removedLiquidityPool_)": [
        {
            "specific_checks": "_owner == msg.sender || address(_factory) == msg.sender",
            "involved_variables": ["_owner", "_factory"],
            "descriptions": "Restrict to owner or factory",
            "references": ["potential_checks"]
        }
    ],
    "isValidCaller(bytes32 queryHash_) returns (bool)": [],
    "validCallers() returns (bytes32[])": [],
    "addValidCaller(bytes32 newValidCallerHash_)": [
        {
            "specific_checks": "_owner == msg.sender || address(_factory) == msg.sender",
            "involved_variables": ["_owner", "_factory"],
            "descriptions": "Restrict to owner or factory",
            "references": ["_validCallerCodeHashes"]
        }
    ],
    "removeValidCaller(bytes32 removedValidCallerHash_)": [
        {
            "specific_checks": "_owner == msg.sender || address(_factory) == msg.sender",
            "involved_variables": ["_owner", "_factory"],
            "descriptions": "Restrict to owner or factory",
            "references": ["_validCallerCodeHashes"]
        }
    ],
    "setProjectTaxRecipient(address projectTaxRecipient_)": [
        {
            "specific_checks": "_owner == msg.sender || address(_factory) == msg.sender",
            "involved_variables": ["_owner", "_factory"],
            "descriptions": "Restrict to owner or factory",
            "references": ["projectTaxRecipient"]
        }
    ],
    "setSwapThresholdBasisPoints(uint16 swapThresholdBasisPoints_)": [
        {
            "specific_checks": "_owner == msg.sender || address(_factory) == msg.sender",
            "involved_variables": ["_owner", "_factory"],
            "descriptions": "Restrict to owner or factory",
            "references": ["swapThresholdBasisPoints"]
        }
    ],
    "setProjectTaxRates(uint16 newProjectBuyTaxBasisPoints_, uint16 newProjectSellTaxBasisPoints_)": [
        {
            "specific_checks": "_owner == msg.sender || address(_factory) == msg.sender",
            "involved_variables": ["_owner", "_factory"],
            "descriptions": "Restrict to owner or factory",
            "references": ["projectBuyTaxBasisPoints", "projectSellTaxBasisPoints"]
        }
    ],
    "totalBuyTaxBasisPoints() returns (uint256)": [],
    "totalSellTaxBasisPoints() returns (uint256)": [],
    "distributeTaxTokens()": [
    ],
    "withdrawETH(uint256 amount_)": [
        {
            "specific_checks": "_owner == msg.sender || address(_factory) == msg.sender",
            "involved_variables": ["_owner", "_factory"],
            "descriptions": "Restrict to owner or factory",
            "references": []
        }
    ],
    "withdrawERC20(address token_, uint256 amount_)": [
        {
            "specific_checks": "_owner == msg.sender || address(_factory) == msg.sender",
            "involved_variables": ["_owner", "_factory"],
            "descriptions": "Restrict to owner or factory",
            "references": []
        }
    ],
    "burn(uint256 value)": [
    ],
    "burnFrom(address account, uint256 value)": [
        {
            "potential_checks": "_allowances[account][msg.sender] >= value",
            "involved_variables": [
                "account",
                "msg.sender",
                "value",
                "_allowances"
            ],
            "descriptions": "Ensure that the spender has enough allowance to burn from the account.",
            "references": [
                "_allowances",
                "_balances",
                "_totalSupply"
            ]
        }
    ],
    "initialize(address[3] integrationAddresses_, bytes baseParams_, bytes supplyParams_, bytes taxParams_)": [],
    "name() returns (string)": [],
    "symbol() returns (string)": [],
    "decimals() returns (uint8)": [],
    "totalSupply() returns (uint256)": [],
    "balanceOf(address account) returns (uint256)": [],
    "transfer(address to, uint256 value) returns (bool)": [],
    "allowance(address owner, address spender) returns (uint256)": [],
    "approve(address spender, uint256 value) returns (bool)": [],
    "transferFrom(address from, address to, uint256 value) returns (bool)": [
        {
            "potential_checks": "_allowances[from][msg.sender] >= value",
            "involved_variables": [
                "from",
                "msg.sender",
                "value",
                "_allowances"
            ],
            "descriptions": "Ensure that the spender has enough allowance to transfer from the account",
            "references": [
                "_allowances",
                "_balances"
            ]
        }
    ],
    "transfer(address to, uint256 amount) returns (bool)": [
    ],
    "approve(address spender, uint256 amount) returns (bool)": [],
    "transferFrom(address from, address to, uint256 amount) returns (bool)": [
        {
            "potential_checks": "_allowances[from][msg.sender] >= amount",
            "involved_variables": [
                "from",
                "msg.sender",
                "amount",
                "_allowances"
            ],
            "descriptions": "Ensure that the spender has enough allowance to transfer from the account",
            "references": [
                "_allowances",
                "_balances"
            ]
        }
    ],
    "increaseAllowance(address spender, uint256 addedValue) returns (bool)": [],
    "decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)": [
    ]
}