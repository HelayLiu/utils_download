{
    "setKeeper(address _keeper)": [
        {
            "potential_checks": "msg.sender == _owner || msg.sender == keeper",
            "involved_variables": [
                "keeper",
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is either the owner or the current keeper.",
            "references": [
                "keeper"
            ]
        }
    ],
    "setRewardPool(address _rewardPool)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the owner of the contract.",
            "references": [
                "rewardPool"
            ]
        }
    ],
    "paused() returns (bool)": [],
    "owner() returns (address)": [],
    "renounceOwnership()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before renouncing ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "transferOwnership(address newOwner)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before transfer ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "name() returns (string)": [],
    "symbol() returns (string)": [],
    "decimals() returns (uint8)": [],
    "totalSupply() returns (uint256)": [],
    "balanceOf(address account) returns (uint256)": [],
    "transfer(address recipient, uint256 amount) returns (bool)": [],
    "allowance(address owner, address spender) returns (uint256)": [],
    "approve(address spender, uint256 amount) returns (bool)": [],
    "transferFrom(address sender, address recipient, uint256 amount) returns (bool)": [],
    "increaseAllowance(address spender, uint256 addedValue) returns (bool)": [],
    "decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)": [
    ],
    "depositAll()": [
        {
            "specific_checks": "validator.call{value: valAmt}() succeeds",
            "involved_variables": ["validator", "valAmt"],
            "descriptions": "Verifies validator fee transfer before staking.",
            "references": ["_balances","stakingContract","_totalSupply"]
        }
    ],
    "deposit(uint256 _amount)": [
        {
            "specific_checks": "validator.call{value: valAmt}() succeeds",
            "involved_variables": ["validator", "valAmt"],
            "descriptions": "Verifies validator fee transfer before staking.",
            "references": ["_balances","stakingContract","_totalSupply"]
        }
    ],
    "depositNative()": [
        {
            "specific_checks": "validator.call{value: valAmt}() succeeds",
            "involved_variables": ["validator", "valAmt"],
            "descriptions": "Verifies validator fee transfer before staking.",
            "references": ["_balances","stakingContract","_totalSupply"]
        }
    ],
    "currentUnlockTime() returns (uint256)": [],
    "currentLockDuration() returns (uint256)": [],
    "validatorUnlockTime() returns (uint256)": [],
    "validatorLockDuration() returns (uint256)": [],
    "balanceOfWant() returns (uint256)": [],
    "balanceOfLocked() returns (uint256)": [],
    "balanceOfUnlocked() returns (uint256)": [],
    "pendingWithdrawalRequest() returns (uint256, uint256)": [],
    "pendingStakingRewards() returns (uint256)": [],
    "enableWithdraw()": [
        {
            "specific_checks": "_owner == msg.sender",
            "involved_variables": ["msg.sender", "_owner"],
            "descriptions": "Restricts withdrawal initiation to contract owner.",
            "references": ["stakingContract", "withdrawalTime"]
        }
    ],
    "withdrawFromStaking()": [
        {
            "specific_checks": "_owner == msg.sender",
            "involved_variables": ["msg.sender", "_owner"],
            "descriptions": "Restricts withdrawal initiation to contract owner.",
            "references": ["stakingContract", "withdrawalTime"]
        },
        {
            "specific_checks": "block.timestamp >= withdrawalTime",
            "involved_variables": ["block.timestamp", "withdrawalTime"],
            "descriptions": "Enforces 7-day cooldown before final asset withdrawal.",
            "references": ["withdrawalTime", "stakingContract"]
        }
    ],
    "lockFunds()": [
    ],
    "relockFunds()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the owner before relocking funds.",
            "references": [
                "withdrawEnabled",
                "stakingContract"
            ]
        }
    ],
    "pause()": [
        {
            "potential_checks": "msg.sender == _owner || msg.sender == keeper",
            "involved_variables": [
                "keeper",
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is either the owner or the current keeper before pausing.",
            "references": [
                "_paused"
            ]
        }
    ],
    "unpause()": [
        {
            "potential_checks": "msg.sender == _owner || msg.sender == keeper",
            "involved_variables": [
                "keeper",
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is either the owner or the current keeper before unpausing.",
            "references": [
                "_paused"
            ]
        }
    ],
    "claimStakingReward()": [
        {
            "potential_checks": "msg.sender == rewardPool",
            "involved_variables": [
                "msg.sender",
                "rewardPool"
            ],
            "descriptions": "Ensure that the caller is the reward pool before claiming staking rewards.",
            "references": [
                "want",
                "stakingContract"
            ]
        }
    ],
    "inCaseTokensGetStuck(address _token)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the owner before allowing tokens to be stuck.",
            "references": [
                "_balances"
            ]
        },
        {
            "potential_checks": "_token != address(want)",
            "involved_variables": [
                "_token",
                "want"
            ],
            "descriptions": "Prevent stuck tokens from being the main asset to avoid accidental loss.",
            "references": [
                "_balances"
            ]
        }
    ]
}