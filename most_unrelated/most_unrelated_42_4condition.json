{
    "owner() returns (address)": [],
    "isOwner() returns (bool)": [],
    "renounceOwnership()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before renouncing ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "transferOwnership(address newOwner)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before transfer ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "name() returns (string)": [],
    "symbol() returns (string)": [],
    "decimals() returns (uint8)": [],
    "totalSupply() returns (uint256)": [],
    "balanceOf(address account) returns (uint256)": [],
    "transfer(address recipient, uint256 amount) returns (bool)": [],
    "allowance(address owner, address spender) returns (uint256)": [],
    "approve(address spender, uint256 amount) returns (bool)": [],
    "transferFrom(address sender, address recipient, uint256 amount) returns (bool)": [
        {
            "potential_checks": "_allowances[sender][msg.sender] >= amount",
            "involved_variables": [
                "_allowances",
                "sender",
                "msg.sender",
                "amount"
            ],
            "descriptions": "Verify spender allowance covers transfer amount to isolate unauthorized access.",
            "references": [
                "_balances"
            ]
        }
    ],
    "increaseAllowance(address spender, uint256 addedValue) returns (bool)": [],
    "decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)": [],
    "setName(string name_)": [
        {
            "potential_checks": "msg.sender == _owner",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting the name.",
            "references": [
                "_name"
            ]

        }
    ],
    "setSymbol(string symbol_)": [
        {
            "potential_checks": "msg.sender == _owner",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting the symbol.",
            "references": [
                "_symbol"
            ]
        }
    ],
    "mint(address _receiver, uint256 _amount)": [
        {
            "potential_checks": "msg.sender == _owner",  
            "involved_variables": ["msg.sender", "_owner"],  
            "descriptions": "Restrict minting to the owner.",  
            "references": ["_balances", "_totalSupply"]  
        }
    ],
    "pauseAsset(address _token)": [
        {
            "potential_checks": "msg.sender == _owner",  
            "involved_variables": ["msg.sender", "_owner"],  
            "descriptions": "Restrict pausing to the owner.",  
            "references": ["_able"]  
        },
        {
            "potential_checks": "_able[_token].allowed",  
            "involved_variables": ["_able[_token].allowed"],  
            "descriptions": "Ensure token is whitelisted.",  
            "references": ["_able"]  
        }
    ],
    "unPauseAsset(address _token)": [
        {
            "potential_checks": "msg.sender == _owner",  
            "involved_variables": ["msg.sender", "_owner"],  
            "descriptions": "Restrict pausing to the owner.",  
            "references": ["_able"]  
        },
        {
            "potential_checks": "_able[_token].allowed",  
            "involved_variables": ["_able[_token].allowed"],  
            "descriptions": "Ensure token is whitelisted.",  
            "references": ["_able"]  
        }
    ],
    "setLimit(address _token, uint256 _limit)": [
        {
            "potential_checks": "msg.sender == _owner",  
            "involved_variables": ["msg.sender", "_owner"],  
            "descriptions": "Restrict set limit to the owner.",  
            "references": ["_able"]  
        },
        {
            "potential_checks": "_able[_token].allowed",  
            "involved_variables": ["_able[_token].allowed"],  
            "descriptions": "Ensure token is whitelisted.",  
            "references": ["_able"]  
        }
    ],
    "addAsset(address _token)": [
        {
            "potential_checks": "msg.sender == _owner",  
            "involved_variables": ["msg.sender", "_owner"],  
            "descriptions": "Restrict adding asset to the owner.",  
            "references": ["_able"]  
        },
        {
            "potential_checks": "_able[_token].allowed",  
            "involved_variables": ["_able[_token].allowed"],  
            "descriptions": "Ensure token is whitelisted.",  
            "references": ["_able"]  
        }
    ],
    "removeAsset(address _token)": [
        {
            "potential_checks": "msg.sender == _owner",  
            "involved_variables": ["msg.sender", "_owner"],  
            "descriptions": "Restrict removing asset to the owner.",  
            "references": ["_able"]  
        },
        {
            "potential_checks": "_able[_token].allowed",  
            "involved_variables": ["_able[_token].allowed"],  
            "descriptions": "Ensure token is whitelisted.",  
            "references": ["_able"]  
        }
    ],
    "swapIn(address _token, uint256 _amount)": [
        {
            "potential_checks": "_able[_token].allowed",  
            "involved_variables": ["_able[_token].allowed"],  
            "descriptions": "Ensure token is whitelisted.",  
            "references": ["_able"]  
        }
    ],
    "swapOut(address _token, uint256 _amount)": [
        {
            "potential_checks": "_able[_token].allowed",  
            "involved_variables": ["_able[_token].allowed"],  
            "descriptions": "Ensure token is whitelisted.",  
            "references": ["_able"]  
        }
    ]
}