{
    "setCallFee(uint256 _fee)": [
        {
            "potential_checks": "msg.sender == _owner || msg.sender == keeper",
            "involved_variables": [
                "keeper",
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Restricts fee changes to owner/keeper.",
            "references": [
                "callFee",
                "beefyFee"
            ]
        }
    ],
    "setWithdrawalFee(uint256 _fee)": [
        {
            "potential_checks": "msg.sender == _owner || msg.sender == keeper",
            "involved_variables": [
                "keeper",
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Restricts fee changes to owner/keeper.",
            "references": [
                "withdrawalFee"
            ]
        }
    ],
    "setKeeper(address _keeper)": [
        {
            "potential_checks": "msg.sender == _owner || msg.sender == keeper",
            "involved_variables": [
                "keeper",
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Restricts keeper changes to owner/keeper.",
            "references": [
                "keeper"
            ]
        }
    ],
    "setStrategist(address _strategist)": [
        {
            "potential_checks": "msg.sender == strategist",
            "involved_variables": [
                "msg.sender",
                "strategist"
            ],
            "descriptions": "Restricts strategist changes to the current strategist.",
            "references": [
                "strategist"
            ]
        }
    ],
    "setUnirouter(address _unirouter)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Restricts unirouter changes to the owner.",
            "references": ["unirouter"]
        }
    ],
    "setVault(address _vault)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Restricts vault changes to the owner.",
            "references": [
                "vault"
            ]
        }
    ],
    "setBeefyFeeRecipient(address _beefyFeeRecipient)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Restricts beefy fee recipient changes to the owner.",
            "references": ["beefyFeeRecipient"]
        }
    ],
    "beforeDeposit()": [],
    "paused() returns (bool)": [],
    "owner() returns (address)": [],
    "renounceOwnership()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before renouncing ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "transferOwnership(address newOwner)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before transfer ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "deposit()": [
    ],
    "withdraw(uint256 _amount)": [
        {
            "potential_checks": "msg.sender == vault",
            "involved_variables": [
                "vault",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the vault before allowing withdrawal.",
            "references": [
                "vault"
            ]
        },
        {
            "potential_checks": "wantBal < _amount == False",
            "involved_variables": [
                "vault",
                "tx.origin",
                "_amount",
                "wantBal",
                "msg.sender"
            ],
            "descriptions": "",
            "references": [
                "want"
            ]
        }
    ],
    "harvest()": [
        {
            "potential_checks": "msg.sender == tx.origin",
            "involved_variables": [
                "msg.sender",
                "tx.origin"
            ],
            "descriptions": "Ensure that the caller is the original transaction sender before allowing harvest.",
            "references": [
                "want"
            ]
        }
    ],
    "balanceOf() returns (uint256)": [],
    "balanceOfWant() returns (uint256)": [],
    "balanceOfPool() returns (uint256)": [],
    "retireStrat()": [
        {
            "potential_checks": "msg.sender == vault",
            "involved_variables": [
                "vault",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the vault before retiring strategy.",
            "references": [
                "want",
                "masterchef"
            ]
        }
    ],
    "panic()": [
        {
            "potential_checks": "msg.sender == _owner || msg.sender == keeper",
            "involved_variables": [
                "keeper",
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Restricts panic actions to owner/keeper.",
            "references": [
                "masterchef"
            ]
        }
    ],
    "pause()": [
        {
            "potential_checks": "msg.sender == _owner || msg.sender == keeper",
            "involved_variables": [
                "keeper",
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Restricts pause actions to owner/keeper.",
            "references": [
                "_paused"
            ]
        }
    ],
    "unpause()": [
        {
            "potential_checks": "msg.sender == _owner || msg.sender == keeper",
            "involved_variables": [
                "keeper",
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Restricts unpause actions to owner/keeper.",
            "references": [
                "_paused"
            ]
        }
    ],
    "changeCompoundingFee(uint256 _newFee)": [
        {
            "potential_checks": "msg.sender == _owner || msg.sender == keeper",
            "involved_variables": [
                "keeper",
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Restricts compounding fee changes to owner/keeper.",
            "references": [
                "compoundingFee"
            ]
        }
    ]
}