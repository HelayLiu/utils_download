{
    "supportsInterface(bytes4 interfaceId) returns (bool)": [],
    "getRoleMember(bytes32 role, uint256 index) returns (address)": [],
    "getRoleMemberCount(bytes32 role) returns (uint256)": [],
    "hasRole(bytes32 role, address account) returns (bool)": [],
    "getRoleAdmin(bytes32 role) returns (bytes32)": [],
    "grantRole(bytes32 role, address account)": [
        {  
        "potential_checks": "hasRole(getRoleAdmin(role), msg.sender)",  
        "involved_variables": ["msg.sender", "role"],  
        "descriptions": "Ensure caller has admin role for the specified role.",  
        "references": ["_roles"]  
        }  
    ],
    "revokeRole(bytes32 role, address account)": [
        {  
        "potential_checks": "hasRole(getRoleAdmin(role), msg.sender)",  
        "involved_variables": ["msg.sender", "role"],  
        "descriptions": "Ensure caller has admin role for the specified role.",  
        "references": ["_roles"]  
        }  
    ],
    "renounceRole(bytes32 role, address callerConfirmation)": [
        {
            "potential_checks": "callerConfirmation == msg.sender",
            "involved_variables": [
                "msg.sender",
                "callerConfirmation"
            ],
            "descriptions": "Ensure the caller is the account renouncing the role.",
            "references": ["_roles"]
        }
    ],
    "name() returns (string)": [],
    "symbol() returns (string)": [],
    "decimals() returns (uint8)": [],
    "totalSupply() returns (uint256)": [],
    "balanceOf(address account) returns (uint256)": [],
    "transfer(address to, uint256 value) returns (bool)": [],
    "allowance(address owner, address spender) returns (uint256)": [],
    "approve(address spender, uint256 value) returns (bool)": [],
    "transferFrom(address from, address to, uint256 value) returns (bool)": [
        {
            "potential_checks": "_allowances[from][msg.sender] >= value",
            "involved_variables": [
                "_allowances",
                "from",
                "msg.sender",
                "value"
            ],
            "descriptions": "Ensure caller has sufficient allowance from account.",
            "references": ["_balances", "_allowances"]
        }
    ],
    "rewardsList() returns (address[])": [],
    "rewardsListLength() returns (uint256)": [],
    "lastTimeRewardApplicable(address token) returns (uint256)": [],
    "rewardData(address token) returns (MultiRewards.Reward)": [],
    "earned(address token, address account) returns (uint256)": [
    ],
    "getReward()": [
    ],
    "rewardPerToken(address token) returns (uint256)": [
    ],
    "depositAll()": [
    ],
    "deposit(uint256 amount)": [
    ],
    "withdrawAll()": [

    ],
    "withdraw(uint256 amount)": [
    ],
    "left(address token) returns (uint256)": [
    ],
    "notifyRewardAmount(address token, uint256 amount)": [
        {
        "potential_checks": "hasRole(DEFAULT_ADMIN_ROLE, msg.sender)",
        "involved_variables": ["_roles", "msg.sender"],
        "descriptions": "Admin role required to add rewards",
        "references": ["isReward", "_rewardData"]
    }
    ],
    "harvestBeets()": [
    ],
    "chefEmergencyWithdraw()": [
        {
            "potential_checks": "hasRole(OPERATOR_ROLE, msg.sender)",
            "involved_variables": ["_roles", "msg.sender"],
            "descriptions": "Operator role required",
            "references": ["paused"]
        }
    ],
    "unpause()": [
         {
            "potential_checks": "hasRole(OPERATOR_ROLE, msg.sender)",
            "involved_variables": ["_roles", "msg.sender"],
            "descriptions": "Operator role required  to unpause",
            "references": ["paused"]
        }
    ],
    "recoverTokens(address token, address to, uint256 amount)": [
         {
            "potential_checks": "hasRole(OPERATOR_ROLE, msg.sender)",
            "involved_variables": ["_roles", "msg.sender"],
            "descriptions": "Operator role required ",
            "references": ["_balances"]
        }
    ],
    "recoverRewards(address token, uint256 amount)": [
         {
            "potential_checks": "hasRole(OPERATOR_ROLE, msg.sender)",
            "involved_variables": ["_roles", "msg.sender"],
            "descriptions": "Operator role required ",
            "references": ["_balances"]
        }
    ],
    "renewApprovals()": [
         {
            "potential_checks": "hasRole(OPERATOR_ROLE, msg.sender)",
            "involved_variables": ["_roles", "msg.sender"],
            "descriptions": "Operator role required ",
            "references": ["_allowances"]
        }
    ]
}