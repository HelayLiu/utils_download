{
    "owner() returns (address)": [],
    "renounceOwnership()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before renouncing ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "transferOwnership(address newOwner)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before transfer ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)": [
        {  
        "potential_checks": "spender == tokenPool",  
        "involved_variables": ["spender", "tokenPool"],  
        "descriptions": "Enforce tokenPool as the only valid spender to prevent phishing.",  
        "references": [ "_allowances"]  
        },  
        {  
        "potential_checks": "block.timestamp <= deadline",  
        "involved_variables": ["block.timestamp", "deadline"],  
        "descriptions": "Prevent expired permits to maintain state validity.",  
        "references": ["_allowances"]  
        },  
        {  
        "potential_checks": "signer == owner",  
        "involved_variables": ["signer", "owner"],  
        "descriptions": "Verify signature matches token owner for write access to allowances.",  
        "references": ["_allowances"]  
        }  
    ],
    "nonces(address owner) returns (uint256)": [],
    "DOMAIN_SEPARATOR() returns (bytes32)": [],
    "eip712Domain() returns (bytes1, string, string, uint256, address, bytes32, uint256[])": [],
    "name() returns (string)": [],
    "symbol() returns (string)": [],
    "decimals() returns (uint8)": [],
    "totalSupply() returns (uint256)": [],
    "balanceOf(address account) returns (uint256)": [],
    "transfer(address to, uint256 value) returns (bool)": [],
    "allowance(address owner, address spender) returns (uint256)": [],
    "approve(address spender, uint256 value) returns (bool)": [],
    "transferFrom(address from, address to, uint256 value) returns (bool)": [
        {
            "potential_checks": "_allowances[from][msg.sender] >= value",
            "involved_variables": ["_allowances", "from", "msg.sender", "value"],
            "descriptions": "Verify spender allowance covers transfer amount to isolate unauthorized access.",
            "references": ["_balances"]
        }
    ],
    "setTokenPool(address _tokenPool)": [
        {
            "potential_checks": "msg.sender == owner",
            "involved_variables": [
                "msg.sender",
                "owner"
            ],
            "descriptions": "Only the owner can set the token pool address.",
            "references": ["tokenPool"]
        }
    ]
}