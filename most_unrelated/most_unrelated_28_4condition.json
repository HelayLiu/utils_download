{
    "paused() returns (bool)": [],
    "owner() returns (address)": [],
    "renounceOwnership()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before renouncing ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "transferOwnership(address newOwner)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before transfer ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "initialize(address _stakeToken, address _rewardToken, uint256 _rewardInterval, uint256 _rewardsRatioNumerator, uint256 _rewardsRatioDenominator, uint256 _minStakingPeriod, uint256 _maxStakingPeriod)": [],
    "pause()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": ["_owner", "msg.sender"],
            "descriptions": "Ensure that the caller is the current owner before pausing the contract.",
            "references": ["_paused"]
        }
    ],
    "unPause()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": ["_owner", "msg.sender"],
            "descriptions": "Ensure that the caller is the current owner before unpausing the contract.",
            "references": ["_paused"]
        }
    ],
    "setStakeToken(address _stakeToken)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": ["_owner", "msg.sender"],
            "descriptions": "Ensure that the caller is the current owner before setting the stake token.",
            "references": ["stakeToken"]
        }
    ],
    "setRewardToken(address _rewardToken)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": ["_owner", "msg.sender"],
            "descriptions": "Ensure that the caller is the current owner before setting the reward token.",
            "references": ["rewardToken"]
        }
    ],
    "setRewardInterval(uint256 _rewardInterval)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": ["_owner", "msg.sender"],
            "descriptions": "Ensure that the caller is the current owner before setting the rewardInterval.",
            "references": ["rewardInterval"]
        }
    ],
    "setRewardsRatioNumerator(uint256 _rewardsRatioNumerator)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": ["_owner", "msg.sender"],
            "descriptions": "Ensure that the caller is the current owner before setting the rewardsRatioNumerator.",
            "references": ["rewardsRatioNumerator"]
        }
    ],
    "setRewardsRatioDenominator(uint256 _rewardsRatioDenominator)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": ["_owner", "msg.sender"],
            "descriptions": "Ensure that the caller is the current owner before setting the rewardsRatioDenominator.",
            "references": ["rewardsRatioDenominator"]
        }
    ],
    "setMinStakingPeriod(uint256 _minStakingPeriod)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": ["_owner", "msg.sender"],
            "descriptions": "Ensure that the caller is the current owner before setting the minStakingPeriod.",
            "references": ["minStakingPeriod"]
        }
    ],
    "setMaxStakingPeriod(uint256 _maxStakingPeriod)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": ["_owner", "msg.sender"],
            "descriptions": "Ensure that the caller is the current owner before setting the minStakingPeriod.",
            "references": ["maxStakingPeriod"]
        }
    ],
    "stake(uint256 _stakeAmount) returns (bool)": [
    ],
    "getTotalActiveRewards() returns (uint256)": [
    ],
    "claim(uint256 _id) returns (bool)": [
        {
        "specific_checks": "stakedCount[msg.sender] > 0",
        "involved_variables": ["stakedCount"],
        "descriptions": "Verify user has active stakes",
        "references": ["stakeInfos"]
        }
    ],
    "unStake(uint256 _id) returns (bool)": [
    ],
    "getRewardsByID(address user, uint256 _id) returns (uint256)": [
    ],
    "getRewardsByUser(address user) returns (uint256)": [

    ],
    "getUserStakes(address user) returns (Stake.StakeDetails[], Stake.StakeDetails[])": [
    ],
    "withdrawTokens(uint256 _amount)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": ["_owner", "msg.sender"],
            "descriptions": "Ensure that the caller is the current owner before withdrawing tokens.",
            "references": []
        }
    ],
    "getContractTokenBalance() returns (uint256)": [],
    "getTotalStakedAmount() returns (uint256)": [
    ]
}