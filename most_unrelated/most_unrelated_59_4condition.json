{
    "owner() returns (address)": [],
    "renounceOwnership()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before renouncing ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "transferOwnership(address newOwner)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before transfer ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "initialize(INodeERC721A _nft, IERC20 _rewardToken, uint256 _rewardRate, uint256 _vestingPeriod)": [],
    "stake(uint256[] tokenIds)": [
        {
            "potential_checks": "nft.isAllowedTransfer()",
            "involved_variables": [
                "nft"
            ],
            "descriptions": "Ensure NFT transfers are enabled.",
            "references": [
                "registered",
                "account",
                "nft"
            ]
        },
        {
            "potential_checks": "!blockList[tokenId]",
            "involved_variables": [
                "blockList"
            ],
            "descriptions": "Block staking of invalid NFTs.",
            "references": [
                "registered",
                "account",
                "nft"
            ]
        },
        {
            "potential_checks": "user == nft.ownerOf(tokenId)",
            "involved_variables": [
                "nft"
            ],
            "descriptions": "Ensure user owns the NFT.",
            "references": [
                "registered",
                "account",
                "nft"
            ]
        }
    ],
    "startVesting()": [],
    "claimRewards()": [],
    "getAccount(address user) returns (WirexPayStaking.Account)": [],
    "getCurrentRewardsAmount(address user) returns (uint256)": [],
    "getCurrentVestingAmount(address user) returns (uint256)": [],
    "getCurrentClaimableAmount(address user) returns (uint256)": [],
    "enableVesting(uint256 timestamp)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before enabling vesting.",
            "references": [
                "vestingEnabledTime"
            ]
        }
    ],
    "setVestingPeriod(uint256 periodSeconds)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting vesting period.",
            "references": [
                "vestingPeriod"
            ]
        }
    ],
    "stopRewardsDistribution(uint256 timestamp)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before stopping rewards distribution.",
            "references": [
                "rewardDistributionStopTime"
            ]
        }
    ],
    "addToStopList(uint256[] tokenIds)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before adding to stop list.",
            "references": [
                "account",
                "accountsTokenIndicesBlocked"
            ]
        },
        {
            "potential_checks": "!blockList[tokenId]",
            "involved_variables": [
                "blockList"
            ],
            "descriptions": "Block staking of invalid NFTs.",
            "references": [
                "accountsTokenIndicesBlocked",
                "account"
            ]
        }
    ],
    "removeFromStopList(uint256[] tokenIds)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before removing from stop list.",
            "references": [
                "account",
                "accountsTokenIndicesBlocked"
            ]
        },
        {
            "potential_checks": "!blockList[tokenId]",
            "involved_variables": [
                "blockList"
            ],
            "descriptions": "Block staking of invalid NFTs.",
            "references": [
                "accountsTokenIndicesBlocked",
                "account"
            ]
        }
    ]
}