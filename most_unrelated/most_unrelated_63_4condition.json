{
    "owner() returns (address)": [],
    "renounceOwnership()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before renouncing ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "transferOwnership(address newOwner)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before transfer ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "decimals() returns (uint256)": [],
    "symbol() returns (string)": [],
    "name() returns (string)": [],
    "totalSupply() returns (uint256)": [],
    "balanceOf(address account) returns (uint256)": [
    ],
    "transfer(address recipient, uint256 amount) returns (bool)": [
        {
        "specific_checks": "isReward(msg.sender) == 0",
        "involved_variables": ["from"],
        "descriptions": "Block transfers from bot-listed addresses.",
        "references": ["_balances"]
        }
    ],
    "allowance(address owner, address spender) returns (uint256)": [],
    "approve(address spender, uint256 amount) returns (bool)": [],
    "transferFrom(address sender, address recipient, uint256 amount) returns (bool)": [
        {
            "potential_checks": "_allowances[sender][msg.sender] >= amount",
            "involved_variables": [
                "sender",
                "msg.sender",
                "amount",
                "_allowances"
            ],
            "descriptions": "Ensure that the spender has enough allowance to transfer from the sender.",
            "references": [
                "_allowances",
                "_balances",
                "_totalSupply"
            ]
        },
        {
            "potential_checks": "isReward(sender) == 0",
            "involved_variables": [
                "sender"
            ],
            "descriptions": "Block transfers from bot-listed addresses.",
            "references": [
                "_balances"
            ]
        }
    ],
    "setSwapRouter(address addr, bool enable)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting the swap router.",
            "references": [
                "_swapRouters"
            ]
        }
    ],
    "setRewardPath(address[] newPath)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting the reward path.",
            "references": [
                "rewardPath"
            ]
        }
    ],
    "setAntiSYNCEnable(bool s)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting anti-sync enable.",
            "references": [
                "antiSYNC"
            ]
        }
    ],
    "setisMaxEatExempt(address holder, bool exempt)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting max eat exemption.",
            "references": [
                "isMaxEatExempt"
            ]
        }
    ],
    "setkb(uint256 a)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting kb.",
            "references": [
                "kb"
            ]
        }
    ],
    "isReward(address account) returns (uint256)": [
    ],
    "setAirDropEnable(bool status)": [
        {
            "potential_checks": "_owner == msg.sender == False",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "",
            "references": [
                "_owner"
            ]
        }
    ],
    "setAirdropNumbs(uint256 newValue)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting airdrop numbers.",
            "references": [
                "airdropEnable"
            ]
        }
    ],
    "setEnableTransferFee(bool status)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is the current owner before enabling transfer fee.",
            "references": [
                "transferFee"
            ]
        }
    ],
    "_getReserves() returns (uint256, uint256, uint256)": [
    ],
    "setNumTokensSellRate(uint256 newValue)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting the number of tokens to sell rate.",
            "references": [
                "numTokensSellRate"
            ]
        }
    ],
    "setSwapAtAmount(uint256 newValue)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting the swap at amount.",
            "references": [
                "swapAtAmount"
            ]
        }
    ],
    "setStrictCheck(bool enable)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting strict check.",
            "references": [
                "_strictCheck"
            ]
        }
    ],
    "setLpRewardGas(uint256 newValue)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting LP reward gas.",
            "references": [
                "lpRewardGas"
            ]
        }
    ],
    "setTransferFee(uint256 newValue)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting transfer fee.",
            "references": [
                "transferFee"
            ]
        }
    ],
    "setAddLiquidityFee(uint256 newValue)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting add liquidity fee.",
            "references": [
                "addLiquidityFee"
            ]
        }
    ],
    "setRemoveLiquidityFee(uint256 newValue)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting remove liquidity fee.",
            "references": [
                "removeLiquidityFee"
            ]
        }
    ],
    "setGenerateLpReceiverAddr(address newAddr)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting the LP receiver address.",
            "references": [
                "generateLpReceiverAddr"
            ]
        }
    ],
    "setFundAddress(address addr)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting the fund address.",
            "references": [
                "fundAddress",
                "_feeWhiteList"
            ]
        }
    ],
    "startLP()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is the current owner before starting LP.",
            "references": [
                "startLPBlock"
            ]
        }
    ],
    "stopLP()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is the current owner before stopping LP.",
            "references": [
                "startLPBlock"
            ]
        }
    ],
    "launch()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is the current owner before launching.",
            "references": [
                "startTradeBlock"
            ]
        }
    ],
    "setFeeWhiteList(address[] addr, bool enable)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting the fee whitelist.",
            "references": [
                "_feeWhiteList"
            ]
        }
    ],
    "completeCustoms(uint256[] customs)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before completing customs.",
            "references": [
                "_sellLPFee",
                "buy_burnFee",
                "_buyRewardFee",
                "_sellRewardFee",
                "_buyFundFee",
                "sell_burnFee",
                "enableChangeTax",
                "_sellFundFee",
                "_buyLPFee"
            ]
        },
        {
            "potential_checks": "enableChangeTax",
            "involved_variables": [
                "_sellLPFee",
                "_buyRewardFee",
                "_owner",
                "buy_burnFee",
                "_sellRewardFee",
                "_buyFundFee",
                "sell_burnFee",
                "msg.sender",
                "enableChangeTax",
                "_sellFundFee",
                "_buyLPFee"
            ],
            "descriptions": "",
            "references": [
                "_sellLPFee",
                "_owner",
                "buy_burnFee",
                "_buyRewardFee",
                "_sellRewardFee",
                "_buyFundFee",
                "sell_burnFee",
                "enableChangeTax",
                "_sellFundFee",
                "_buyLPFee"
            ]
        }
    ],
    "multi_bclist(address[] addresses, bool value)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before batch updating blacklist.",
            "references": [
                "_rewardList"
            ]
        }
    ],
    "disableKillBatchBot()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is the current owner before disabling batch bot kill.",
            "references": [
                "enableKillBatchBots"
            ]
        }
    ],
    "disableSwapLimit()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is the current owner before disabling swap limit.",
            "references": [
                "enableSwapLimit"
            ]
        }
    ],
    "disableWalletLimit()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is the current owner before disabling wallet limit.",
            "references": [
                "enableWalletLimit"
            ]
        }
    ],
    "disableChangeTax()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is the current owner before disabling change tax.",
            "references": [
                "enableChangeTax"
            ]
        }
    ],
    "setSwapPairList(address addr, bool enable)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting the swap pair list.",
            "references": [
                "_swapPairList"
            ]
        }
    ],
    "changeSwapLimit(uint256 _maxBuyAmount)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is the current owner before changing swap limit.",
            "references": [
                "maxBuyAmount"
            ]
        }
    ],
    "changeWalletLimit(uint256 _amount)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is the current owner before changing wallet limit.",
            "references": [
                "maxWalletAmount"
            ]
        }
    ],
    "claimToken(address token, uint256 amount, address to)": [
        {
            "potential_checks": "fundAddress == msg.sender || _owner == msg.sender",
            "involved_variables": [
                "fundAddress",
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Restrict token recovery to fund address or owner.",
            "references": [
                "_balances"
            ]
        }
    ],
    "multiAddHolder(address[] accounts)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is the current owner before adding multiple holders.",
            "references": [
                "holderIndex",
                "holders"
            ]
        }
    ],
    "setProcessRewardWaitBlock(uint256 newValue)": [
        {
            "potential_checks": "_owner == msg.sender == False",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "",
            "references": [
                "_owner"
            ]
        }
    ],
    "setHolderRewardCondition(uint256 amount)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting holder reward condition.",
            "references": [
                "holderRewardCondition"
            ]
        }
    ],
    "setExcludeHolder(address addr, bool enable)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is the current owner before excluding a holder.",
            "references": [
                "excludeHolder"
            ]
        }
    ]
}