{
    "setup(string key)": [
        {
            "potential_checks": "keyHash == 0x0",
            "involved_variables": [
                "keyHash"
            ],
            "descriptions": "Ensure keyHash is uninitialized before allowing setup to prevent overwrites.",
            "references": [
                "keyHash"
            ]
        },
        {
            "potential_checks": "keyHash = keccak256(abi.encodePacked(key))",
            "involved_variables": [
                "keyHash",
                "key"
            ],
            "descriptions": "Sets keyHash to the keccak256 hash of the provided key, ensuring integrity.",
            "references": [
                "keyHash"
            ]
        }
    ],
    "withdraw(string key)": [
        {
            "potential_checks": "msg.sender == tx.origin",
            "involved_variables": [
                "msg.sender",
                "tx.origin"
            ],
            "descriptions": "Restrict caller to EOAs (not contracts) to prevent reentrancy attacks.",
            "references": [
                "balance"
            ]
        },
        {
            "potential_checks": "keyHash == keccak256(abi.encodePacked(key))",
            "involved_variables": [
                "keyHash",
                "key"
            ],
            "descriptions": "Validate secret key against stored hash to authorize fund access and the key should be stored as hash.",
            "references": [
                "keyHash",
                "balance"
            ]
        },
        {
            "potential_checks": "msg.value > 0.2 ether",
            "involved_variables": [
                "msg.value"
            ],
            "descriptions": "Require >0.2 ETH sent to trigger full balance transfer.",
            "references": [
                "balance"
            ]
        }
    ],
    "update(string key, string new_key)": [
        {
            "potential_checks": "keyHash == keccak256(abi.encodePacked(key))",
            "involved_variables": [
                "keyHash",
                "key"
            ],
            "descriptions": "Ensure keyHash matches the hash of the provided key before allowing update to prevent unauthorized changes.",
            "references": [
                "keyHash"
            ]
        },
        {
            "potential_checks": "keyHash = keccak256(abi.encodePacked(key))",
            "involved_variables": [
                "keyHash",
                "key"
            ],
            "descriptions": "Sets keyHash to the keccak256 hash of the provided key, ensuring integrity.",
            "references": [
                "keyHash"
            ]
        }
    ],
    "clear()": [
        {
            "potential_checks": "msg.sender == owner",
            "involved_variables": [
                "owner",
                "msg.sender"
            ],
            "descriptions": "Allows the contract owner to clear the keyHash, resetting state variables.",
            "references": [
                "owner",
                "selfdestruct"
            ]
        }
    ]
}