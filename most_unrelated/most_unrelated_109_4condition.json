{
    "withdraw(string key)": [
        {
            "specific_checks": "msg.sender == tx.origin",
            "involved_variables": [
                "msg.sender",
                "tx.origin"
            ],
            "descriptions": "Prevent contract calls (ensure EOA-only access for security).",
            "references": [
                "balance"
            ]
        },
        {
            "specific_checks": "keyHash == keccak256(abi.encodePacked(key))",
            "involved_variables": [
                "keyHash"
            ],
            "descriptions": "Validate withdrawal key against stored hash to enforce fund access isolation.",
            "references": [
                "keyHash",
                "balance"
            ]
        },
        {
            "specific_checks": "msg.value > 0.4 ether",
            "involved_variables": [
                "msg.value"
            ],
            "descriptions": "Require minimum ETH sent (>0.4) to mitigate trivial withdrawal attacks.",
            "references": [
                "balance"
            ]
        }
    ],
    "setup_key(string key)": [
        {
            "specific_checks": "keyHash == 0x0",
            "involved_variables": [
                "keyHash"
            ],
            "descriptions": "Ensure keyHash is unset before initialization (one-time write isolation).",
            "references": [
                "keyHash"
            ]
        },
        {
            "specific_checks": "keyHash = keccak256(abi.encodePacked(key));",
            "involved_variables": [
                "keyHash",
                "key"
            ],
            "descriptions": "Set keyHash to keccak256 hash of provided key (ensures integrity).",
            "references": [
                "keyHash"
            ]
        }
    ],
    "new_hassh(bytes32 new_hash)": [
        {
            "specific_checks": "keyHash == 0x0",
            "involved_variables": [
                "keyHash"
            ],
            "descriptions": "Restrict hash update to uninitialized state (immutable after first set).",
            "references": [
                "keyHash"
            ]
        }
    ],
    "clear()": [
        {
            "specific_checks": "msg.sender == owner",
            "involved_variables": [
                "msg.sender",
                "owner"
            ],
            "descriptions": "Enforce owner-only access for self-destruct to protect contract lifecycle.",
            "references": [
                "owner",
                "selfdestruct"
            ]
        }
    ],
    "get_id() returns (bytes32)": []
}