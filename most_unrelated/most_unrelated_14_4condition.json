{
    "permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)": [
        {
            "specific_checks": "block.timestamp <= deadline",
            "involved_variables": ["block.timestamp", "deadline"],
            "descriptions": "Ensure permit signature is not expired",
            "references": [ "_allowances"]
        },
        {
            "specific_checks": "signer == owner",
            "involved_variables": ["signer", "owner"],
            "descriptions": "Verify ECDSA signature matches token owner",
            "references": [ "_allowances"]
        }
    ],
    "nonces(address owner) returns (uint256)": [],
    "DOMAIN_SEPARATOR() returns (bytes32)": [],
    "eip712Domain() returns (bytes1, string, string, uint256, address, bytes32, uint256[])": [],
    "name() returns (string)": [],
    "symbol() returns (string)": [],
    "decimals() returns (uint8)": [],
    "totalSupply() returns (uint256)": [],
    "balanceOf(address account) returns (uint256)": [],
    "transfer(address to, uint256 value) returns (bool)": [],
    "allowance(address owner, address spender) returns (uint256)": [],
    "approve(address spender, uint256 value) returns (bool)": [],
    "transferFrom(address from, address to, uint256 value) returns (bool)": [
        {
            "specific_checks": "_allowances[from][msg.sender] >= value",
            "involved_variables": ["_allowances", "value", "from", "msg.sender"],
            "descriptions": "Verify spender has sufficient allowance",
            "references": ["_allowances"]
        }
    ],
    "burn(uint256 value)": [
        {
            "potential_checks": "fromBalance < value == False",
            "involved_variables": [
                "fromBalance",
                "account",
                "to",
                "from",
                "value"
            ],
            "descriptions": "",
            "references": []
        }
    ],
    "burnFrom(address account, uint256 value)": [
        {
            "specific_checks": "_allowances[from][msg.sender] >= value",
            "involved_variables": ["_allowances", "value", "from", "msg.sender"],
            "descriptions": "Verify spender has sufficient allowance",
            "references": ["_allowances"]
        }
    ]
}