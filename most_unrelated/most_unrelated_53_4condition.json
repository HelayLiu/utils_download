{
    "supportsInterface(bytes4 interfaceId) returns (bool)": [],
    "getRoleMember(bytes32 role, uint256 index) returns (address)": [],
    "getRoleMemberCount(bytes32 role) returns (uint256)": [],
    "hasRole(bytes32 role, address account) returns (bool)": [],
    "getRoleAdmin(bytes32 role) returns (bytes32)": [],
    "grantRole(bytes32 role, address account)": [],
    "revokeRole(bytes32 role, address account)": [],
    "renounceRole(bytes32 role, address account)": [],
    "verify(ITokenERC20.MintRequest req, bytes signature) returns (bool, address)": [],
    "mintTo(address to, uint256 amount)": [
        {
            "potential_checks": "hasRole(MINTER_ROLE, msg.sender)",
            "involved_variables":  ["msg.sender", "_roles"],
            "descriptions": "Verify caller has MINTER_ROLE to mint tokens.",
            "references": ["_balances", "_totalSupply"]
        }
    ],
    "mintWithSignature(ITokenERC20.MintRequest req, bytes signature)": [
        {
            "potential_checks": "!minted[_req.uid] && hasRole(MINTER_ROLE, signer)",
            "involved_variables":  ["req", "_signature"],
            "descriptions": "Ensure mint request is signed by MINTER_ROLE, active, and not duplicated.",
            "references": ["_balances", "_totalSupply"]
        },
        {
            "potential_checks": "req.price==0 ? msg.value==0 : (req.currency==NATIVE_TOKEN ? msg.value==req.price : msg.value==0)",
            "involved_variables":  ["msg.value", "req.price", "req.currency"],
            "descriptions": "Enforce correct payment (native/ERC20) for mintWithSignature.",
            "references": ["_balances", "_totalSupply"]
        }
    ],
    "name() returns (string)": [],
    "symbol() returns (string)": [],
    "decimals() returns (uint8)": [],
    "totalSupply() returns (uint256)": [],
    "balanceOf(address account) returns (uint256)": [],
    "transfer(address to, uint256 amount) returns (bool)": [
        {
            "potential_checks": "(!hasRole(TRANSFER_ROLE, address(0)) && to != address(0)) ? (hasRole(TRANSFER_ROLE,msg.sender) || hasRole(TRANSFER_ROLE,to)) :True",
            "involved_variables": [
                "_roles",
                "msg.sender",
                "to"
            ],
            "descriptions": "Ensure when address(0) is not a transfer role, the msg.sender or to must have the transfer role.",
            "references": [
                "_balances"
            ]
        }
    ],
    "allowance(address owner, address spender) returns (uint256)": [],
    "approve(address spender, uint256 amount) returns (bool)": [
    ],
    "transferFrom(address from, address to, uint256 amount) returns (bool)": [
        {
            "potential_checks": "(!hasRole(TRANSFER_ROLE, address(0)) && from != address(0) && to != address(0)) ? (hasRole(TRANSFER_ROLE, from) || hasRole(TRANSFER_ROLE,to)) :True",
            "involved_variables": [
                "_roles",
                "from",
                "to"
            ],
            "descriptions": "Ensure when address(0) is not a transfer role, the from or to must have the transfer role.",
            "references": [
                "_balances"
            ]
        },
        {
            "potential_checks": "_allowances[from][msg.sender] >= amount",
            "involved_variables": [
                "msg.sender",
                "from",
                "amount",
                "_allowances"
            ],
            "descriptions": "Ensure the current allowance is sufficient for the transfer.",
            "references": [
                "_balances"
            ]
        }
    ],
    "clock() returns (uint48)": [],
    "CLOCK_MODE() returns (string)": [],
    "checkpoints(address account, uint32 pos) returns (ERC20VotesUpgradeable.Checkpoint)": [],
    "numCheckpoints(address account) returns (uint32)": [],
    "delegates(address account) returns (address)": [],
    "getVotes(address account) returns (uint256)": [],
    "getPastVotes(address account, uint256 timepoint) returns (uint256)": [],
    "getPastTotalSupply(uint256 timepoint) returns (uint256)": [],
    "delegate(address delegatee)": [],
    "delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s)": [],
    "permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)": [
        {
            "potential_checks": "signer == owner",
            "involved_variables": [
                "owner",
                "signer",
                "v",
                "r",
                "s"
            ],
            "descriptions": "Ensure the signer matches the owner for permit functionality.",
            "references": [
                "_allowances"
            ]
        },
        {
            "potential_checks": "deadline >= block.timestamp",
            "involved_variables": [
                "deadline",
                "block.timestamp"
            ],
            "descriptions": "Ensure the permit is valid within the specified deadline.",
            "references": ["_allowances"]
        }
    ],
    "nonces(address owner) returns (uint256)": [],
    "DOMAIN_SEPARATOR() returns (bytes32)": [],
    "eip712Domain() returns (bytes1, string, string, uint256, address, bytes32, uint256[])": [],
    "increaseAllowance(address spender, uint256 addedValue) returns (bool)": [
    ],
    "decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)": [
    ],
    "burn(uint256 amount)": [
    ],
    "burnFrom(address account, uint256 amount)": [
        {
            "potential_checks": "_allowances[account][msg.sender] >= amount",
            "involved_variables": [
                "msg.sender",
                "account",
                "amount",
                "_allowances"
            ],
            "descriptions": "Ensure the current allowance is sufficient for the burnFrom operation.",
            "references": [
                "_balances"
            ]
        }
    ],
    "multicall(bytes[] data) returns (bytes[])": [],
    "isTrustedForwarder(address forwarder) returns (bool)": [],
    "getPlatformFeeInfo() returns (address, uint16)": [],
    "setPlatformFeeInfo(address _platformFeeRecipient, uint256 _platformFeeBps)": [
        {
            "potential_checks": "hasRole(DEFAULT_ADMIN_ROLE, msg.sender)",
            "involved_variables":  ["msg.sender", "_roles"],
            "descriptions": "Restrict fee updates to DEFAULT_ADMIN_ROLE.",
            "references": [ "platformFeeRecipient", "platformFeeBps"]
        }
    ],
    "primarySaleRecipient() returns (address)": [],
    "setPrimarySaleRecipient(address _saleRecipient)": [
        {
            "potential_checks": "hasRole(DEFAULT_ADMIN_ROLE, msg.sender)",
            "involved_variables":  ["msg.sender", "_roles"],
            "descriptions": "Restrict primary sale recipient updates to DEFAULT_ADMIN_ROLE.",
            "references": [ "primarySaleRecipient"]
        }
    ],
    "contractType() returns (bytes32)": [],
    "contractVersion() returns (uint8)": [],
    "contractURI() returns (string)": [],
    "setContractURI(string _uri)": [
        {
            "potential_checks": "hasRole(DEFAULT_ADMIN_ROLE, msg.sender)",
            "involved_variables":  ["msg.sender", "_roles"],
            "descriptions": "Restrict contract URI updates to DEFAULT_ADMIN_ROLE.",
            "references": [ "contractURI"]
        }
    ],
    "initialize(address _defaultAdmin, string _name, string _symbol, string _contractURI, address[] _trustedForwarders, address _primarySaleRecipient, address _platformFeeRecipient, uint256 _platformFeeBps)": [
    ],
    "verify(ITokenERC20.MintRequest _req, bytes _signature) returns (bool, address)": [
    ],
    "mintWithSignature(ITokenERC20.MintRequest _req, bytes _signature)": [
        {
            "potential_checks": "!minted[_req.uid] && hasRole(MINTER_ROLE, signer)",
            "involved_variables":  ["_req", "_signature"],
            "descriptions": "Ensure mint request is signed by MINTER_ROLE, active, and not duplicated.",
            "references": ["_balances", "_totalSupply"]
        },
        {
            "potential_checks": "(_req.price==0 ? msg.value==0 : (_req.currency==NATIVE_TOKEN ? msg.value==_req.price : msg.value==0))",
            "involved_variables":  ["msg.value", "_req.price", "_req.currency"],
            "descriptions": "Enforce correct payment (native/ERC20) for mintWithSignature.",
            "references": ["_balances", "_totalSupply"]
        }
    ]
}