{
    "owner() returns (address)": [],
    "renounceOwnership()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": ["msg.sender", "_owner"],
            "descriptions": "Only the contract owner can renounce ownership",
            "references": ["_owner"]
        }
    ],
    "transferOwnership(address newOwner)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": ["msg.sender", "_owner"],
            "descriptions": "Only the contract owner can transfer ownership",
            "references": ["_owner"]
        }
    ],
    "supportsInterface(bytes4 interfaceId) returns (bool)": [],
    "tokenOfOwnerByIndex(address owner, uint256 index) returns (uint256)": [],
    "totalSupply() returns (uint256)": [],
    "tokenByIndex(uint256 index) returns (uint256)": [],
    "balanceOf(address owner) returns (uint256)": [],
    "ownerOf(uint256 tokenId) returns (address)": [],
    "safeTransferFrom(address from, address to, uint256 tokenId)": [
        {
            "potential_checks": "_isApprovedOrOwner(msg.sender,tokenId)",
            "involved_variables": [
                "msg.sender",
                "tokenId"
            ],
            "descriptions": "Caller must be owner, approved, or operator",
            "references": [ "_balances","_owners"]
        }
    ],
    "transferFrom(address from, address to, uint256 tokenId)": [
        {
            "potential_checks": "_isApprovedOrOwner(msg.sender,tokenId)",
            "involved_variables": [
                "msg.sender",
                "tokenId"
            ],
            "descriptions": "Caller must be owner, approved, or operator",
            "references": ["_balances","_owners"]
        }
    ],
    "approve(address to, uint256 tokenId)": [
        {
            "potential_checks": "msg.sender == owner || isApprovedForAll(owner,msg.sender)",
            "involved_variables": [
                "msg.sender",
                "owner"
            ],
            "descriptions": "Caller must be owner or approved to manage the token",
            "references": ["_tokenApprovals"]
        }
    ],
    "getApproved(uint256 tokenId) returns (address)": [
    ],
    "setApprovalForAll(address operator, bool _approved)": [],
    "isApprovedForAll(address owner, address operator) returns (bool)": [],
    "safeTransferFrom(address from, address to, uint256 tokenId, bytes data)": [],
    "name() returns (string)": [],
    "symbol() returns (string)": [],
    "tokenURI(uint256 tokenId) returns (string)": [
    ],
    "setApprovalForAll(address operator, bool approved)": [
    ],
    "safeTransferFrom(address from, address to, uint256 tokenId, bytes _data)": [
        {
            "potential_checks": "_isApprovedOrOwner(msg.sender,tokenId)",
            "involved_variables": [
                "msg.sender",
                "tokenId"
            ],
            "descriptions": "Caller must be owner, approved, or operator",
            "references": ["_balances","_owners"]
        }
    ],
    "mint(uint256 _mintAmount)": [
        {
            "potential_checks": "!paused",
            "involved_variables": ["paused"],
            "descriptions": "Contract must not be paused",
            "references": ["_owners", "_balances"]
        },
        {
            "potential_checks": "msg.sender == _owner || msg.value >= cost * _mintAmount",
            "involved_variables": [
                "msg.sender",
                "_owner",
                "msg.value",
                "_mintAmount",
                "cost"
            ],
            "descriptions": "Non-owner must pay the required cost",
            "references": [
                    "_owners", "_balances"
            ]
        }
    ],
    "walletOfOwner(address _owner) returns (uint256[])": [
    ],
    "reveal()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": ["_owner", "msg.sender"],
            "descriptions": "Only the contract owner can reveal the NFTs",
            "references": ["revealed"]
        }
    ],
    "setCost(uint256 _newCost)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": ["_owner", "msg.sender"],
            "descriptions": "Only the contract owner can reveal the NFTs",
            "references": ["cost"]
        }
    ],
    "setmaxMintAmount(uint256 _newmaxMintAmount)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": ["_owner", "msg.sender"],
            "descriptions": "Only owner can set the maximum mint amount",
            "references": ["maxMintAmount"]
        }
    ],
    "setNotRevealedURI(string _notRevealedURI)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": ["_owner", "msg.sender"],
            "descriptions": "Only owner can set the notRevealedUri",
            "references": ["notRevealedUri"]
        }
    ],
    "setBaseURI(string _newBaseURI)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": ["_owner", "msg.sender"],
            "descriptions": "Only owner can set the BaseURI",
            "references": ["baseURI"]
        }
    ],
    "setBaseExtension(string _newBaseExtension)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": ["_owner", "msg.sender"],
            "descriptions": "Only owner can set the BaseExtension",
            "references": ["baseExtension"]
        }
    ],
    "pause(bool _state)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": ["_owner", "msg.sender"],
            "descriptions": "Only owner can set the pause",
            "references": ["paused"]
        }
    ],
    "withdraw()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": ["_owner", "msg.sender"],
            "descriptions": "Only owner can withdraw funds",
            "references": ["_owner"]
        }
    ]
}