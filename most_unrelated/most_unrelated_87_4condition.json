{
    "owner() returns (address)": [],
    "renounceOwnership()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before renouncing ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "transferOwnership(address newOwner)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before transfer ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "swapCompact() returns (uint256)": [],
    "swap(OdosRouterV2.swapTokenInfo tokenInfo, bytes pathDefinition, address executor, uint32 referralCode) returns (uint256)": [
        {
            "potential_checks": "tokenInfo.outputMin <= tokenInfo.outputQuote",
            "involved_variables": [
                "tokenInfo",
                "tokenInfo"
            ],
            "descriptions": "Ensures minimum output does not exceed quoted value.",
            "references": [
                "referralLookup"
            ]
        }
    ],
    "swapPermit2(OdosRouterV2.permit2Info permit2, OdosRouterV2.swapTokenInfo tokenInfo, bytes pathDefinition, address executor, uint32 referralCode) returns (uint256)": [
        {
            "potential_checks": "tokenInfo.outputMin <= tokenInfo.outputQuote",
            "involved_variables": [
                "tokenInfo"
            ],
            "descriptions": "Ensures minimum output does not exceed quoted value.",
            "references": [
                "referralLookup"
            ]
        }
    ],
    "swapMultiCompact() returns (uint256[])": [
        {
            "potential_checks": "msg.value == expected_msg_value",
            "involved_variables": [
                "msg.value",
                "expected_msg_value"
            ],
            "descriptions": "Ensures ETH input matches the sum of ETH inputs in the token list.",
            "references": [
                "referralLookup"
            ]
        }
    ],
    "swapMulti(OdosRouterV2.inputTokenInfo[] inputs, OdosRouterV2.outputTokenInfo[] outputs, uint256 valueOutMin, bytes pathDefinition, address executor, uint32 referralCode) returns (uint256[])": [
        {
            "potential_checks": "msg.value == expected_msg_value",
            "involved_variables": [
                "msg.value",
                "expected_msg_value"
            ],
            "descriptions": "Ensures ETH input matches the sum of ETH inputs in the token list.",
            "references": [
                "referralLookup"
            ]
        }
    ],
    "swapMultiPermit2(OdosRouterV2.permit2Info permit2, OdosRouterV2.inputTokenInfo[] inputs, OdosRouterV2.outputTokenInfo[] outputs, uint256 valueOutMin, bytes pathDefinition, address executor, uint32 referralCode) returns (uint256[])": [
        {
            "potential_checks": "msg.value == expected_msg_value",
            "involved_variables": [
                "msg.value",
                "expected_msg_value"
            ],
            "descriptions": "Ensures ETH input matches the sum of ETH inputs in the token list.",
            "references": [
                "referralLookup"
            ]
        }
    ],
    "registerReferralCode(uint32 _referralCode, uint64 _referralFee, address _beneficiary)": [
        {
            "potential_checks": "!referralLookup[_referralCode].registered",
            "involved_variables": [
                "referralLookup",
                "_referralCode"
            ],
            "descriptions": "Prevents overwriting existing referral codes.",
            "references": [
                "referralLookup"
            ]
        }
    ],
    "setSwapMultiFee(uint256 _swapMultiFee)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting the swap multi fee.",
            "references": [
                "swapMultiFee"
            ]
        }
    ],
    "writeAddressList(address[] addresses)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before writing to the address list.",
            "references": [
                "addressList"
            ]
        }
    ],
    "transferRouterFunds(address[] tokens, uint256[] amounts, address dest)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before transferring router funds.",
            "references": [
                "_balances",
                "value"
            ]
        }
    ],
    "swapRouterFunds(OdosRouterV2.inputTokenInfo[] inputs, OdosRouterV2.outputTokenInfo[] outputs, uint256 valueOutMin, bytes pathDefinition, address executor) returns (uint256[])": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before swapping router funds.",
            "references": [
                "_balances",
                "value"
            ]
        }
    ]
}