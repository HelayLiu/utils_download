{
    "implementation() returns (address)": [],
    "proxyIsGovernor(address testGovernor) returns (bool)": [
    ],
    "proxyNominateNewGovernor(address newGovernor)": [
        {
        "potential_checks": "isGovernor(msg.sender)",
        "involved_variables": ["governanceInfo","msg.sender"],
        "descriptions": "Verify governor role for nominations.",
        "references": ["governanceInfo"]
        }
    ],
    "proxyRemoveGovernor(address governorForRemoval)": [
        {
        "potential_checks": "isGovernor(msg.sender)",
        "involved_variables": ["governanceInfo","msg.sender"],
        "descriptions": "Verify governor role for removals.",
        "references": ["governanceInfo"]
        },
        {
        "potential_checks": "isGovernor(governorForRemoval)",
        "involved_variables": ["governanceInfo","governorForRemoval"],
        "descriptions": "Ensure target is a governor.",
        "references": ["governanceInfo"]
        }
    ],
    "proxyAcceptGovernance()": [
        {
        "potential_checks": "msg.sender == gub.candidateGovernor",
        "involved_variables": ["governanceInfo","msg.sender"],
        "descriptions": "Verify caller is nominated governor.",
        "references": ["governanceInfo"]
        }
    ],
    "proxyCancelNomination()": [
        {
        "potential_checks": "isGovernor(msg.sender)",
        "involved_variables": ["governanceInfo","msg.sender"],
        "descriptions": "Verify governor role for cancellation.",
        "references": ["governanceInfo"]
        }
    ],
    "getUpgradeActivationDelay() returns (uint256)": [],
    "initialize(bytes )": [],
    "isNotFinalized() returns (bool)": [],
    "addImplementation(address newImplementation, bytes data, bool finalize)": [
        {
        "potential_checks": "isGovernor(msg.sender)",
        "involved_variables": ["governanceInfo","msg.sender"],
        "descriptions": "Verify governor role for additions.",
        "references": ["governanceInfo"]
        },
        {
            "potential_checks": "initializationHash[newImplementation] = keccak256(abi.encode(data, finalize));",
            "involved_variables": [
                "initializationHash",
                "newImplementation",
                "data",
                "finalize"
            ],
            "descriptions": "Store initialization hash for new implementation.",
            "references": [
                "initializationHash"
            ]
        }
    ],
    "removeImplementation(address newImplementation)": [
        {
        "potential_checks": "isGovernor(msg.sender)",
        "involved_variables": ["governanceInfo","msg.sender"],
        "descriptions": "Verify governor role for removals.",
        "references": ["governanceInfo"]
        }
    ],
    "upgradeTo(address newImplementation, bytes data, bool finalize)": [
        {
        "potential_checks": "isGovernor(msg.sender)",
        "involved_variables": ["governanceInfo","msg.sender"],
        "descriptions": "Verify governor role for upgrades.",
        "references": ["governanceInfo"]
        },
        {
        "potential_checks": "initializationHash[newImplementation] == keccak256(abi.encode(data, finalize))",
        "involved_variables": ["initializationHash", "newImplementation", "data", "finalize"],
        "descriptions": "Validate initialization data integrity.",
        "references": ["initializationHash"]
        }
    ]
}