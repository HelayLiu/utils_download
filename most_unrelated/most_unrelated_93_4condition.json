{
    "owner() returns (address)": [],
    "renounceOwnership()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before renouncing ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "transferOwnership(address newOwner)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before transfer ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "authorizeAddress(address _addr, bool _status)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before authorizing an address.",
            "references": ["_authorized"]
        }
    ],
    "whitelistToken(address token, bool status)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before whitelisting a token.",
            "references": ["_whitelistedTokens"]
        }
    ],
    "whitelistTokenbyAuthorized(address token, bool status)": [
        {
            "potential_checks": "_authorized[msg.sender]",
            "involved_variables": [
                "msg.sender",
                "_authorized"
            ],
            "descriptions": "Ensure that the caller is an authorized address before whitelisting a token.",
            "references": [
                "_whitelistedTokens"
            ]
        }
    ],
    "enableDeposits()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before enabling deposits.",
            "references": [
                "_depositEnabled"
            ]
        }
    ],
    "disableDeposits()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before disabling deposits.",
            "references": [
                "_depositEnabled"
            ]
        }
    ],
    "depositToken(address token, uint256 amount)": [
        {
            "potential_checks": "_whitelistedTokens[token]",
            "involved_variables": [
                "_whitelistedTokens",
                "token"
            ],
            "descriptions": "Ensure that the token is whitelisted before allowing deposits.",
            "references": [
                "_deposits"
            ]
        },
        {  
        "potential_checks": "token == address(0) ? msg.value == amount : msg.value == 0",  
        "involved_variables": ["token", "msg.value", "amount"],  
        "descriptions": "Enforces native currency rules: exact ETH for native deposits, zero ETH for ERC20.",  
        "references": ["_deposits"]  
        } 
    ],
    "emergencyWithdraw(address token, uint256 amount)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before emergency withdrawal.",
            "references": [
                "balance"
            ]
        }
    ],
    "unlockToken(address token, address to, uint256 amount)": [
        {
            "potential_checks": "_authorized[msg.sender]",
            "involved_variables": [
                "_authorized",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is an authorized address before unlocking tokens.",
            "references": [
                "balance"
            ]
        }
    ],
    "getDepositAmount(address token, address depositor) returns (uint256)": []
}