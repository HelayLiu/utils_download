{
    "owner() returns (address)": [],
    "renounceOwnership()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before renouncing ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "transferOwnership(address newOwner)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before transfer ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "contribute()": [
        {
            "potential_checks": "msg.value > 0",
            "involved_variables": [
                "msg.value"
            ],
            "descriptions": "Ensure that the contribution amount is greater than zero.",
            "references": [
                "contributions",
                "totalRaised"
            ]
        },
        {
        "potential_checks": "maxWhitelistAmount == 0 || (whitelist[msg.sender] && contributions[msg.sender] + msg.value <= maxWhitelistAmount)",
        "involved_variables": ["maxWhitelistAmount", "whitelist", "contributions", "msg.sender", "msg.value"],
        "descriptions": "Enforce whitelist and per-address caps if active.",
        "references": ["maxWhitelistAmount", "whitelist", "contributions"]
        },
        {
        "potential_checks": "maxPublicContributionAmount == 0 || contributions[msg.sender] + msg.value <= maxPublicContributionAmount",
        "involved_variables": ["maxPublicContributionAmount", "contributions", "msg.sender", "msg.value"],
        "descriptions": "Enforce public contribution caps if active.",
        "references": ["maxPublicContributionAmount", "contributions"]
        }

    ],
    "addToWhitelist(address[] addresses)": [
        {
            "potential_checks": "msg.sender == _owner || msg.sender == protocolAdmin",
            "involved_variables": [
                "_owner",
                "protocolAdmin",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the owner or protocol admin before adding to whitelist.",
            "references": [
                "whitelistArray"
            ]
        }
    ],
    "getWhitelistLength() returns (uint256)": [],
    "removeFromWhitelist(address removedAddress)": [
        {
            "potential_checks": "msg.sender ==  _owner || msg.sender == protocolAdmin",
            "involved_variables": [
                "_owner",
                "protocolAdmin",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the owner or protocol admin before removing from whitelist.",
            "references": [
                "whitelistArray"
            ]
        }
    ],
    "setMaxWhitelistAmount(uint256 _maxWhitelistAmount)": [
        {
            "potential_checks": "msg.sender == _owner || msg.sender == protocolAdmin",
            "involved_variables": [
                "protocolAdmin",
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is the owner or protocol admin before setting max whitelist amount.",
            "references": [
                "maxWhitelistAmount"
            ]
        }
    ],
    "setMaxPublicContributionAmount(uint256 _maxPublicContributionAmount)": [
        {
            "potential_checks": "msg.sender == _owner || msg.sender == protocolAdmin",
            "involved_variables": [
                "protocolAdmin",
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is the owner or protocol admin before setting max public contribution amount.",
            "references": [
                "maxPublicContributionAmount"
            ]
        }
    ],
    "finalizeFundraising(int24 initialTick, int24 upperTick, bytes32 salt) returns (uint256)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before finalizing fundraising.",
            "references": [
                "liquidityLocker",
                "fundraisingFinalized"
            ]
        }
    ],
    "refund()": [
        {
        "potential_checks": "contributions[msg.sender] > 0",
        "involved_variables": ["contributions"],
        "descriptions": "Ensure contributor has a balance to refund.",
        "references": ["contributions"]
        }
    ],
    "execute(address[] contracts, bytes[] data, uint256[] msgValues)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before executing transactions.",
            "references": [
            ]
        }
    ],
    "extendFundExpiry(uint256 newFundExpiry)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before executing transactions.",
            "references": [
                "fundExpiry"
            ]
        }
    ],
    "extendFundraisingDeadline(uint256 newFundraisingDeadline)": [
        {
            "potential_checks": "msg.sender == _owner || msg.sender == protocolAdmin",
            "involved_variables": [
                "_owner",
                "protocolAdmin",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the owner or protocol admin before extending fundraising deadline.",
            "references": [
                "fundraisingDeadline"
            ]
        }
    ],
    "emergencyEscape()": [
        {
            "potential_checks": "msg.sender == protocolAdmin",
            "involved_variables": [
                "protocolAdmin",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the protocol admin before executing emergency escape.",
            "references": [
            ]
        }
    ],
    "onERC721Received(address , address , uint256 , bytes ) returns (bytes4)": []
}