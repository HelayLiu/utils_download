{
    "pendingOwner() returns (address)": [],
    "renounceOwnership()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before renouncing ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "transferOwnership(address newOwner)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before transfer ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "vestedAmount(uint256 amount) returns (uint256)": [
    ],
    "claim(uint256 _amount, bytes32[] _merkleProof, bytes _signature)": [
        {  
        "potential_checks": "recoveredSigner == signer",  
        "involved_variables": ["recoveredSigner", "signer","_signature"],  
        "descriptions": "Validate signature authorizes claim.",  
        "references": ["TOKEN"]  
        }
    ],
    "setSigner(address _signer)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Restrict setting the signer address to the owner.",
            "references": ["signer"]
        }
    ],
    "withdraw(uint256 amount)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before withdrawing funds.",
            "references": ["STAKE_MANAGER","TOKEN"]
        }
    ],
    "acceptOwnership() returns ()": [
        {
            "potential_checks": "_pendingOwner == msg.sender",
            "involved_variables": [
                "_pendingOwner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the pending owner before accepting ownership.",
            "references": [
                "_pendingOwner"
            ]
        }
    ]
}