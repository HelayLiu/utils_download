{
    "proxiableUUID() returns (bytes32)": [],
    "upgradeTo(address newImplementation)": [
        {
            "potential_checks": "hasRole(UPGRADER_ROLE, msg.sender)",
            "involved_variables": [
                "msg.sender",
                "_roles"
            ],
            "descriptions": "Restricts upgrades to UPGRADER_ROLE.",
            "references": [
                "implementation"
            ]
        }
    ],
    "upgradeToAndCall(address newImplementation, bytes data)": [
        {
            "potential_checks": "hasRole(UPGRADER_ROLE, msg.sender)",
            "involved_variables": [
                "msg.sender",
                "_roles"
            ],
            "descriptions": "Restricts upgrades to UPGRADER_ROLE.",
            "references": [
                "implementation"
            ]
        }
    ],
    "supportsInterface(bytes4 interfaceId) returns (bool)": [],
    "hasRole(bytes32 role, address account) returns (bool)": [],
    "getRoleAdmin(bytes32 role) returns (bytes32)": [],
    "grantRole(bytes32 role, address account)": [
        {
            "potential_checks": "hasRole(getRoleAdmin(role), msg.sender)",
            "involved_variables": [
                "msg.sender",
                "_roles"
            ],
            "descriptions": "Ensures only accounts with the admin role can grant roles.",
            "references": [
                "_roles"
            ]
        }
    ],
    "revokeRole(bytes32 role, address account)": [
        {
            "potential_checks": "hasRole(getRoleAdmin(role), msg.sender)",
            "involved_variables": [
                "msg.sender",
                "_roles"
            ],
            "descriptions": "Ensures only accounts with the admin role can grant roles.",
            "references": [
                "_roles"
            ]
        }
    ],
    "renounceRole(bytes32 role, address account)": [
        {
            "potential_checks": "account == msg.sender",
            "involved_variables": [
                "account",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the account renouncing the role.",
            "references": [
                "_roles"
            ]
        }
    ],
    "balanceOf(address owner) returns (uint256)": [],
    "ownerOf(uint256 tokenId) returns (address)": [],
    "name() returns (string)": [],
    "symbol() returns (string)": [],
    "tokenURI(uint256 tokenId) returns (string)": [],
    "approve(address to, uint256 tokenId)": [],
    "getApproved(uint256 tokenId) returns (address)": [],
    "setApprovalForAll(address operator, bool approved)": [],
    "isApprovedForAll(address owner, address operator) returns (bool)": [],
    "transferFrom(address from, address to, uint256 tokenId)": [
        {
            "potential_checks": "msg.sender == owner || _operatorApprovals[owner][msg.sender] || tokenApprovals[tokenId] == msg.sender",
            "involved_variables": [
                "msg.sender",
                "owner",
                "_operatorApprovals",
                "tokenApprovals",
                "tokenId"
            ],
            "descriptions": "Ensure that the caller is either the owner, an approved operator, or has specific token approval.",
            "references": [
                "_balances",
                "_owners"
            ]
        }
    ],
    "safeTransferFrom(address from, address to, uint256 tokenId)": [
        {
            "potential_checks": "msg.sender == owner || _operatorApprovals[owner][msg.sender] || tokenApprovals[tokenId] == msg.sender",
            "involved_variables": [
                "msg.sender",
                "owner",
                "_operatorApprovals",
                "tokenApprovals",
                "tokenId"
            ],
            "descriptions": "Ensure that the caller is either the owner, an approved operator, or has specific token approval.",
            "references": [
                "_balances",
                "_owners"
            ]
        }
    ],
    "safeTransferFrom(address from, address to, uint256 tokenId, bytes data)": [
        {
            "potential_checks": "msg.sender == owner || _operatorApprovals[owner][msg.sender] || tokenApprovals[tokenId] == msg.sender",
            "involved_variables": [
                "msg.sender",
                "owner",
                "_operatorApprovals",
                "tokenApprovals",
                "tokenId"
            ],
            "descriptions": "Ensure that the caller is either the owner, an approved operator, or has specific token approval.",
            "references": [
                "_balances",
                "_owners"
            ]
        }
    ],
    "initialize()": [],
    "setURI(string uri)": [
        {
            "potential_checks": "hasRole(MINTER_ROLE,msg.sender)",
            "involved_variables": [
                "role",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller has the MINTER_ROLE before setting the URI.",
            "references": [
                "_basicUri"
            ]
        }
    ],
    "safeMint(address to, uint256 tokenId)": [
        {
            "potential_checks": "hasRole(MINTER_ROLE,msg.sender)",
            "involved_variables": [
                "role",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller has the MINTER_ROLE before minting a token.",
            "references": [
                "_balances",
                "_owners"
            ]
        },
        {
            "potential_checks": "!blockTokenLists[tokenId]",
            "involved_variables": [
                "tokenId",
                "blockTokenLists"
            ],
            "descriptions": "Blocks minting for restricted tokens.",
            "references": [
                "_balances",
                "_owners"
            ]
        },
        {
            "potential_checks": "!blockWalletLists[to]",
            "involved_variables": [
                "to",
                "blockWalletLists"
            ],
            "descriptions": "Blocks minting to restricted wallets.",
            "references": [
                "_balances",
                "_owners"
            ]
        }
    ],
    "safeMintBatch(address to, uint256[] tokenIds)": [
        {
            "potential_checks": "hasRole(MINTER_ROLE,msg.sender)",
            "involved_variables": [
                "role",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller has the MINTER_ROLE before minting a token.",
            "references": [
                "_balances",
                "_owners"
            ]
        },
        {
            "potential_checks": "!blockTokenLists[tokenId]",
            "involved_variables": [
                "tokenId",
                "blockTokenLists"
            ],
            "descriptions": "Blocks minting for restricted tokens.",
            "references": [
                "_balances",
                "_owners"
            ]
        },
        {
            "potential_checks": "!blockWalletLists[to]",
            "involved_variables": [
                "to",
                "blockWalletLists"
            ],
            "descriptions": "Blocks minting to restricted wallets.",
            "references": [
                "_balances",
                "_owners"
            ]
        }
    ],
    "safeTransferFromBatch(address from, address to, uint256[] tokenIds)": [
        {
            "potential_checks": "msg.sender == owner || _operatorApprovals[owner][msg.sender] || tokenApprovals[tokenId] == msg.sender",
            "involved_variables": [
                "msg.sender",
                "owner",
                "_operatorApprovals",
                "tokenApprovals",
                "tokenId"
            ],
            "descriptions": "Ensure that the caller is either the owner, an approved operator, or has specific token approval.",
            "references": [
                "_balances",
                "_owners"
            ]
        }
    ],
    "burn(uint256 tokenId)": [
        {
            "potential_checks": "hasRole(BURNER_ROLE,msg.sender)",
            "involved_variables": [
                "role",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller has the BURNER_ROLE before burning a token.",
            "references": [
                "_balances",
                "_owners"
            ]
        },
        {
            "potential_checks": "msg.sender == owner || _operatorApprovals[owner][msg.sender] || tokenApprovals[tokenId] == msg.sender",
            "involved_variables": [
                "msg.sender",
                "owner",
                "_operatorApprovals",
                "tokenApprovals",
                "tokenId"
            ],
            "descriptions": "Ensure that the caller is either the owner, an approved operator, or has specific token approval.",
            "references": [
                "_balances",
                "_owners"
            ]
        }
    ],
    "burnBatch(uint256[] tokenIds)": [
        {
            "potential_checks": "hasRole(BURNER_ROLE,msg.sender)",
            "involved_variables": [
                "role",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller has the BURNER_ROLE before burning a token.",
            "references": [
                "_balances",
                "_owners"
            ]
        },
        {
            "potential_checks": "msg.sender == owner || _operatorApprovals[owner][msg.sender] || tokenApprovals[tokenId] == msg.sender",
            "involved_variables": [
                "msg.sender",
                "owner",
                "_operatorApprovals",
                "tokenApprovals",
                "tokenId"
            ],
            "descriptions": "Ensure that the caller is either the owner, an approved operator, or has specific token approval.",
            "references": [
                "_balances",
                "_owners"
            ]
        }
    ],
    "setBlockWalletList(address[] addresses, bool[] isBlocks)": [
        {
            "potential_checks": "hasRole(BLOCKER_ROLE,msg.sender)",
            "involved_variables": [
                "role",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller has the BLOCKER_ROLE before setting block wallet list.",
            "references": [
                "blockWalletLists"
            ]
        }
    ],
    "setBlockTokenList(uint256[] tokenIds, bool[] isBlocks)": [
        {
            "potential_checks": "hasRole(BLOCKER_ROLE,msg.sender)",
            "involved_variables": [
                "role",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller has the BLOCKER_ROLE before setting block token list.",
            "references": [
                "blockTokenLists"
            ]
        }
    ],
    "setTransferMaxLimit(uint256 maxLimit)": [
        {
            "potential_checks": "hasRole(MINTER_ROLE,msg.sender)",
            "involved_variables": [
                "role",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller has the MINTER_ROLE before setting transfer max limit.",
            "references": [
                "transferMaxLimit"
            ]
        }
    ],
    "setPasuedState(bool paused_)": [
        {
            "potential_checks": "hasRole(MINTER_ROLE,msg.sender)",
            "involved_variables": [
                "role",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller has the MINTER_ROLE before setting paused state.",
            "references": [
                "paused"
            ]
        }
    ],
    "ownerOfBatch(uint256[] tokenIds) returns (address[])": []
}