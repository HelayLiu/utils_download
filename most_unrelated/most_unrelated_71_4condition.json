{
    "name() returns (string)": [],
    "symbol() returns (string)": [],
    "decimals() returns (uint8)": [],
    "totalSupply() returns (uint256)": [],
    "balanceOf(address account) returns (uint256)": [],
    "transfer(address to, uint256 amount) returns (bool)": [],
    "allowance(address owner, address spender) returns (uint256)": [],
    "approve(address spender, uint256 amount) returns (bool)": [],
    "transferFrom(address from, address to, uint256 amount) returns (bool)": [
        {
            "potential_checks": "_allowances[from][msg.sender] >= amount",
            "involved_variables": [
                "from",
                "msg.sender",
                "amount",
                "_allowances"
            ],
            "descriptions": "Ensure that the spender has enough allowance to transfer from the source account.",
            "references": [
                "_allowances",
                "_balances"
            ]
        }
    ],
    "increaseAllowance(address spender, uint256 addedValue) returns (bool)": [],
    "decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)": [
    ],
    "sendFrom(address _from, uint16 _dstChainId, bytes32 _toAddress, uint256 _amount, ICommonOFT.LzCallParams _callParams)": [
    ],
    "sendAndCall(address _from, uint16 _dstChainId, bytes32 _toAddress, uint256 _amount, bytes _payload, uint64 _dstGasForCall, ICommonOFT.LzCallParams _callParams)": [],
    "supportsInterface(bytes4 interfaceId) returns (bool)": [],
    "estimateSendFee(uint16 _dstChainId, bytes32 _toAddress, uint256 _amount, bool _useZro, bytes _adapterParams) returns (uint256, uint256)": [],
    "estimateSendAndCallFee(uint16 _dstChainId, bytes32 _toAddress, uint256 _amount, bytes _payload, uint64 _dstGasForCall, bool _useZro, bytes _adapterParams) returns (uint256, uint256)": [],
    "circulatingSupply() returns (uint256)": [],
    "token() returns (address)": [],
    "callOnOFTReceived(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _from, address _to, uint256 _amount, bytes _payload, uint256 _gasForCall)": [
        {
            "potential_checks": "msg.sender == address(this)",
            "involved_variables": [
                "this",
                "msg.sender"
            ],
            "descriptions": "Ensure that the call is made from the contract itself.",
            "references": [
                "_amount"
            ]
        }
    ],
    "nonblockingLzReceive(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload)": [
        {
            "potential_checks": "msg.sender == address(this)",
            "involved_variables": [
                "this",
                "msg.sender"
            ],
            "descriptions": "Ensure that the call is made from the contract itself.",
            "references": [
                "_amount"
            ]
        }
    ],
    "retryMessage(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload)": [
        {
            "potential_checks": "keccak256(_payload) == failedMessages[_srcChainId][_srcAddress][_nonce]",
            "involved_variables": ["_payload"],
            "descriptions": "Ensure payload matches stored message",
            "references": ["failedMessages"]
        }
    ],
    "lzReceive(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload)": [],
    "getConfig(uint16 _version, uint16 _chainId, address , uint256 _configType) returns (bytes)": [],
    "setConfig(uint16 _version, uint16 _chainId, uint256 _configType, bytes _config)": [],
    "setSendVersion(uint16 _version)": [],
    "setReceiveVersion(uint16 _version)": [],
    "forceResumeReceive(uint16 _srcChainId, bytes _srcAddress)": [],
    "setTrustedRemote(uint16 _remoteChainId, bytes _path)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Restricts setting trusted remote addresses to the owner.",
            "references": ["trustedRemoteLookup"]
        }
    ],
    "setTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Restricts setting trusted remote addresses to the owner.",
            "references": ["trustedRemoteLookup"]
        }
    ],
    "getTrustedRemoteAddress(uint16 _remoteChainId) returns (bytes)": [
    ],
    "setPrecrime(address _precrime)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Restricts setting the precrime address to the owner.",
            "references": ["precrime"]
        }
    ],
    "setMinDstGas(uint16 _dstChainId, uint16 _packetType, uint256 _minGas)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Restricts setting minimum destination gas to the owner.",
            "references": ["minDstGasLookup"]
        }
    ],
    "setPayloadSizeLimit(uint16 _dstChainId, uint256 _size)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Restricts setting payload size limits to the owner.",
            "references": ["payloadSizeLimitLookup"]
        }
    ],
    "isTrustedRemote(uint16 _srcChainId, bytes _srcAddress) returns (bool)": [],
    "_owner returns (address)": [],
    "renounceOwnership()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before renouncing ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "transferOwnership(address newOwner)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before transfer ownership.",
            "references": [
                "_owner"
            ]
        }
    ]
}