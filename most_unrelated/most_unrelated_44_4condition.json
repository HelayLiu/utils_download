{
    "owner() returns (address)": [],
    "renounceOwnership()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before renouncing ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "transferOwnership(address newOwner)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before transfer ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "totalSupply() returns (uint256)": [],
    "balanceOf(address account) returns (uint256)": [],
    "lastTimeRewardApplicable() returns (uint256)": [],
    "rewardPerToken() returns (uint256)": [
    ],
    "earned(address account) returns (uint256)": [
    ],
    "pendingRewards(address user) returns (uint256, uint256)": [
    ],
    "getRewardForDuration() returns (uint256)": [],
    "stake(uint256 amount)": [

    ],
    "stakeWithPermit(uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s)": [
    ],
    "withdraw(uint256 amount)": [

    ],
    "getReward()": [
    ],
    "compoundReward()": [
        {
        "specific_checks": "stakingToken == rewardsToken",
        "involved_variables": ["stakingToken", "rewardsToken"],
        "descriptions": "Ensure compounding only for same tokens.",
        "references": ["_balances", "_totalSupply"]
        }
    ],
    "exit()": [
    ],
    "notifyRewardAmount(uint256 reward)": [
        {
            "potential_checks": "msg.sender == _owner || msg.sender == liqPoolManager",
            "involved_variables": ["msg.sender", "_owner", "liqPoolManager"],
            "descriptions": "Restrict reward notifications to owner or liqPoolManager.",
            "references": [
                "rewardRate", "periodFinish","lastUpdateTime"
            ]
        }
    ],
    "recoverERC20(address tokenAddress, uint256 tokenAmount)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before recovering tokens.",
            "references": [
                "stakingToken"
            ]
        },
        {
        "specific_checks": "tokenAddress != address(stakingToken)",
        "involved_variables": ["tokenAddress", "stakingToken"],
        "descriptions": "Prevent staking token recovery.",
        "references": ["stakingToken"]
        }
    ],
    "setRewardsDuration(uint256 _rewardsDuration)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting rewards duration.",
            "references": [
                "rewardsDuration"
            ]
        }
    ],
    "setLiqPoolManager(address _liqPoolManager)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting liqPoolManager.",
            "references": [
                "liqPoolManager"
            ]

        }
    ]
}