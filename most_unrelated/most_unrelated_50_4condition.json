{
    "owner() returns (address)": [],
    "renounceOwnership()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before renouncing ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "transferOwnership(address newOwner)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before transfer ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "modifyBlacklist(address _account, bool _blacklisted)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before modifying blacklist.",
            "references": [
                "blacklist"
            ]
        }
    ],
    "updateKickRewardPerEpoch(uint256 _kickRewardPerEpoch)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before updating kick reward per epoch.",
            "references": [
                "kickRewardPerEpoch"
            ]
        }
    ],
    "addReward(address _rewardsToken, address _distributor)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_rewardsToken",
                "rewardData",
                "rewardTokens",
                "stakingToken"
            ],
            "descriptions": "Ensure that the caller is the current owner before adding a reward.",
            "references": [
                "rewardData",
                "rewardTokens",
                "rewardDistributors"
            ]
        }
    ],
    "approveRewardDistributor(address _rewardsToken, address _distributor, bool _approved)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before approving a reward distributor.",
            "references": [
                "rewardDistributors"
            ]
        }
    ],
    "setKickIncentive(uint256 _rate, uint256 _delay)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting kick incentive.",
            "references": [
                "kickRewardEpochDelay",
                "kickRewardPerEpoch"
            ]
        }
    ],
    "shutdown()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before shutting down.",
            "references": [
                "isShutdown"
            ]
        }
    ],
    "setAutocompoundData(address _matic, address _autocompound)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting autocompound data.",
            "references": [
                "autocompound",
                "matic"
            ]
        }
    ],
    "recoverERC20(address _tokenAddress, uint256 _tokenAmount)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before recovering ERC20 tokens.",
            "references": [
                "_balances"
            ]
        },
        {
            "potential_checks": "_tokenAddress != address(stakingToken)",
            "involved_variables": [
                "_tokenAddress",
                "stakingToken"
            ],
            "descriptions": "Ensure that the token being recovered is not the staking token.",
            "references": [
                "_balances"
            ]
        }
    ],
    "lock(address _account, uint256 _amount)": [],
    "lockFromAutocompound(address _account, uint256 _amount)": [
        {
            "potential_checks": "msg.sender == address(autocompound)",
            "involved_variables": [
                "msg.sender",
                "autocompound"
            ],
            "descriptions": "Restricts token locking to the autocompounder contract.",
            "references": [
                "stakingToken",
                "lockedSupply",
                "userLocks"
            ]
        }
    ],
    "lockAll()": [],
    "lockAllFor(address _account)": [],
    "getReward(address _account)": [],
    "getRewardAndAutoCompound(address _account, bool _autocompound, bytes _data, address _oneInchRouter, address _autocompounder)": [],
    "getReward(address _account, bool _stake, bool _autocompound, bytes _data, address _oneInchRouter, address _autocompounder)": [],
    "getReward(address _account, bool[] _skipIdx)": [],
    "checkpointEpoch()": [],
    "emergencyWithdraw()": [],
    "processExpiredLocks(bool _relock)": [],
    "kickExpiredLocks(address _account)": [],
    "isLocked(address _account) returns (bool)": [],
    "getPastTotalSupply(uint256 timestamp) returns (uint256)": [],
    "balanceOf(address _user) returns (uint256)": [],
    "balanceAtEpochOf(uint256 _epoch, address _user) returns (uint256)": [],
    "lockedBalances(address _user) returns (uint256, uint256, uint256, SphereLocker.LockedBalance[])": [],
    "totalSupply() returns (uint256)": [],
    "totalSupplyAtEpoch(uint256 _epoch) returns (uint256)": [],
    "findEpochId(uint256 _time) returns (uint256)": [],
    "epochCount() returns (uint256)": [],
    "decimals() returns (uint8)": [],
    "name() returns (string)": [],
    "symbol() returns (string)": [],
    "claimableRewards(address _account) returns (SphereLocker.EarnedData[])": [],
    "lastTimeRewardApplicable(address _rewardsToken) returns (uint256)": [],
    "rewardPerToken(address _rewardsToken) returns (uint256)": [],
    "queueNewRewardsSingle(address _rewardsToken, uint256 _rewards)": [
        {
            "potential_checks": "rewardDistributors[_rewardsToken][msg.sender]",
            "involved_variables": [
                "_rewardsToken",
                "rewardDistributors",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is a registered reward distributor for the specified token.",
            "references": [
                "queuedRewards",
                "_rewards"
            ]
        }
    ],
    "queueMultisigNewRewards()": [
        {
            "potential_checks": "rewardDistributors[token][msg.sender]",
            "involved_variables": [
                "token",
                "msg.sender",
                "rewardDistributors"
            ],
            "descriptions": "Ensure that the caller is a registered reward distributor for the specified token.",
            "references": [
                "queuedRewards",
                "_rewards"
            ]
        }
    ],
    "userLocksLen(address _account) returns (uint256)": [],
    "rewardTokensLen() returns (uint256)": [],
    "rewardTokensList() returns (address[])": []
}