{
    "totalSupply() returns (uint256)": [],
    "supportsInterface(bytes4 interfaceId) returns (bool)": [],
    "balanceOf(address owner) returns (uint256)": [],
    "ownerOf(uint256 tokenId) returns (address)": [],
    "name() returns (string)": [],
    "symbol() returns (string)": [],
    "tokenURI(uint256 tokenId) returns (string)": [],
    "approve(address to, uint256 tokenId)": [],
    "getApproved(uint256 tokenId) returns (address)": [],
    "setApprovalForAll(address operator, bool approved)": [],
    "isApprovedForAll(address owner, address operator) returns (bool)": [],
    "transferFrom(address from, address to, uint256 tokenId)": [
        {
            "potential_checks":"msg.sender == from || _operatorApprovals[from][msg.sender] || _tokenApprovals[tokenId] == msg.sender)",
            "involved_variables": [
                "msg.sender",
                "_tokenApprovals",
                "from",
                "to",
                "tokenId"
            ],
            "descriptions": "Ensure that the sender is either the owner, an approved operator, or has been granted approval for the specific token.",
            "references": [
                "_addressData",
                "_ownerships"
            ]
        }
    ],
    "safeTransferFrom(address from, address to, uint256 tokenId)": [
                {
            "potential_checks":"msg.sender == from || _operatorApprovals[from][msg.sender] || _tokenApprovals[tokenId] == msg.sender)",
            "involved_variables": [
                "msg.sender",
                "_tokenApprovals",
                "from",
                "to",
                "tokenId"
            ],
            "descriptions": "Ensure that the sender is either the owner, an approved operator, or has been granted approval for the specific token.",
            "references": [
                "_addressData",
                "_ownerships"
            ]
        }
    ],
    "safeTransferFrom(address from, address to, uint256 tokenId, bytes _data)": [
            {
            "potential_checks":"msg.sender == from || _operatorApprovals[from][msg.sender] || _tokenApprovals[tokenId] == msg.sender)",
            "involved_variables": [
                "msg.sender",
                "_tokenApprovals",
                "from",
                "to",
                "tokenId"
            ],
            "descriptions": "Ensure that the sender is either the owner, an approved operator, or has been granted approval for the specific token.",
            "references": [
                "_addressData",
                "_ownerships"
            ]
        }
    ],
    "safeTransferFrom(address from, address to, uint256 tokenId, bytes data)": [
            {
            "potential_checks":"msg.sender == from || _operatorApprovals[from][msg.sender] || _tokenApprovals[tokenId] == msg.sender)",
            "involved_variables": [
                "msg.sender",
                "_tokenApprovals",
                "from",
                "to",
                "tokenId"
            ],
            "descriptions": "Ensure that the sender is either the owner, an approved operator, or has been granted approval for the specific token.",
            "references": [
                "_addressData",
                "_ownerships"
            ]
        }
    ],
    "verify(ISignatureMintERC721.MintRequest _req, bytes _signature) returns (bool, address)": [
    ],
    "verify(ISignatureMintERC721.MintRequest req, bytes signature) returns (bool, address)": [],
    "mintWithSignature(ISignatureMintERC721.MintRequest req, bytes signature) returns (address)": [
        {
            "potential_checks": " !minted[req.uid] && _isAuthorizedSigner(signer)",
            "involved_variables": [
                "req",
                "signature"
            ],
            "descriptions": "Only allow minting if the request has not been minted and the signer is authorized.",
            "references": [
                "_addressData",
                "_ownerships"
            ]
        }
    ],
    "eip712Domain() returns (bytes1, string, string, uint256, address, bytes32, uint256[])": [],
    "setTokenURI(uint256 _tokenId, string _uri)": [
          {
            "potential_checks": "hasRole(METADATA_ROLE, msg.sender)",
            "involved_variables": ["msg.sender", "_hasRole"],
            "descriptions": "Verify msg.sender has METADATA_ROLE to update _tokenURI.",
            "references": ["_tokenURI"]
        },
        {
            "potential_checks": "!uriFrozen",
            "involved_variables": [ "uriFrozen"],
            "descriptions": "Verify metadata isn't frozen to update _tokenURI.",
            "references": ["_tokenURI"]
        }
    ],
    "freezeMetadata()": [
        {
            "potential_checks": "hasRole(METADATA_ROLE, msg.sender)",
            "involved_variables": ["msg.sender", "_hasRole"],
            "descriptions": "Verify msg.sender has METADATA_ROLE to freeze metadata updates.",
            "references": ["uriFrozen"]
        }
    ],
    "isTrustedForwarder(address forwarder) returns (bool)": [],
    "getRoleMember(bytes32 role, uint256 index) returns (address)": [],
    "getRoleMemberCount(bytes32 role) returns (uint256)": [],
    "hasRole(bytes32 role, address account) returns (bool)": [],
    "hasRoleWithSwitch(bytes32 role, address account) returns (bool)": [],
    "getRoleAdmin(bytes32 role) returns (bytes32)": [],
    "grantRole(bytes32 role, address account)": [
          {
            "potential_checks": "hasRole(_getRoleAdmin[role], msg.sender)",
            "involved_variables": ["msg.sender", "_hasRole", "role"],
            "descriptions": "Verify msg.sender is admin of the role to grant access.",
            "references": ["_hasRole"]
        }
    ],
    "revokeRole(bytes32 role, address account)": [
        {
            "potential_checks": "hasRole(_getRoleAdmin[role], msg.sender)",
            "involved_variables": ["msg.sender", "_hasRole", "role"],
            "descriptions": "Verify msg.sender is admin of the role to revoke access.",
            "references": ["_hasRole"]
        }
    ],
    "renounceRole(bytes32 role, address account)": [
        {
            "potential_checks": "hasRole(_getRoleAdmin[role], msg.sender)",
            "involved_variables": ["msg.sender", "_hasRole", "role"],
            "descriptions": "Verify msg.sender is admin of the role to renounce access.",
            "references": ["_hasRole"]
        }        
    ],
    "multicall(bytes[] data) returns (bytes[])": [],
    "getPlatformFeeInfo() returns (address, uint16)": [],
    "getFlatPlatformFeeInfo() returns (address, uint256)": [],
    "getPlatformFeeType() returns (IPlatformFee.PlatformFeeType)": [],
    "setPlatformFeeInfo(address _platformFeeRecipient, uint256 _platformFeeBps)": [
          {
            "potential_checks": "hasRole(METADATA_ROLE, msg.sender)",
            "involved_variables": ["msg.sender", "_hasRole"],
            "descriptions": "Verify msg.sender has METADATA_ROLE to update PlatformFeeInfo.",
            "references": ["platformFeeBps","platformFeeRecipient"]
        }
    ],
    "setFlatPlatformFeeInfo(address _platformFeeRecipient, uint256 _flatFee)": [
                  {
            "potential_checks": "hasRole(METADATA_ROLE, msg.sender)",
            "involved_variables": ["msg.sender", "_hasRole"],
            "descriptions": "Verify msg.sender has METADATA_ROLE to update FlatPlatformFeeInfo.",
            "references": ["flatPlatformFee","platformFeeRecipient"]
        }
    ],
    "setPlatformFeeType(IPlatformFee.PlatformFeeType _feeType)": [
                      {
            "potential_checks": "hasRole(METADATA_ROLE, msg.sender)",
            "involved_variables": ["msg.sender", "_hasRole"],
            "descriptions": "Verify msg.sender has METADATA_ROLE to update platformFeeType.",
            "references": ["platformFeeType"]
        }
    ],
    "primarySaleRecipient() returns (address)": [],
    "setPrimarySaleRecipient(address _saleRecipient)": [
                      {
            "potential_checks": "hasRole(METADATA_ROLE, msg.sender)",
            "involved_variables": ["msg.sender", "_hasRole"],
            "descriptions": "Verify msg.sender has METADATA_ROLE to update PrimarySaleRecipient.",
            "references": ["recipient"]
        }
    ],
    "royaltyInfo(uint256 tokenId, uint256 salePrice) returns (address, uint256)": [],
    "getRoyaltyInfoForToken(uint256 _tokenId) returns (address, uint16)": [],
    "getDefaultRoyaltyInfo() returns (address, uint16)": [],
    "setDefaultRoyaltyInfo(address _royaltyRecipient, uint256 _royaltyBps)": [
        {
            "potential_checks": "hasRole(METADATA_ROLE, msg.sender)",
            "involved_variables": ["msg.sender", "_hasRole"],
            "descriptions": "Verify msg.sender has METADATA_ROLE to update DefaultRoyaltyInfo.",
            "references": ["royaltyRecipient", "royaltyBps"]
        }
    ],
    "setRoyaltyInfoForToken(uint256 _tokenId, address _recipient, uint256 _bps)": [
        {
            "potential_checks": "hasRole(METADATA_ROLE, msg.sender)",
            "involved_variables": ["msg.sender", "_hasRole"],
            "descriptions": "Verify msg.sender has METADATA_ROLE to update RoyaltyInfoForToken.",
            "references": ["royaltyInfoForToken"]
        }
    ],
    "setRoyaltyInfoForToken(uint256 tokenId, address recipient, uint256 bps)": [
                {
            "potential_checks": "hasRole(METADATA_ROLE, msg.sender)",
            "involved_variables": ["msg.sender", "_hasRole"],
            "descriptions": "Verify msg.sender has METADATA_ROLE to update RoyaltyInfoForToken.",
            "references": ["royaltyInfoForToken"]
        }
    ],
    "getRoyaltyInfoForToken(uint256 tokenId) returns (address, uint16)": [],
    "owner() returns (address)": [],
    "setOwner(address _newOwner)": [
        {
            "potential_checks": "hasRole(DEFAULT_ADMIN_ROLE, msg.sender)",
            "involved_variables": ["msg.sender", "_hasRole"],
            "descriptions": "Verify msg.sender has DEFAULT_ADMIN_ROLE to update owner.",
            "references": ["_owner"]
        } 
    ],
    "setContractURI(string _uri)": [
        {
            "potential_checks": "hasRole(DEFAULT_ADMIN_ROLE, msg.sender)",
            "involved_variables": ["msg.sender", "_hasRole"],
            "descriptions": "Verify msg.sender has DEFAULT_ADMIN_ROLE to update contract url.",
            "references": ["contractURI"]
        } 
    ],
    "contractURI() returns (string)": [],
    "mintTo(address to, string uri) returns (uint256)": [
        {
            "potential_checks": "hasRole(MINTER_ROLE, msg.sender)",
            "involved_variables": ["msg.sender", "_hasRole"],
            "descriptions": "Verify msg.sender has MINTER_ROLE to mint token.",
            "references": ["_ownerships", "_addressData"]
        }         
    ],
    "cancel(uint256 tokenId)": [
        {
            "potential_checks":"msg.sender == from || _operatorApprovals[from][msg.sender] || _tokenApprovals[tokenId] == msg.sender)",
            "involved_variables": [
                "msg.sender",
                "_tokenApprovals",
                "from",
                "to",
                "tokenId"
            ],
            "descriptions": "Ensure that the sender is either the owner, an approved operator, or has been granted approval for the specific token.",
            "references": [
                "_addressData",
                "_ownerships"
            ]
        }
    ],
    "revoke(uint256 tokenId)": [
        {
            "potential_checks": "hasRole(REVOKE_ROLE, msg.sender)",
            "involved_variables": ["msg.sender", "_hasRole"],
            "descriptions": "Verify msg.sender has REVOKE_ROLE to revoke token.",
            "references": ["_ownerships", "_addressData"]
        }   
    ],
    "initialize(address _defaultAdmin, string _name, string _symbol, string _contractURI, address[] _trustedForwarders, address _saleRecipient, address _royaltyRecipient, uint128 _royaltyBps, uint128 _platformFeeBps, address _platformFeeRecipient)": [
    ],
    "tokenURI(uint256 _tokenId) returns (string)": [],
    "mintWithSignature(ISignatureMintERC721.MintRequest _req, bytes _signature) returns (address)": [
         {
            "potential_checks": " !minted[req.uid] && _isAuthorizedSigner(signer)",
            "involved_variables": [
                "req",
                "signature"
            ],
            "descriptions": "Only allow minting if the request has not been minted and the signer is authorized.",
            "references": [
                "_addressData",
                "_ownerships"
            ]
        }
    ],
    "mintTo(address _to, string _uri) returns (uint256)": [
        {
            "potential_checks": "hasRole(MINTER_ROLE, msg.sender)",
            "involved_variables": ["msg.sender", "_hasRole"],
            "descriptions": "Verify msg.sender has MINTER_ROLE to mint token.",
            "references": ["_ownerships", "_addressData"]
        }    

    ],
    "totalMinted() returns (uint256)": [],
    "nextTokenIdToMint() returns (uint256)": []
}