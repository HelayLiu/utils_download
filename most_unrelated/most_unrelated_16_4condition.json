{
    "paused() returns (bool)": [],
    "submitMerkleRoot(bytes32 root, uint256 totalRewards, uint256 boostRewards) returns (bool)": [
        {
        "potential_checks": "hasRole(DISTRIBUTOR_ROLE, msg.sender)",
        "involved_variables": ["msg.sender","_role"],
        "descriptions": "Restrict root submission to DISTRIBUTOR_ROLE.",
        "references": ["token"]
        },
        {
        "potential_checks": "!paused()",
        "involved_variables": ["_paused"],
        "descriptions": "Ensure contract is not paused.",
        "references": ["token"]
        },
        {
        "potential_checks": "firstRewardCycleTs == 0 || cycle < getCurrCycle()",
        "involved_variables": ["firstRewardCycleTs", "cycle"],
        "descriptions": "Enforce 24h rate limit between root submissions.",
        "references": ["token"]
        },
        {
        "potential_checks": "delta >= baseRewards",
        "involved_variables": ["delta", "baseRewards"],
        "descriptions": "Verify vault emission covers base rewards.",
        "references": ["token"]
        }
    ],
    "claim(uint256 _amount, uint256 _totalRewards, uint256 _cycle, bytes32[] proof)": [
        {
        "potential_checks": "!paused()",
        "involved_variables": ["_paused"],
        "descriptions": "Ensure contract is not paused.",
        "references": []
        },
        {
        "potential_checks": "amount <= _allocatedRewardsForProofMinusRewarded(_msgSender(), _totalRewards, _cycle, proof)",
        "involved_variables": ["amount", "_totalRewards", "proof", "msg.sender", "_cycle"],
        "descriptions": "Ensure claimed amount ≤ available rewards.",
        "references": ["claims","token","claimedRewards"]
        }
    ],
    "getRemainingAllocatedRewards(address account, uint256 amount, uint256 cycle, bytes32[] proof) returns (uint256)": [
        {
        "potential_checks": "!paused()",
        "involved_variables": ["_paused"],
        "descriptions": "Ensure contract is not paused.",
        "references": []
        },
        {
        "potential_checks": "MerkleProof.verify(proof, roots[_cycle], keccak256(bytes.concat(keccak256(abi.encode(account, amount)))))",
        "involved_variables": ["proof", "roots", "_cycle", "account", "amount"],
        "descriptions": "Verify Merkle proof validity.",
        "references": ["amount"]
        }
    ],
    "cycle() returns (uint256)": [],
    "pause()": [
        {
        "potential_checks": "hasRole(DEFAULT_ADMIN_ROLE, msg.sender)",
        "involved_variables": ["msg.sender", "_role"],
        "descriptions": "Restrict pause to DEFAULT_ADMIN_ROLE.",
        "references": ["_paused"]
        }
    ],
    "unpause()": [
        {
        "potential_checks": "hasRole(DEFAULT_ADMIN_ROLE, msg.sender)",
        "involved_variables": ["msg.sender", "_role"],
        "descriptions": "Restrict pause to DEFAULT_ADMIN_ROLE.",
        "references": ["_paused"]
        }
    ],
    "supportsInterface(bytes4 interfaceId) returns (bool)": [],
    "getRoleMember(bytes32 role, uint256 index) returns (address)": [],
    "getRoleMemberCount(bytes32 role) returns (uint256)": [],
    "hasRole(bytes32 role, address account) returns (bool)": [],
    "getRoleAdmin(bytes32 role) returns (bytes32)": [],
    "grantRole(bytes32 role, address account)": [],
    "revokeRole(bytes32 role, address account)": [],
    "renounceRole(bytes32 role, address account)": [],
    "proxiableUUID() returns (bytes32)": [],
    "upgradeTo(address newImplementation)": [
        {
            "potential_checks": "hasRole(UPGRADER_ROLE,msg.sender)",
            "involved_variables": [
                "_role",
                "msg.sender"
            ],
            "descriptions": "Ensure only UPGRADER_ROLE can upgrade.",
            "references": [
            ]
        }
    ],
    "upgradeToAndCall(address newImplementation, bytes data)": [        {
            "potential_checks": "hasRole(UPGRADER_ROLE,msg.sender)",
            "involved_variables": [
                "_role",
                "msg.sender"
            ],
            "descriptions": "Ensure only UPGRADER_ROLE can upgrade.",
            "references": [
            ]
        }],
    "initialize(address _token, address _rewardsVault, address _rewardsChangeTreasury)": [
        {
            "potential_checks": "_initializing == False",
            "involved_variables": [
                "_initializing"
            ],
            "descriptions": "Only initialize once.",
            "references": [
                "_initializing"
            ]
        }
    ],
    "getCurrCycle() returns (uint256)": [],
    "submitMerkleRoot(bytes32 root, uint256 baseRewards, uint256 boostRewards) returns (bool)": [        {
        "potential_checks": "hasRole(DISTRIBUTOR_ROLE, msg.sender)",
        "involved_variables": ["msg.sender","_role"],
        "descriptions": "Restrict root submission to DISTRIBUTOR_ROLE.",
        "references": ["token"]
        },
        {
        "potential_checks": "!paused()",
        "involved_variables": ["_paused"],
        "descriptions": "Ensure contract is not paused.",
        "references": ["token"]
        },
        {
        "potential_checks": "firstRewardCycleTs == 0 || cycle < getCurrCycle()",
        "involved_variables": ["firstRewardCycleTs", "cycle"],
        "descriptions": "Enforce 24h rate limit between root submissions.",
        "references": ["token"]
        },
        {
        "potential_checks": "delta >= baseRewards",
        "involved_variables": ["delta", "baseRewards"],
        "descriptions": "Verify vault emission covers base rewards.",
        "references": ["token"]
        }],
    "getRemainingAllocatedRewards(address account, uint256 amount, uint256 _cycle, bytes32[] proof) returns (uint256)": [
        {
        "potential_checks": "!paused()",
        "involved_variables": ["_paused"],
        "descriptions": "Ensure contract is not paused.",
        "references": []
        },
        {
        "potential_checks": "MerkleProof.verify(proof, roots[_cycle], keccak256(bytes.concat(keccak256(abi.encode(account, amount)))))",
        "involved_variables": ["proof", "roots", "_cycle", "account", "amount"],
        "descriptions": "Verify Merkle proof validity.",
        "references": ["amount"]
        }
    ],
    "claim(uint256 amount, uint256 _totalRewards, uint256 _cycle, bytes32[] proof)": [        {
        "potential_checks": "!paused()",
        "involved_variables": ["_paused"],
        "descriptions": "Ensure contract is not paused.",
        "references": []
        },
        {
        "potential_checks": "amount <= _allocatedRewardsForProofMinusRewarded(_msgSender(), _totalRewards, _cycle, proof)",
        "involved_variables": ["amount", "_totalRewards", "proof", "msg.sender", "_cycle"],
        "descriptions": "Ensure claimed amount ≤ available rewards.",
        "references": ["claims","token","claimedRewards"]
        }],
    "claimFor(address rewardReceiver, uint256 amount, uint256 totalRewards, uint256 _cycle, uint256 claimForFee, bytes32[] proof, bytes32 nonce, bytes signature)": [{
        "potential_checks": "!paused()",
        "involved_variables": ["_paused"],
        "descriptions": "Ensure contract is not paused.",
        "references": []
        },
        {
        "potential_checks": "amount <= _allocatedRewardsForProofMinusRewarded(_msgSender(), _totalRewards, _cycle, proof)",
        "involved_variables": ["amount", "_totalRewards", "proof", "msg.sender", "_cycle"],
        "descriptions": "Ensure claimed amount ≤ available rewards.",
        "references": ["claims","token","claimedRewards"]
        },
            {
      "potential_checks": "!nonces[hashedNonce]",
      "involved_variables": ["nonces", "hashedNonce"],
      "descriptions": "The signature nonce must not have been used before.",
      "references": ["token"]
    },
    {
      "potential_checks": "signer == rewardReceiver",
      "involved_variables": ["signer", "rewardReceiver"],
      "descriptions": "The signature must be signed by the rewardReceiver.",
      "references": ["token"]
    }
    ]
}