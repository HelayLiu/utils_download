{
    "getCurrentVotes(address account) returns (uint96)": [
    ],
    "getPriorVotes(address account, uint256 blockNumber) returns (uint96)": [
    ],
    "checkpoints(address account, uint32 pos) returns (ERC20Votes.Checkpoint)": [],
    "numCheckpoints(address account) returns (uint32)": [],
    "delegates(address account) returns (address)": [],
    "getVotes(address account) returns (uint256)": [],
    "getPastVotes(address account, uint256 blockNumber) returns (uint256)": [],
    "getPastTotalSupply(uint256 blockNumber) returns (uint256)": [],
    "delegate(address delegatee)": [],
    "delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s)": [
        {
            "potential_checks": "block.timestamp <= expiry",
            "involved_variables": ["block.timestamp", "expiry"],
            "descriptions": "Ensure the delegation is not expired.",
            "references": [
                "block.timestamp"
            ]
        },
        {
            "potential_checks": "nonce == _useNonce(signer)",
            "involved_variables": ["signer", "nonce", "v", "r", "s"],
            "descriptions": "Ensure the nonce is valid and has not been used.",
            "references": [
                "_delegates"
            ]
        }
    ],
    "permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)": [
        {
            "potential_checks": "block.timestamp <= deadline",
            "involved_variables": ["block.timestamp", "deadline"],
            "descriptions": "Ensure the permit is not expired.",
            "references": [
                "block.timestamp"
            ]
        },
        {
            "potential_checks": "signer == owner",
            "involved_variables": ["signer", "owner", "v", "r", "s"],
            "descriptions": "Ensure the signature is valid and matches the owner.",
            "references": [
                "_allowances"
            ]
        }
    ],
    "nonces(address owner) returns (uint256)": [],
    "DOMAIN_SEPARATOR() returns (bytes32)": [],
    "name() returns (string)": [],
    "symbol() returns (string)": [],
    "decimals() returns (uint8)": [],
    "totalSupply() returns (uint256)": [],
    "balanceOf(address account) returns (uint256)": [],
    "transfer(address to, uint256 amount) returns (bool)": [],
    "allowance(address owner, address spender) returns (uint256)": [],
    "approve(address spender, uint256 amount) returns (bool)": [],
    "transferFrom(address from, address to, uint256 amount) returns (bool)": [
        {
            "potential_checks": "_allowances[from][msg.sender] >= amount",
            "involved_variables": ["_allowances", "from", "msg.sender", "amount"],
            "descriptions": "Ensure spender has sufficient allowance.",
            "references": [
                "_allowances",
                "_balances"
            ]
        }
    ],
    "increaseAllowance(address spender, uint256 addedValue) returns (bool)": [],
    "decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)": [
    ],
    "burn(uint256 amount)": [
    ],
    "burnFrom(address account, uint256 amount)": [
        {
            "potential_checks": "_allowances[from][msg.sender] >= amount",
            "involved_variables": ["_allowances", "from", "msg.sender", "amount"],
            "descriptions": "Ensure spender has sufficient allowance.",
            "references": [
                "_allowances",
                "_balances"
            ]
        }
    ]
}