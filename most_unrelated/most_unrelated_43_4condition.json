{
    "transferOwnership(address newOwner)": [
        {
            "potential_checks": "msg.sender == owner",
            "involved_variables": [
                "msg.sender",
                "owner"
            ],
            "descriptions": "Ensure that the caller is the current owner before transferring ownership.",
            "references": [
                "owner"
            ]
        }
    ],
    "reactorCallback(ResolvedOrder[] resolvedOrders, bytes callbackData)": [],
    "execute(SignedOrder order, bytes callbackData)": [
        {
            "potential_checks": "whitelistedCallers[msg.sender] == true",
            "involved_variables": [
                "whitelistedCallers",
                "msg.sender"
            ],
            "descriptions": "Restricts single order execution to whitelisted callers.",
            "references": [
                "reactor"
            ]
        }
    ],
    "executeBatch(SignedOrder[] orders, bytes callbackData)": [
        {
            "potential_checks": "whitelistedCallers[msg.sender] == true",
            "involved_variables": [
                "whitelistedCallers",
                "msg.sender"
            ],
            "descriptions": "Restricts batch order execution to whitelisted callers.",
            "references": [
                "reactor"
            ]
        }
    ],
    "reactorCallback(ResolvedOrder[] , bytes callbackData)": [
        {
        "potential_checks": "msg.sender == address(reactor)",
        "involved_variables": ["msg.sender", "reactor"],
        "descriptions": "Ensures only the reactor contract triggers the callback.",
        "references": [
            "reactor"
        ]
        }
    ],
    "withdrawETH(address recipient)": [
        {
            "potential_checks": "msg.sender == owner",
            "involved_variables": [
                "msg.sender",
                "owner"
            ],
            "descriptions": "Ensure that the caller is the current owner before withdrawing ETH.",
            "references": [
                "balance"
            ]
        }
    ],
    "withdrawERC20(ERC20 token, address to)": [
        {
            "potential_checks": "msg.sender == owner",
            "involved_variables": [
                "msg.sender",
                "owner"
            ],
            "descriptions": "Ensure that the caller is the current owner before withdrawing ERC20 tokens.",
            "references": [
                "balance"
            ]
        }
    ]
}