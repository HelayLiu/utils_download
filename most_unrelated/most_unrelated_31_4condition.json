{
    "royaltyInfo(uint256 _tokenId, uint256 _salePrice) returns (address, uint256)": [],
    "supportsInterface(bytes4 interfaceId) returns (bool)": [],
    "royaltyInfo(uint256 tokenId, uint256 salePrice) returns (address, uint256)": [],
    "owner() returns (address)": [],
    "renounceOwnership()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before renouncing ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "transferOwnership(address newOwner)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before transfer ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "tokenOfOwnerByIndex(address owner, uint256 index) returns (uint256)": [],
    "totalSupply() returns (uint256)": [],
    "tokenByIndex(uint256 index) returns (uint256)": [],
    "balanceOf(address owner) returns (uint256)": [],
    "ownerOf(uint256 tokenId) returns (address)": [],
    "safeTransferFrom(address from, address to, uint256 tokenId)": [
        {
            "potential_checks": "msg.sender == from || _tokenApprovals[tokenId] == msg.sender || _operatorApprovals[from][msg.sender]",
            "involved_variables": [
                "from",
                "tokenId",
                "msg.sender",
                "_tokenApprovals",
                "_operatorApprovals"
                
            ],
            "descriptions": "Ensure that the caller is either the owner of the token, approved for the token, or an operator approved by the owner.",
            "references": [
                "_balances",
                "_owners"
            ]
        }
    ],
    "transferFrom(address from, address to, uint256 tokenId)": [
        {
            "potential_checks": "msg.sender == from || _tokenApprovals[tokenId] == msg.sender || _operatorApprovals[from][msg.sender]",
            "involved_variables": [
                "from",
                "tokenId",
                "msg.sender",
                "_tokenApprovals",
                "_operatorApprovals"
                
            ],
            "descriptions": "Ensure that the caller is either the owner of the token, approved for the token, or an operator approved by the owner.",
            "references": [
                "_balances",
                "_owners"
            ]
        }
    ],
    "approve(address to, uint256 tokenId)": [
        {
            "potential_checks": "msg.sender == owner || _operatorApprovals[owner][msg.sender]",
            "involved_variables": [
                "msg.sender",
                "owner",
                "_operatorApprovals"
            ],
            "descriptions": "Ensure that the caller is either the owner of the token or an operator approved by the owner before approving a token.",
            "references": [
                "_tokenApprovals"
            ]
        }
    ],
    "getApproved(uint256 tokenId) returns (address)": [
    ],
    "setApprovalForAll(address operator, bool _approved)": [],
    "isApprovedForAll(address owner, address operator) returns (bool)": [],
    "safeTransferFrom(address from, address to, uint256 tokenId, bytes data)": [],
    "name() returns (string)": [],
    "symbol() returns (string)": [],
    "tokenURI(uint256 tokenId) returns (string)": [
    ],
    "setApprovalForAll(address operator, bool approved)": [
    ],
    "safeTransferFrom(address from, address to, uint256 tokenId, bytes _data)": [
        {
            "potential_checks": "msg.sender == from || _tokenApprovals[tokenId] == msg.sender || _operatorApprovals[from][msg.sender]",
            "involved_variables": [
                "from",
                "tokenId",
                "msg.sender",
                "_tokenApprovals",
                "_operatorApprovals"
            ],
            "descriptions": "Ensure that the caller is either the owner of the token, approved for the token, or an operator approved by the owner.",
            "references": [
                "_balances",
                "_owners"
            ]
        }
    ],
    "addCurrency(address[] acceptedCurrenciesInput, uint256[] prices)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before adding currencies.",
            "references": [
                "acceptedCurrencies"
            ]
        }
    ],
    "mint(address token, uint256 amount)": [
        {
            "potential_checks": "whitelistedAddresses[msg.sender] == 1",
            "involved_variables": [
                "msg.sender",
                "whitelistedAddresses"
            ],
            "descriptions": "Enforces whitelist isolation for free mints",
            "references": [
                "_balances",
                "_owners"
            ]
        }
    ],
    "walletOfOwner(address _owner) returns (uint256[])": [
    ],
    "setWhitelist(address[] _whitelistArray)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting the whitelist.",
            "references": [
                "whitelistedAddresses"
            ]
        }
    ],
    "setBaseURI(string _newBaseURI)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting the baseURI.",
            "references": [
                "baseURI"
            ]
        }
    ],
    "setBaseExtension(string _newBaseExtension)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting the baseExtension.",
            "references": [
                "baseExtension"
            ]
        }
    ],
    "pausePublic(bool _state)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting the publicPaused.",
            "references": [
                "publicPaused"
            ]
        }
    ],
    "withdraw(address token)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before withdrawing tokens.",
            "references": [
                "_balances"
            ]
        }
    ]
}