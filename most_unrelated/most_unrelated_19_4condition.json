{
    "owner() returns (address)": [],
    "renounceOwnership()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before renouncing ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "transferOwnership(address newOwner)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before transfer ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "supportsInterface(bytes4 interfaceId) returns (bool)": [],
    "tokenOfOwnerByIndex(address owner, uint256 index) returns (uint256)": [],
    "totalSupply() returns (uint256)": [],
    "tokenByIndex(uint256 index) returns (uint256)": [],
    "balanceOf(address owner) returns (uint256)": [],
    "ownerOf(uint256 tokenId) returns (address)": [],
    "safeTransferFrom(address from, address to, uint256 tokenId)": [
        {  
        "specific_checks": "require(_isApprovedOrOwner(_msgSender(), tokenId))",  
        "involved_variables": ["msg.sender", "tokenId"],  
        "descriptions": "Verifies caller is owner/approved before transferring token.",  
        "references": ["_owners", "_balances"]  
        }  
    ],
    "transferFrom(address from, address to, uint256 tokenId)": [
        {  
        "specific_checks": "require(_isApprovedOrOwner(_msgSender(), tokenId))",  
        "involved_variables": ["msg.sender", "tokenId"],  
        "descriptions": "Verifies caller is owner/approved before transferring token.",  
        "references": ["_owners", "_balances"]  
        }  
    ],
    "approve(address to, uint256 tokenId)": [
        {
            "potential_checks": "msg.sender == owner || isApprovedForAll(owner,msg.sender)",
            "involved_variables": [
                "msg.sender",
                "owner"
            ],
            "descriptions": "Only the owner or an approved operator can approve a token.",
            "references": ["_tokenApprovals"]
        }
    ],
    "getApproved(uint256 tokenId) returns (address)": [
    ],
    "setApprovalForAll(address operator, bool _approved)": [],
    "isApprovedForAll(address owner, address operator) returns (bool)": [],
    "safeTransferFrom(address from, address to, uint256 tokenId, bytes data)": [],
    "name() returns (string)": [],
    "symbol() returns (string)": [],
    "tokenURI(uint256 tokenId) returns (string)": [],
    "setApprovalForAll(address operator, bool approved)": [
    ],
    "safeTransferFrom(address from, address to, uint256 tokenId, bytes _data)": [
        {  
        "specific_checks": "require(_isApprovedOrOwner(_msgSender(), tokenId))",  
        "involved_variables": ["msg.sender", "tokenId"],  
        "descriptions": "Verifies caller is owner/approved before transferring token.",  
        "references": ["_owners", "_balances"]  
        }  
    ],
    "mint()": [
        {
            "potential_checks": "mintOpen > 0",
            "involved_variables": [
                "mintOpen"
            ],
            "descriptions": "Only open for minting if mintOpen is greater than 0.",
            "references": [
                "_balances",
                "_owners"
            ]
        },
        {
            "potential_checks": "msg.value >= MINT_PRICE",
            "involved_variables": [
                "msg.value",
                "MINT_PRICE"
            ],
            "descriptions": "Only allow minting if the sent value is greater than or equal to MINT_PRICE.",
            "references": [
                "_balances",
                "_owners"
            ]
        }
    ],
    "claim()": [
        {
            "potential_checks": "claimOpen > 0",
            "involved_variables": [
                "claimOpen"
            ],
            "descriptions": "Only claim if claimOpen is greater than 0.",
            "references": [
                "_balances",
                "_owners"
            ]
        },
        {  
        "specific_checks": "!hasClaimedRebase[_hash]",  
        "involved_variables": ["hasClaimedRebase"],  
        "descriptions": "Prevents double-claiming for the same legacy NFT.",  
        "references": ["hasClaimedRebase"]  
        }
    ],
    "eligibleForClaim(address user) returns (uint256)": [
    ],
    "setBaseURI(string newBaseURI)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": ["_owner", "msg.sender"],
            "descriptions": "Only owner can set the base URI.",
            "references": ["baseURI"]
        }
    ],
    "airdrop(address[] addrs)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "owner",
                "msg.sender"
            ],
            "descriptions": "Only owner can airdrop tokens.",
            "references": [
                "_owners",
                "_balances"
            ]
        }
    ],
    "withdrawAll()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [     
                "owner",
                "msg.sender"],
            "descriptions": "Only owner can withdraw all funds.",
            "references": [
                "address(this).balance"
            ]
        }
    ],
    "setClaim(uint256 value)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Only owner can set the claim value.",
            "references": [
                "claimOpen"
            ]
        }
    ],
    "setMint(uint256 value)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Only owner can set the mint value.",
            "references": [
                "mintOpen"
            ]
        }
    ]
}