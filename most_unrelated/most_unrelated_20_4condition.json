{
    "paused() returns (bool)": [],
    "owner() returns (address)": [],
    "renounceOwnership()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before renouncing ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "transferOwnership(address newOwner)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before transfer ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "supportsInterface(bytes4 interfaceId) returns (bool)": [],
    "balanceOf(address owner) returns (uint256)": [],
    "ownerOf(uint256 tokenId) returns (address)": [],
    "name() returns (string)": [],
    "symbol() returns (string)": [],
    "tokenURI(uint256 tokenId) returns (string)": [],
    "approve(address to, uint256 tokenId)": [],
    "getApproved(uint256 tokenId) returns (address)": [],
    "setApprovalForAll(address operator, bool approved)": [],
    "isApprovedForAll(address owner, address operator) returns (bool)": [],
    "transferFrom(address from, address to, uint256 tokenId)": [
        {
            "potential_checks":"_isApprovedOrOwner(msg.sender, tokenId)",
            "involved_variables": [
                "msg.sender",
                "tokenId"
            ],
            "descriptions": "Ensure that the caller is either the owner or approved for the token before transferring.",
            "references":[
                "_balances",
                "_owners"
            ]
        }
    ],
    "safeTransferFrom(address from, address to, uint256 tokenId)": [
                {
            "potential_checks":"_isApprovedOrOwner(msg.sender, tokenId)",
            "involved_variables": [
                "msg.sender",
                "tokenId"
            ],
            "descriptions": "Ensure that the caller is either the owner or approved for the token before transferring.",
            "references":[
                "_balances",
                "_owners"
            ]
        }
    ],
    "safeTransferFrom(address from, address to, uint256 tokenId, bytes data)": [
                {
            "potential_checks":"_isApprovedOrOwner(msg.sender, tokenId)",
            "involved_variables": [
                "msg.sender",
                "tokenId"
            ],
            "descriptions": "Ensure that the caller is either the owner or approved for the token before transferring.",
            "references":[
                "_balances",
                "_owners"
            ]
        }
    ],
    "addOperator(address _op)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Restrict operator addition to contract owner.",
            "references": ["isOperator", "operators"] 
        }
    ],
    "getAllOperators() returns (address[])": [],
    "pause()": [
        {  
        "potential_checks": "_owner == msg.sender",  
        "involved_variables": ["msg.sender", "_owner"],  
        "descriptions": "Ensure only owner can pause minting operations.",  
        "references": ["_paused"]  
        }  
    ],
    "unpause()": [
    {  
        "potential_checks": "_owner == msg.sender",  
        "involved_variables": ["msg.sender", "_owner"],  
        "descriptions": "Ensure only owner can unpause minting operations.",  
        "references": ["_paused"]  
        }  
    ],
    "setUri(string _uri)": [
        {  
        "potential_checks": "_owner == msg.sender",  
        "involved_variables": ["msg.sender", "_owner"],  
        "descriptions": "Ensure only owner can set uri.",  
        "references": ["uri"]  
        }  
    ],
    "setSuffix(string _suffix)": [
        {  
        "potential_checks": "_owner == msg.sender",  
        "involved_variables": ["msg.sender", "_owner"],  
        "descriptions": "Ensure only owner can set uri.",  
        "references": ["suffix"]  
        }  
    ],
    "removeOperator(address _op)": [
    {  
        "potential_checks": "_owner == msg.sender",  
        "involved_variables": ["msg.sender", "_owner"],  
        "descriptions": "Ensure only owner can remove operator.",  
        "references": ["operator", "isOperator"]  
        }  
    ],
    "mint(address to)": [
        {  
        "potential_checks": "_owner == msg.sender",  
        "involved_variables": ["msg.sender", "_owner"],  
        "descriptions": "Ensure only owner can mint token.",  
        "references": ["curTokenId", "_owners", "_balances"]  
        }  
    ],
    "getMessageHash(address _to, uint256 _timestamp, bytes32 _uuid) returns (bytes32)": [],
    "verify(bytes32 _signingHash, uint256 _timestamp, bytes _signature)": [
        {
            "potential_checks": "_timestamp > block.timestamp",
            "involved_variables": [
                "_timestamp",
                "block.timestamp"
            ],
            "descriptions": "verfies that the timestamp is not in the future",
            "references": [
            ]
        },
        {
            "potential_checks": "isOperator[signer] || signer == _owner",
            "involved_variables": [
                "isOperator",
                "_signature"
            ],
            "descriptions": "verifys that the signer is either an operator or the owner",
            "references": [
            ]
        }
    ],
    "mintWithSignature(bytes32 _uuid, uint256 _timestamp, bytes _signature)": [
               {
            "potential_checks": "_timestamp > block.timestamp",
            "involved_variables": [
                "_timestamp",
                "block.timestamp"
            ],
            "descriptions": "verfies that the timestamp is not in the future",
            "references": [
                "_balances",
                "_owners"
            ]
        },
        {
            "potential_checks": "isOperator[signer] || signer == _owner",
            "involved_variables": [
                "isOperator",
                "_signature"
            ],
            "descriptions": "verifys that the signer is either an operator or the owner",
            "references": [
                "_balances",
                "_owners"
            ]
        }
    ],
    "approve(address , uint256 )": [],
    "setApprovalForAll(address , bool )": [],
    "tokenURI(uint256 _id) returns (string)": [
    ],
    "totalSupply() returns (uint256)": []
}