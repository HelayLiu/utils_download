{
    "multicall(bytes[] data) returns (bytes[])": [],
    "iDepositUSDC(uint256 partnerId, bytes32 destChainIdBytes, bytes32 recipient, uint256 amount)": [
        {
            "specific_checks": "msg.value != destDetails[destChainIdBytes].fee",
            "involved_variables": [
                "destDetails"
            ],
            "descriptions": "Match sent ETH with destination chain fee requirements.",
            "references": [
                "destDetails",
                "_balances"
            ]
        }
    ],
    "iDeposit(IAssetForwarder.DepositData depositData, bytes destToken, bytes recipient)": [],
    "iDepositInfoUpdate(address srcToken, uint256 feeAmount, uint256 depositId, bool initiatewithdrawal)": [],
    "iDepositMessage(IAssetForwarder.DepositData depositData, bytes destToken, bytes recipient, bytes message)": [],
    "iRelay(IAssetForwarder.RelayData relayData)": [],
    "iRelayMessage(IAssetForwarder.RelayDataMessage relayData)": [],
    "paused() returns (bool)": [],
    "supportsInterface(bytes4 interfaceId) returns (bool)": [],
    "hasRole(bytes32 role, address account) returns (bool)": [],
    "getRoleAdmin(bytes32 role) returns (bytes32)": [],
    "grantRole(bytes32 role, address account)": [
        {
            "specific_checks": "hasRole(DEFAULT_ADMIN_ROLE, msg.sender)",
            "involved_variables": [
                "msg.sender",
                "_roles"
            ],
            "descriptions": "Enforce admin role hierarchy for granting permissions.",
            "references": [
                "_roles"
            ]
        }
    ],
    "revokeRole(bytes32 role, address account)": [],
    "renounceRole(bytes32 role, address account)": [
        {
            "potential_checks": "account == msg.sender",
            "involved_variables": [
                "msg.sender",
                "account"
            ],
            "descriptions": "Only the account itself can renounce its role.",
            "references": [
                "_roles"
            ]
        }
    ],
    "update(uint256 index, address _gatewayContract, bytes _routerMiddlewareBase, uint256 minPauseStakeAmount, uint256 maxPauseStakeAmount)": [
        {
            "potential_checks": "hasRole(RESOURCE_SETTER,msg.sender)",
            "involved_variables": [
                "msg.sender",
                "_roles"
            ],
            "descriptions": "Only Resource Setter can update the contract.",
            "references": [
                "pauseStakeAmountMin",
                "pauseStakeAmountMax",
                "routerMiddlewareBase",
                "gatewayContract"
            ]
        }
    ],
    "updateTokenMessenger(address _tokenMessenger)": [
        {
            "potential_checks": "hasRole(RESOURCE_SETTER,msg.sender)",
            "involved_variables": [
                "msg.sender",
                "_roles"
            ],
            "descriptions": "Only Resource Setter can update the token message.",
            "references": [
                "tokenMessenger"
            ]
        }
    ],
    "pause()": [
        {
            "potential_checks": "hasRole(PAUSER,msg.sender)",
            "involved_variables": [
                "msg.sender",
                "_roles"
            ],
            "descriptions": "Only PAUSER can pause the contract.",
            "references": [
                "_paused"
            ]
        }
    ],
    "unpause()": [
        {
            "potential_checks": "hasRole(PAUSER,msg.sender)",
            "involved_variables": [
                "msg.sender",
                "_roles"
            ],
            "descriptions": "Only PAUSER can pause the contract.",
            "references": [
                "_paused"
            ]
        }
    ],
    "setDestDetails(bytes32[] _destChainIdBytes, IAssetForwarder.DestDetails[] _destDetails)": [
        {
            "potential_checks": "hasRole(RESOURCE_SETTER,msg.sender)",
            "involved_variables": [
                "msg.sender",
                "_roles"
            ],
            "descriptions": "Only Resource Setter can set the destDetails.",
            "references": [
                "destDetails"
            ]
        }
    ],
    "iReceive(string requestSender, bytes packet, string ) returns (bytes)": [
        {
            "potential_checks": "msg.sender != address(gatewayContract)",
            "involved_variables": [
                "gatewayContract",
                "msg.sender"
            ],
            "descriptions": "Validate calls only from the gateway contract.",
            "references": [
                "gatewayContract",
                "_balances",
                "routerMiddlewareBase"
            ]
        },
        {
            "potential_checks": "routerMiddlewareBase != keccak256(bytes)(bytes(requestSender))",
            "involved_variables": [
                "requestSender",
                "routerMiddlewareBase"
            ],
            "descriptions": "Verify request sender matches middleware base.",
            "references": [
                "gatewayContract",
                "_balances",
                "routerMiddlewareBase"
            ]
        }
    ],
    "rescue(address token)": [],
    "toggleCommunityPause()": [
        {
            "potential_checks": "hasRole(DEFAULT_ADMIN_ROLE,msg.sender)",
            "involved_variables": [
                "msg.sender",
                "_roles"
            ],
            "descriptions": "Only DEFAULT_ADMIN_ROLEr can set the isCommunityPauseEnabled.",
            "references": [
                "isCommunityPauseEnabled"
            ]
        }
    ],
    "communityPause()": [
        {
            "specific_checks": "msg.value >= pauseStakeAmountMin && msg.value <= pauseStakeAmountMax",
            "involved_variables": [
                "pauseStakeAmountMin",
                "pauseStakeAmountMax",
                "msg.value"
            ],
            "descriptions": "Validate stake amount within configured limits.",
            "references": [
                "totalStakedAmount"
            ]
        }
    ],
    "withdrawStakeAmount()": [
        {
            "potential_checks": "hasRole(DEFAULT_ADMIN_ROLE,msg.sender)",
            "involved_variables": [
                "msg.sender",
                "_roles"
            ],
            "descriptions": "Only DEFAULT_ADMIN_ROLEr can withdraw stake amount.",
            "references": [
                "totalStakedAmount",
                "_balances"
            ]
        },
        {
            "specific_checks": "address(this).balance >= totalStakedAmount",
            "involved_variables": [
                "totalStakedAmount"
            ],
            "descriptions": "Ensure sufficient balance before withdrawing staked ETH.",
            "references": [
                "totalStakedAmount",
                "_balances"
            ]
        }
    ]
}