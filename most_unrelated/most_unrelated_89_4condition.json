{
    "owner() returns (address)": [],
    "renounceOwnership()": [
        {
            "potential_checks": "owner() == msg.sender == False",
            "involved_variables": [],
            "descriptions": "",
            "references": []
        }
    ],
    "transferOwnership(address newOwner)": [
        {
            "potential_checks": "owner() == msg.sender",
            "involved_variables": [
                "newOwner"
            ],
            "descriptions": "",
            "references": []
        }
    ],
    "getClaimMessageHash(address tokenAddress, address user, uint256 id, uint256 amount, uint256 expiredAt) returns (bytes32)": [],
    "balanceOf(address tokenAddress) returns (uint256)": [],
    "setAdminAddress(address admin)": [
        {
            "potential_checks": "owner() == msg.sender == False",
            "involved_variables": [],
            "descriptions": "",
            "references": []
        }
    ],
    "removeAdminAddress(address admin)": [
        {
            "potential_checks": "owner() == msg.sender == False",
            "involved_variables": [],
            "descriptions": "",
            "references": []
        }
    ],
    "setSigner(address _signer)": [
        {
            "potential_checks": "owner() == msg.sender",
            "involved_variables": [
                "_signer"
            ],
            "descriptions": "",
            "references": []
        }
    ],
    "withdrawn(address tokenAddress, uint256 amount)": [
        {
            "potential_checks": "admins[msg.sender] == False",
            "involved_variables": [
                "admins",
                "msg.sender"
            ],
            "descriptions": "",
            "references": [
                "admins"
            ]
        }
    ],
    "claimToken(address tokenAddress, uint256 id, uint256 amount, uint256 expiredAt, bytes signature)": [
        {
            "potential_checks": "amount > 0",
            "involved_variables": [
                "ECDSA",
                "this",
                "amount",
                "token",
                "msg.sender",
                "ids",
                "id",
                "expiredAt",
                "ethSignedMessageHash",
                "signature",
                "block.timestamp",
                "signer",
                "tokenAddress"
            ],
            "descriptions": "",
            "references": [
                "ids",
                "signer"
            ]
        },
        {
            "potential_checks": "ids[id]",
            "involved_variables": [
                "ECDSA",
                "this",
                "amount",
                "token",
                "msg.sender",
                "ids",
                "id",
                "expiredAt",
                "ethSignedMessageHash",
                "signature",
                "block.timestamp",
                "signer",
                "tokenAddress"
            ],
            "descriptions": "",
            "references": [
                "ids",
                "signer"
            ]
        },
        {
            "potential_checks": "block.timestamp < expiredAt",
            "involved_variables": [
                "ECDSA",
                "this",
                "amount",
                "token",
                "msg.sender",
                "ids",
                "id",
                "expiredAt",
                "ethSignedMessageHash",
                "signature",
                "block.timestamp",
                "signer",
                "tokenAddress"
            ],
            "descriptions": "",
            "references": [
                "ids",
                "signer"
            ]
        },
        {
            "potential_checks": "token.balanceOf(address(this)) >= amount == False",
            "involved_variables": [
                "ECDSA",
                "this",
                "amount",
                "token",
                "msg.sender",
                "ids",
                "id",
                "expiredAt",
                "ethSignedMessageHash",
                "signature",
                "block.timestamp",
                "signer",
                "tokenAddress"
            ],
            "descriptions": "",
            "references": [
                "ids",
                "signer"
            ]
        }
    ],
    "verifyClaimTokenSignature(address tokenAddress, address sender, uint256 id, uint256 amount, uint256 expiredAt, bytes signature)": [
        {
            "potential_checks": "ECDSA.recover(ethSignedMessageHash,signature) == signer == False",
            "involved_variables": [
                "signature",
                "ECDSA",
                "signer",
                "ethSignedMessageHash"
            ],
            "descriptions": "",
            "references": [
                "signer"
            ]
        }
    ]
}