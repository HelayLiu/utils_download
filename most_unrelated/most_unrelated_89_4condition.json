{
    "owner() returns (address)": [],
    "renounceOwnership()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before renouncing ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "transferOwnership(address newOwner)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before transfer ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "getClaimMessageHash(address tokenAddress, address user, uint256 id, uint256 amount, uint256 expiredAt) returns (bytes32)": [],
    "balanceOf(address tokenAddress) returns (uint256)": [],
    "setAdminAddress(address admin)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting an admin address.",
            "references": ["admins"]
        }
    ],
    "removeAdminAddress(address admin)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before removing an admin address.",
            "references": ["admins"]
        }
    ],
    "setSigner(address _signer)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting a signer address.",
            "references": [
                "_signer"
            ]
        }
    ],
    "withdrawn(address tokenAddress, uint256 amount)": [
        {
            "potential_checks": "admins[msg.sender]",
            "involved_variables": [
                "admins",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is an admin before withdrawing tokens.",
            "references": [
                "_balances"
            ]
        }
    ],
    "claimToken(address tokenAddress, uint256 id, uint256 amount, uint256 expiredAt, bytes signature)": [
                {
            "potential_checks": "ECDSA.recover(ethSignedMessageHash,signature) == signer",
            "involved_variables": [
                "signature",
                "signer",
                "ethSignedMessageHash"
            ],
            "descriptions": "Ensure that the signature is valid and signed by the designated signer before claiming tokens.",
            "references": [
                "ids",
                "_balances"
            ]
        }
    ],
    "verifyClaimTokenSignature(address tokenAddress, address sender, uint256 id, uint256 amount, uint256 expiredAt, bytes signature)": [

    ]
}