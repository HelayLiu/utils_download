{
    "name() returns (string)": [],
    "symbol() returns (string)": [],
    "decimals() returns (uint8)": [],
    "totalSupply() returns (uint256)": [],
    "balanceOf(address owner) returns (uint256)": [],
    "allowance(address owner, address spender) returns (uint256)": [],
    "approve(address spender, uint256 value) returns (bool)": [],
    "transfer(address to, uint256 value) returns (bool)": [],
    "transferFrom(address from, address to, uint256 value) returns (bool)": [
        {
            "potential_checks": "allowance[from][msg.sender] >= value",
            "involved_variables": [
                "from",
                "msg.sender",
                "value",
                "allowance"
            ],
            "descriptions": "Ensure that the spender has enough allowance to transfer from the source account.",
            "references": [
                "allowance",
                "balanceOf"
            ]
        }
    ],
    "DOMAIN_SEPARATOR() returns (bytes32)": [],
    "PERMIT_TYPEHASH() returns (bytes32)": [],
    "nonces(address owner) returns (uint256)": [],
    "permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)": [
        {  
            "specific_checks": "deadline >= block.timestamp",  
            "involved_variables": ["deadline", "block.timestamp"],  
            "descriptions": "Ensures permit signature is not expired.",  
            "references": ["allowance"]  
        },  
        {  
            "specific_checks": "recoveredAddress == owner",  
            "involved_variables": ["recoveredAddress", "owner", "v", "r", "s"],  
            "descriptions": "Validates ECDSA signature integrity to enforce only the owner can approve via permit.",  
            "references": [ "allowance"]  
        }  
    ],
    "initialize(string tokenName, string tokenSymbol, uint256 tokenTotalSupply, address launcher)": []
}