{
    "isOwner(address account) returns (bool)": [],
    "changeOwner(address _newOwner)": [
        {
            "potential_checks": "msg.sender == _owner",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is the current owner before changing ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "supportsInterface(bytes4 interfaceId) returns (bool)": [],
    "tokenOfOwnerByIndex(address owner, uint256 index) returns (uint256)": [],
    "totalSupply() returns (uint256)": [],
    "tokenByIndex(uint256 index) returns (uint256)": [],
    "balanceOf(address owner) returns (uint256)": [],
    "ownerOf(uint256 tokenId) returns (address)": [],
    "safeTransferFrom(address from, address to, uint256 tokenId, bytes data)": [
        {
            "potential_checks": "msg.sender == from || _operatorApprovals[from][msg.sender] || _tokenApprovals[tokenId] == msg.sender",
            "involved_variables": [
                "from",
                "tokenId",
                "msg.sender",
                "_operatorApprovals",
                "_tokenApprovals"
            ],
            "descriptions": "Ensure that the caller is either the owner, an approved operator, or has been granted approval for the specific token.",
            "references": [
                "_balances",
                "_owners"
            ]
        }
    ],
    "safeTransferFrom(address from, address to, uint256 tokenId)": [
        {
            "potential_checks": "msg.sender == from || _operatorApprovals[from][msg.sender] || _tokenApprovals[tokenId] == msg.sender",
            "involved_variables": [
                "from",
                "tokenId",
                "msg.sender",
                "_operatorApprovals",
                "_tokenApprovals"
            ],
            "descriptions": "Ensure that the caller is either the owner, an approved operator, or has been granted approval for the specific token.",
            "references": [
                "_balances",
                "_owners"
            ]
        }
    ],
    "transferFrom(address from, address to, uint256 tokenId)": [
        {
            "potential_checks": "msg.sender == from || _operatorApprovals[from][msg.sender] || _tokenApprovals[tokenId] == msg.sender",
            "involved_variables": [
                "from",
                "tokenId",
                "msg.sender",
                "_operatorApprovals",
                "_tokenApprovals"
            ],
            "descriptions": "Ensure that the caller is either the owner, an approved operator, or has been granted approval for the specific token.",
            "references": [
                "_balances",
                "_owners"
            ]
        }
    ],
    "approve(address to, uint256 tokenId)": [
        {
            "potential_checks": "msg.sender == _owners[tokenId] || _operatorApprovals[_owners[tokenId]][msg.sender]",
            "involved_variables": [
                "_owners",
                "tokenId",
                "msg.sender",
                "_operatorApprovals"
            ],
            "descriptions": "Ensure that the caller is either the owner, an approved operator, or has been granted approval for the specific token.",
            "references": [
                "_balances",
                "_owners"
            ]
        }
    ],
    "setApprovalForAll(address operator, bool _approved)": [],
    "getApproved(uint256 tokenId) returns (address)": [],
    "isApprovedForAll(address owner, address operator) returns (bool)": [],
    "name() returns (string)": [],
    "symbol() returns (string)": [],
    "tokenURI(uint256 tokenId) returns (string)": [],
    "setApprovalForAll(address operator, bool approved)": [],
    "initialize()": [],
    "setSvgGenerater(address svgGenerater)": [
        {
            "potential_checks": "msg.sender == _owner ",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is the owner before setting the SVG generator.",
            "references": [
                "SvgGenerate"
            ]
        }
    ],
    "mintInfo(uint256 tokenId) returns (uint256, uint256, uint256, uint256, uint256, bool)": [],
    "mintInfoByTokenOwnerIndex(address _owner, uint256 _index) returns (uint256, uint256, uint256)": [],
    "batchClaimRankWithGenerateNft(uint256 _num, uint256 _term)": [],
    "rebatchClaimRankByNft(uint256[] _tokenIds, uint256 _term)": [
        {
            "potential_checks": "_owners[_tokenIds[index]] == msg.sender",
            "involved_variables": [
                "_owners",
                "_tokenIds",
                "index",
                "msg.sender"
            ],
            "descriptions": "Ensure caller owns the NFT for rebatching.",
            "references": [
                "nftInfo"
            ]
        }
    ],
    "claimByNft(uint256[] _tokenIds, address _to)": [
        {
            "potential_checks": "_owners[_tokenIds[index]] == msg.sender",
            "involved_variables": [
                "_owners",
                "_tokenIds",
                "index",
                "msg.sender"
            ],
            "descriptions": "Ensure caller owns the NFT for rebatching.",
            "references": [
                "nftInfo"
            ]
        }
    ],
    "setTips(uint256 _tips)": [
        {
            "potential_checks": "msg.sender == 0xA8344F42814Ab006AcE709b26368a68A416f7777",
            "involved_variables": [
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the designated address for setting tips.",
            "references": [
                "tips"
            ]
        }
    ],
    "claimAndClaimRankByNft(uint256[] _tokenIds, address _to, uint256 _term)": [
        {
            "potential_checks": "msg.value == tips",
            "involved_variables": [
                "msg.value",
                "tips"
            ],
            "descriptions": "Ensure that the value sent with the transaction matches the tips amount.",
            "references": [
                "nftInfo"
            ]
        },
        {
            "potential_checks": "_owners[_tokenIds[index]] == msg.sender",
            "involved_variables": [
                "_owners",
                "_tokenIds",
                "index",
                "msg.sender"
            ],
            "descriptions": "Validate NFT ownership before claim/re-claim.",
            "references": [
                "nftInfo"
            ]
        }
    ],
    "withdraw()": [],
    "addressFrom(address _origin, uint256 _nonce) returns (address)": []
}