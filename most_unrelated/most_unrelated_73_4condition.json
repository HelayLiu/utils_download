{
    "pendingOwner() returns (address)": [],
    "renounceOwnership()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before renouncing ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "transferOwnership(address newOwner)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before transfer ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "acceptOwnership()": [
        {
            "potential_checks": "pendingOwner == msg.sender",
            "involved_variables": [
                "pendingOwner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the pending owner before accepting ownership.",
            "references": [
                "pendingOwner",
                "_owner"
            ]
        }
    ],
    "owner() returns (address)": [],
    "transfer(address wallet, address[] players, uint64[] amounts)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before transferring funds.",
            "references": ["balanceOf"]
        }
    ],
    "claim(address wallet, uint64 amount, bytes sig)": [
        {
            "potential_checks": "isBlackListed[msg.sender]",
            "involved_variables": [
                "msg.sender",
                "isBlackListed"
            ],
            "descriptions": "Check if the sender is blacklisted before allowing claim.",
            "references": [
                "balanceOf"
            ]
        },
        {
            "potential_checks": "!usedsignatures[sig]",
            "involved_variables": [
                "usedsignatures",
                "sig"
            ],
            "descriptions": "Check if the signature has already been used to prevent double claims.",
            "references": [
                "balanceOf"
            ]
        },
        {
            "potential_checks": "signers[_signer] == true",
            "involved_variables":  ["signers","_signer"],
            "descriptions": "Verify the signature is from an authorized signer.",
            "references": ["balanceOf"]
        }
    ],
    "bigClaim(address wallet, uint64 amount, bytes[] sigs)": [
        {
            "potential_checks": "isBlackListed[msg.sender]",
            "involved_variables": [
                "msg.sender",
                "isBlackListed"
            ],
            "descriptions": "Check if the sender is blacklisted before allowing claim.",
            "references": [
                "balanceOf"
            ]
        },
        {
            "potential_checks": "!usedsignatures[sig]",
            "involved_variables": [
                "usedsignatures",
                "sig"
            ],
            "descriptions": "Check if the signature has already been used to prevent double claims.",
            "references": [
                "balanceOf"
            ]
        },
        {
            "potential_checks": "signers[_signer] == true",
            "involved_variables":  ["signers","_signer"],
            "descriptions": "Verify the signature is from an authorized signer.",
            "references": ["balanceOf"]
        }
    ],
    "setToken(address _token, uint8 _decimals)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting the token address and decimals.",
            "references": [
                "_token",
                "_decimals"
            ]
        }
    ],
    "addBlackList(address[] _evilUsers)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Restricts adding users to the blacklist to the owner.",
            "references": [
                "isBlackListed"
            ]
        }
    ],
    "removeBlackList(address[] _clearedUsers)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Restricts removing users from the blacklist to the owner.",
            "references": [
                "isBlackListed"
            ]
        }
    ],
    "invalidateUnusedSignature(bytes[] signatures)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before invalidating unused signatures.",
            "references": [
                "usedsignatures"
            ]
        }
    ],
    "invalidateUnusedNonce(address[] addrs)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before invalidating unused nonces.",
            "references": [
                "nonces"
            ]
        }
    ],
    "setSigNumber(uint8 _signumber)": [
        {
            "potential_checks": "owner() == msg.sender",
            "involved_variables": [
                "_signumber"
            ],
            "descriptions": "Restricts setting the number of signatures required to the owner.",
            "references": ["signumber"]
           
        }
    ],
    "setThresholds(uint64 _thresholds)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Restricts setting the thresholds to the owner.",
            "references": ["thresholds"]
        }
    ],
    "setThresholds(bool flag)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Restricts setting the thresholds flag to the owner.",
            "references": ["checkthresholds"]
        }
    ],
    "setSigner(address _signer, bool flag)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Restricts setting the signer address to the owner.",
            "references": ["signers"]
        }
    ],
    "withdrawsToken(address to)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before withdrawing tokens.",
            "references": [
                "balanceOf",
                "totalSupply"
            ]
        }
    ]
}