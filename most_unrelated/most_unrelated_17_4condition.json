{
    "owner() returns (address)": [],
    "renounceOwnership()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": ["_owner","msg.sender"],
            "descriptions": "Ensure only the current owner can renounce ownership.",
            "references": ["_owner"]
        }
    ],
    "transferOwnership(address newOwner)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure only the current owner can transfer ownership.",
            "references": ["_owner"]
        }
    ],
    "getGeneratedReward(uint256 _fromTime, uint256 _toTime) returns (uint256)": [],
    "pendingReward(uint256 _pid, address _user) returns (uint256)": [
    ],
    "massUpdatePools()": [
    ],
    "updatePool(uint256 _pid)": [
       {  
        "specific_checks": "block.timestamp > pool.lastRewardTime",  
        "involved_variables": ["block.timestamp", "pool"],  
        "descriptions": "Skips update if pool was recently updated to prevent redundant operations.",  
        "references": ["pool"]  
        }
    ],
    "deposit(uint256 _pid, uint256 _amount)": [
        {  
        "specific_checks": "pool.token.balanceOf(address(this)) == balanceBeforeTransfer + _amount",  
        "involved_variables": ["pool", "balanceBeforeTransfer", "_amount","this"],  
        "descriptions": "Detects fee-on-transfer tokens by verifying exact balance change.",  
        "references": ["pool"]  
        }
    ],
    "withdraw(uint256 _pid, uint256 _amount)": [
    {  
        "specific_checks": "userInfo[_pid][_sender].amount >= _amount",  
        "involved_variables": ["_pid","_amount"],  
        "descriptions": "Ensures user cannot withdraw more than their staked balance.",  
        "references": ["RewardToken"]  
        },  
        {  
        "specific_checks": "RewardToken.balanceOf(address(this)) >= _pending",  
        "involved_variables": ["RewardToken", "this"],  
        "descriptions": "Verifies sufficient reward balance before transfer to prevent overflows.",  
        "references": ["RewardToken"]  
        }  
    ],
    "emergencyWithdraw(uint256 _pid)": [],
    "add(IERC20 _token, uint256 _depFee, uint256 _allocPoint, uint256 _lastRewardTime, bool _withUpdate)": [
        {  
        "specific_checks": "operator == msg.sender",  
        "involved_variables": ["msg.sender","operator"],  
        "descriptions": "Restricts pool creation to authorized operator only.",  
        "references": ["totalAllocPoint","poolInfo"]  
        }  
    ],
    "setAllocations(uint256 _pid, uint256 _allocPoint)": [
        {
            "potential_checks": "operator == msg.sender",
            "involved_variables": [
                "operator",
                "msg.sender"
            ],
            "descriptions": "Only operator can set allocations",
            "references": [
                "pool"
            ]
        }
    ],
    "recalcRewardPerSec()": [
        {
            "potential_checks": "operator == msg.sender",
            "involved_variables": [
                "operator",
                "msg.sender"
            ],
            "descriptions": "Only operaytor can recalculate reward per second",
            "references": [
                "RewardToken"
            ]
        }
    ],
    "setNewRewardToken(address _newToken)": [
        {
            "potential_checks": "operator == msg.sender",
            "involved_variables": [
                "operator",
                "msg.sender"
            ],
            "descriptions": "Only operaytor can set new reward token",
            "references": [
                "RewardToken"
            ]
        }
    ],
    "moveRewardsToUpdatedContract(IERC20 _token, uint256 _amount, address _to)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "msg.sender",
                "_token"
            ],
            "descriptions": "Only owner can move rewards to updated contract",
            "references": [
                "RewardToken"
            ]
        },
        {
            "potential_checks": "address(_token) == address(RewardToken)",
            "involved_variables": [
                "RewardToken",
                "_token"
            ],
            "descriptions": "Only the reward token can be moved",
            "references": [
                "RewardToken"
            ]
        }
    ],
    "governanceRecoverUnsupported(IERC20 _token, uint256 _amount, address _to)": [
        {
            "potential_checks": "operator == msg.sender",
            "involved_variables": [
                "operator",
                "msg.sender"
            ],
            "descriptions": "Only operator can governance recover unsupported tokens",
            "references": [
                "_token"
            ]
        },
        {
            "potential_checks": "block.timestamp < poolEndTime + 2592000",
            "involved_variables": [
                "poolEndTime",
                "block.timestamp"
            ],
            "descriptions": "the token is not the reward token and not any of the pool tokens.",
            "references": [
                "_token"
            ]
        },
        {
            "potential_checks": "_token != RewardToken",
            "involved_variables": [
                "RewardToken",
                "_token"
            ],
            "descriptions": "The reward token must not be _token",
            "references": [
                "_token"
            ]
        }
    ]
}