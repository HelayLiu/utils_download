{
    "owner() returns (address)": [],
    "renounceOwnership()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before renouncing ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "transferOwnership(address newOwner)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before transfer ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "name() returns (string)": [],
    "symbol() returns (string)": [],
    "decimals() returns (uint8)": [],
    "totalSupply() returns (uint256)": [],
    "balanceOf(address account) returns (uint256)": [],
    "transfer(address recipient, uint256 amount) returns (bool)": [],
    "allowance(address owner, address spender) returns (uint256)": [],
    "approve(address spender, uint256 amount) returns (bool)": [],
    "transferFrom(address sender, address recipient, uint256 amount) returns (bool)": [
        {
            "potential_checks": "_allowances[sender][msg.sender] >= amount",
            "involved_variables": [
                "_allowances",
                "sender",
                "msg.sender",
                "amount"
            ],
            "descriptions": "Verify spender allowance covers transfer amount to isolate unauthorized access.",
            "references": [
                "_balances"
            ]
        }
    ],
    "increaseAllowance(address spender, uint256 addedValue) returns (bool)": [],
    "decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)": [],
    "enableTrading()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before enabling trading.",
            "references": [
                "tradingActive",
                "swapEnabled",
                "launchedAt"
            ]
        }
    ],
    "removeLimits() returns (bool)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before removing limits.",
            "references": [
                "limitsInEffect"
            ]
        }
    ],
    "disableTransferDelay() returns (bool)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before disabling transfer delay.",
            "references": [
                "transferDelayEnabled"
            ]
        }
    ],
    "setEarlySellTax(bool onoff)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting early sell tax.",
            "references": [
                "enableEarlySellTax"
            ]
        }
    ],
    "updateSwapTokensAtAmount(uint256 newAmount) returns (bool)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is the current owner before updating swap tokens at amount.",
            "references": [
                "swapTokensAtAmount"
            ]
        }
    ],
    "updateMaxTxnAmount(uint256 newNum)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before updating max transaction amount.",
            "references": [
                "maxTransactionAmount"
            ]
        }
    ],
    "updateMaxWalletAmount(uint256 newNum)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before updating max wallet amount.",
            "references": [
                "maxWallet"
            ]
        }
    ],
    "excludeFromMaxTransaction(address updAds, bool isEx)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the owner before excluding from max transaction.",
            "references": [
                "_isExcludedMaxTransactionAmount"
            ]
        }
    ],
    "updateSwapEnabled(bool enabled)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before updating swap enabled status.",
            "references": [
                "swapEnabled"
            ]
        }
    ],
    "updateBuyFees(uint256 _marketingFee, uint256 _liquidityFee, uint256 _devFee)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is the current owner before updating buy fees.",
            "references": [
                "buyMarketingFee",
                "buyLiquidityFee",
                "buyDevFee",
                "buyTotalFees"
            ]
        }
    ],
    "updateSellFees(uint256 _marketingFee, uint256 _liquidityFee, uint256 _devFee, uint256 _earlySellLiquidityFee, uint256 _earlySellMarketingFee)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is the current owner before updating sell fees.",
            "references": [
                "sellMarketingFee",
                "sellLiquidityFee",
                "sellDevFee",
                "earlySellLiquidityFee",
                "earlySellMarketingFee",
                "sellTotalFees"
            ]
        }
    ],
    "excludeFromFees(address account, bool excluded)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before excluding from fees.",
            "references": [
                "_isExcludedFromFees"
            ]
        }
    ],
    "isBlacklisted(address account) returns (bool)": [],
    "blacklistAccounts(address[] accounts, bool isBlacklisted)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before blacklisting accounts.",
            "references": [
                "_blacklist"
            ]
        }
    ],
    "setAutomatedMarketMakerPair(address pair, bool value)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting automated market maker pair.",
            "references": [
                "automatedMarketMakerPairs"
            ]
        }
    ],
    "updateMarketingWallet(address newMarketingWallet)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before updating marketing wallet.",
            "references": [
                "marketingWallet"
            ]
        }
    ],
    "updateDevWallet(address newWallet)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before updating dev wallet.",
            "references": [
                "devWallet"
            ]
        }
    ],
    "isExcludedFromFees(address account) returns (bool)": []
}