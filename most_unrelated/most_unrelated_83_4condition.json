{
    "owner() returns (address)": [],
    "renounceOwnership()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before renouncing ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "transferOwnership(address newOwner)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before transfer ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "name() returns (string)": [],
    "symbol() returns (string)": [],
    "decimals() returns (uint8)": [],
    "totalSupply() returns (uint256)": [],
    "balanceOf(address account) returns (uint256)": [],
    "transfer(address recipient, uint256 amount) returns (bool)": [],
    "allowance(address owner, address spender) returns (uint256)": [],
    "approve(address spender, uint256 amount) returns (bool)": [],
    "transferFrom(address sender, address recipient, uint256 amount) returns (bool)": [
        {
            "potential_checks": "_allowances[sender][msg.sender] >= amount",
            "involved_variables": [
                "_allowances",
                "sender",
                "msg.sender",
                "amount"
            ],
            "descriptions": "Ensure that the spender has enough allowance to transfer from the sender.",
            "references": [
                "_allowances",
                "_balances"
            ]
        }
    ],
    "increaseAllowance(address spender, uint256 addedValue) returns (bool)": [],
    "decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)": [],
    "totalToken() returns (uint256)": [],
    "deposit(uint256 amountToken)": [],
    "withdraw(uint256 share)": [],
    "requestFunds(address targetedToken, uint256 amount)": [
        {
            "potential_checks": "STRATEGY == msg.sender",
            "involved_variables": [
                "STRATEGY",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the strategy before requesting funds.",
            "references": [
                "_balances"
            ]
        }
    ],
    "token() returns (address)": [],
    "initialize(IVaultConfig _config, address _token, string _name, string _symbol, uint8 _decimals, address _debtToken)": [],
    "pendingInterest(uint256 value) returns (uint256)": [],
    "debtShareToVal(uint256 debtShare) returns (uint256)": [],
    "debtValToShare(uint256 debtVal) returns (uint256)": [],
    "positionInfo(uint256 id) returns (uint256, uint256)": [],
    "addCollateral(uint256 id, uint256 amount, bool goRogue, bytes data)": [
        {
            "potential_checks": "config.whitelistedCallers(msg.sender) || msg.sender == tx.origin",
            "involved_variables": [
                "msg.sender",
                "config",
                "tx.origin"
            ],
            "descriptions": "Ensure that the caller is whitelisted or is the transaction origin before adding collateral.",
            "references": [
                "POSITION_ID",
                "STRATEGY",
                "positions"
            ]
        },
        {
            "potential_checks": "positions[id].owner == msg.sender",
            "involved_variables": [
                "msg.sender",
                "positions"
            ],
            "descriptions": "Ensure that the caller is the owner of the position before adding collateral.",
            "references": [
                "POSITION_ID",
                "STRATEGY",
                "positions"
            ]
        }
    ],
    "work(uint256 id, address worker, uint256 principalAmount, uint256 borrowAmount, uint256 maxReturn, bytes data)": [
        {
            "potential_checks": "config.whitelistedCallers(msg.sender) || msg.sender == tx.origin",
            "involved_variables": [
                "msg.sender",
                "config",
                "tx.origin"
            ],
            "descriptions": "Ensure that the caller is whitelisted or is the transaction origin before work.",
            "references": [
                "POSITION_ID",
                "STRATEGY",
                "positions"
            ]
        },
        {
            "potential_checks": "positions[id].owner == msg.sender",
            "involved_variables": [
                "positions",
                "msg.sender"
            ],
            "descriptions": "Verify only the position owner can interact.",
            "references": [
                "POSITION_ID",
                "STRATEGY",
                "positions"
            ]
        },
        {
            "potential_checks": "config.isWorker(worker)",
            "involved_variables": [
                "worker"
            ],
            "descriptions": "Ensure the worker contract is valid.",
            "references": [
                "POSITION_ID",
                "STRATEGY",
                "positions"
            ]
        }
    ],
    "kill(uint256 id)": [
        {
            "potential_checks": "config.whitelistedCallers(msg.sender) || msg.sender == tx.origin",
            "involved_variables": [
                "msg.sender",
                "config",
                "tx.origin"
            ],
            "descriptions": "Ensure that the caller is whitelisted or is the transaction origin before work.",
            "references": [
                "positions"
            ]
        },
        {
            "potential_checks": "health.mul(killFactor) < debt.mul(10000)",
            "involved_variables": [
                "health",
                "debt"
            ],
            "descriptions": "Ensure position is unhealthy before liquidation.",
            "references": [
                "positions",
                "vaultDebtVal"
            ]
        }
    ],
    "updateConfig(IVaultConfig _config)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before updating the configuration.",
            "references": [
                "config"
            ]
        }
    ],
    "setFairLaunchPoolId(uint256 _poolId)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting the FairLaunch pool ID.",
            "references": [
                "fairLaunchPoolId"
            ]
        }
    ],
    "withdrawReserve(address to, uint256 value)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before withdrawing reserve.",
            "references": [
                "reservePool"
            ]
        }
    ],
    "reduceReserve(uint256 value)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before reducing reserve.",
            "references": [
                "reservePool"
            ]
        }
    ]
}