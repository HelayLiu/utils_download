{
    "pendingOwner() returns (address)": [],
    "renounceOwnership()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before renouncing ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "transferOwnership(address newOwner)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before transfer ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "acceptOwnership()": [
        {
        "potential_checks": "msg.sender == _pendingOwner",
        "involved_variables": ["msg.sender", "_pendingOwner"],
        "descriptions": "Verify caller is designated pending owner before ownership transfer.",
        "references": ["_pendingOwner", "_owner"]
        }
    ],
    "owner() returns (address)": [],
    "pendingReward(address _user) returns (uint256)": [
    ],
    "updatePool()": [

    ],
    "deposit(uint256 _amount)": [
    ],
    "withdraw(uint256 _amount)": [
    ],
    "emergencyWithdraw()": [
    ],
    "depositReward(uint256 period)": [
        {
        "potential_checks": "msg.sender == _owner",
        "involved_variables": ["msg.sender", "_owner"],
        "descriptions": "Restrict reward configuration to contract owner.",
        "references": ["rewardPerSec", "lastDistributionRoundEndTime","lastTotalRewardTokenAmount","lastRewardTimestamp"]
        }
    ],
    "emergencyWithdrawRewards()": [
        {
        "potential_checks": "msg.sender == _owner",
        "involved_variables": ["msg.sender", "_owner"],
        "descriptions": "Ensure only owner can extract reward tokens during emergencies",
        "references": ["rewardToken", "rewardPerSec", "lastDistributionRoundEndTime","lastTotalRewardTokenAmount","lastRewardTimestamp"]
        }
    ]
}