{
    "paused() returns (bool)": [],
    "pendingOwner() returns (address)": [],
    "renounceOwnership()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before renouncing ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "transferOwnership(address newOwner)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before transfer ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "acceptOwnership()": [
        {
            "potential_checks": "_pendingOwner == msg.sender",
            "involved_variables": [
                "_pendingOwner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the pending owner before accepting ownership.",
            "references": [
                "_pendingOwner",
                "_owner"
            ]
        }
    ],
    "owner() returns (address)": [],
    "initialize(address aethirToken_)": [
  
    ],
    "getClaimInfo(uint256 orderId) returns (address, uint48, bool, uint256)": [],
    "claim(uint256 orderId, uint48 cliffSeconds, uint48 expiryTimestamp, uint256 amount, bytes[] signatureArray)": [
     {
            "potential_checks": "validSignerCount == signerThreshold",
            "involved_variables": [
                "validSignerCount",
                "signerThreshold",
                "signatureArray"
            ],
            "descriptions": "Ensure that the number of valid signatures matches the required threshold.",
            "references": [
                "claimRecords"
            ]
        }
    ],
    "withdraw(uint256[] orderIdArray, uint48 expiryTimestamp, bytes[] signatureArray)": [
           {
            "potential_checks": "validSignerCount == signerThreshold",
            "involved_variables": [
                "validSignerCount",
                "signerThreshold",
                "signatureArray"
            ],
            "descriptions": "Ensure that the number of valid signatures matches the required threshold.",
            "references": [
                "claimRecords"
            ]
        }
    ],
    "updateCliffTime(uint48 minCliffSeconds_, uint48 maxCliffSeconds_)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before updating cliff time.",
            "references": [
                "_minCliffSeconds",
                "_maxCliffSeconds"
            ]
        }
    ],
    "getCliffTime() returns (uint48, uint48)": [],
    "updateAdmin(address admin)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before updating admin address.",
            "references": [
                "_adminAddress"
            ]
        }
    ],
    "freezeClaimRecord(uint256 orderId)": [
        {
            "potential_checks": "msg.sender == adminAddress",
            "involved_variables": [
                "msg.sender",
                "adminAddress"
            ],
            "descriptions": "Ensure that the caller is the admin before freezing a claim record.",
            "references": [
                "claimRecords"
            ]
        }
    ],
    "pause()": [
        {
            "potential_checks": "msg.sender == adminAddress",
            "involved_variables": [
                "msg.sender",
                "adminAddress"
            ],
            "descriptions": "Ensure that the caller is the admin before pausing the contract.",
            "references": [
                "_paused"
            ]
        }
    ],
    "unpause()": [
        {
            "potential_checks": "msg.sender == adminAddress",
            "involved_variables": [
                "msg.sender",
                "adminAddress"
            ],
            "descriptions": "Ensure that the caller is the admin before unpausing the contract.",
            "references": [
                "_paused"
            ]
         
        }
    ],
    "withdrawERC20(address tokenAddress, address to, uint256 amount)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before withdrawing ERC20 tokens.",
            "references": [
                "_balances"
            ]
        }
    ],
    "getSignerAddress() returns (address[])": [],
    "updateSigner(address[] newSignerArray_, uint256 signerThreshold_)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before updating signer addresses.",
            "references": [
                "_signerArray",
                "signerThreshold"
            ]
        }
    ]
}