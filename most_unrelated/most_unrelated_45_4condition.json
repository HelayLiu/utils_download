{
    "paused() returns (bool)": [],
    "owner() returns (address)": [],
    "renounceOwnership()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before renouncing ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "transferOwnership(address newOwner)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before transfer ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "supportsInterface(bytes4 interfaceId) returns (bool)": [],
    "hasRole(bytes32 role, address account) returns (bool)": [],
    "getRoleAdmin(bytes32 role) returns (bytes32)": [],
    "grantRole(bytes32 role, address account)": [
        {
            "potential_checks": "hasRole(getRoleAdmin(role),msg.sender)",
            "involved_variables": [
                "_roles",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller has the admin role for the specified role before granting it.",
            "references": [
                "_roles"
            ]
        }
    ],
    "revokeRole(bytes32 role, address account)": [
        {
            "potential_checks": "hasRole(getRoleAdmin(role),msg.sender)",
            "involved_variables": [
                "_roles",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller has the admin role for the specified role before revoking it.",
            "references": [
                "_roles"
            ]
        }
    ],
    "renounceRole(bytes32 role, address account)": [
        {
            "potential_checks": "account == msg.sender",
            "involved_variables": [
                "msg.sender",
                "account"
            ],
            "descriptions": "Ensure that the caller is the account renouncing the role.",
            "references": [
                "_roles"
            ]
        }
    ],
    "initialize()": [],
    "pause()": [
        {
            "potential_checks": "hasRole(DEFAULT_ADMIN_ROLE,msg.sender)",
            "involved_variables": [
                "msg.sender",
                "_roles"
            ],
            "descriptions": "Ensure that the caller has the default admin role before pausing.",
            "references": [
                "_paused"
            ]
        }
    ],
    "unpause()": [
        {
            "potential_checks": "hasRole(DEFAULT_ADMIN_ROLE,msg.sender)",
            "involved_variables": [
                "msg.sender",
                "_roles"
            ],
            "descriptions": "Ensure that the caller has the default admin role before unpausing.",
            "references": [
                "_paused"
            ]
        }
    ],
    "setWithdrawAddress(address _address)": [
        {
            "potential_checks": "hasRole(DEFAULT_ADMIN_ROLE, msg.sender)",
            "involved_variables": [
                "msg.sender",
                "_roles"
            ],
            "descriptions": "Ensure only admins configure withdrawal addresses.",
            "references": [
                "operatorAddress"
            ]
        }
    ],
    "getWithdrawAddress() returns (address)": [],
    "setCreatorRoyalty(address _address, address _creator, uint256 _fee)": [
        {
            "potential_checks": "hasRole(DEFAULT_ADMIN_ROLE, msg.sender)",
            "involved_variables": [
                "msg.sender",
                "_roles"
            ],
            "descriptions": "Ensure only admins can set creator royalties.",
            "references": [
                "royalties"
            ]
        }
    ],
    "getCreatorRoyalty(address _address) returns (NftMarket.RoyaltyFee)": [],
    "setPayableToken(address _address, bool allowed)": [
        {
            "potential_checks": "hasRole(DEFAULT_ADMIN_ROLE, msg.sender)",
            "involved_variables": [
                "msg.sender",
                "_roles"
            ],
            "descriptions": "Ensure only admins can set payable tokens.",
            "references": [
                "payableTokens"
            ]
        }
    ],
    "putOnSale(address tokenAddress, uint256 tokenId, address payToken, uint256 price, uint256 salePeriod)": [
        {
            "potential_checks": "IERC721(tokenAddress).isApprovedForAll(msg.sender, address(this))",
            "involved_variables": [
                "msg.sender",
                "tokenAddress"
            ],
            "descriptions": "Ensure seller approved contract to manage their NFT.",
            "references": [
                "nfts"
            ]
        },
        {
            "potential_checks": "IERC721(tokenAddress).ownerOf(tokenId) == msg.sender",
            "involved_variables": [
                "msg.sender",
                "tokenId",
                "tokenAddress"
            ],
            "descriptions": "Verify seller owns the NFT being listed.",
            "references": [
                "nfts"
            ]
        }
    ],
    "updateOnSale(address tokenAddress, uint256 tokenId, address payToken, uint256 price, uint256 salePeriod)": [
        {
            "potential_checks": "IERC721(tokenAddress).isApprovedForAll(msg.sender, address(this))",
            "involved_variables": [
                "msg.sender",
                "tokenAddress"
            ],
            "descriptions": "Ensure seller approved contract to manage their NFT.",
            "references": [
                "nfts"
            ]
        },
        {
            "potential_checks": "IERC721(tokenAddress).ownerOf(tokenId) == msg.sender",
            "involved_variables": [
                "msg.sender",
                "tokenId",
                "tokenAddress"
            ],
            "descriptions": "Verify seller owns the NFT being listed.",
            "references": [
                "nfts"
            ]
        }
    ],
    "removeFromSale(address tokenAddress, uint256 tokenId)": [
        {
            "potential_checks": "IERC721(tokenAddress).ownerOf(tokenId) == msg.sender",
            "involved_variables": [
                "msg.sender",
                "tokenId",
                "tokenAddress"
            ],
            "descriptions": "Verify only NFT owner can cancel listings.",
            "references": [
                "nfts"
            ]
        }
    ],
    "purchase(address tokenAddress, uint256 tokenId)": [
        {
            "potential_checks": "IERC721(tokenAddress).ownerOf(tokenId) == nft.seller",
            "involved_variables": [
                "tokenAddress",
                "tokenId",
                "nft.seller"
            ],
            "descriptions": "Verify seller still owns NFT before purchase.",
            "references": [
                "nfts"
            ]
        },
        {
            "potential_checks": "IERC721(tokenAddress).ownerOf(tokenId) == msg.sender",
            "involved_variables": [
                "tokenAddress",
                "tokenId",
                "msg.sender"
            ],
            "descriptions": "Confirm NFT transfer succeeded post-purchase.",
            "references": [
                "nfts"
            ]
        }
    ]
}