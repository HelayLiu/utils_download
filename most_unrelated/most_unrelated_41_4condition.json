{
    "paused() returns (bool)": [],
    "name() returns (string)": [],
    "symbol() returns (string)": [],
    "decimals() returns (uint8)": [],
    "totalSupply() returns (uint256)": [],
    "balanceOf(address account) returns (uint256)": [],
    "transfer(address recipient, uint256 amount) returns (bool)": [],
    "allowance(address owner, address spender) returns (uint256)": [],
    "approve(address spender, uint256 amount) returns (bool)": [],
    "transferFrom(address sender, address recipient, uint256 amount) returns (bool)": [
        {
            "potential_checks": "_allowances[sender][msg.sender] >= amount",
            "involved_variables": [
                "msg.sender",
                "currentAllowance",
                "amount",
                "sender"
            ],
            "descriptions": "Ensure spender has sufficient allowance.",
            "references": [
                "_allowances",
                "_balances"
            ]
        }
    ],
    "increaseAllowance(address spender, uint256 addedValue) returns (bool)": [],
    "decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)": [],
    "burn(uint256 amount)": [
    ],
    "burnFrom(address account, uint256 amount)": [
        {
            "potential_checks": "_allowances[account][msg.sender] >= amount",
            "involved_variables": [
                "msg.sender",
                "currentAllowance",
                "amount",
                "account"
            ],
            "descriptions": "Ensure spender has sufficient allowance.",
            "references": [
                "_allowances",
                "_balances"
            ]
        }
    ],
    "hasRole(bytes32 role, address account) returns (bool)": [],
    "getRoleMemberCount(bytes32 role) returns (uint256)": [],
    "getRoleMember(bytes32 role, uint256 index) returns (address)": [],
    "getRoleAdmin(bytes32 role) returns (bytes32)": [],
    "grantRole(bytes32 role, address account)": [
        {
            "potential_checks": "hasRole(_roles[role].adminRole,msg.sender)",
            "involved_variables": [
                "_roles",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller has the admin role for the specified role.",
            "references": [
                "_roles"
            ]
        }
    ],
    "revokeRole(bytes32 role, address account)": [
        {
            "potential_checks": "hasRole(_roles[role].adminRole,msg.sender)",
            "involved_variables": [
                "_roles",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller has the admin role for the specified role.",
            "references": [
                "_roles"
            ]
        }
    ],
    "renounceRole(bytes32 role, address account)": [
        {
            "potential_checks": "account == msg.sender",
            "involved_variables": [
                "msg.sender",
                "account"
            ],
            "descriptions": "Ensure that the caller is the account renouncing the role.",
            "references": [
                "_roles"
            ]
        }
    ],
    "mint(address to, uint256 amount)": [
        {
            "potential_checks": "hasRole(MINTER_ROLE,msg.sender)",
            "involved_variables": [
                "_roles",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller has the MINTER_ROLE before minting tokens.",
            "references": [
                "_balances",
                "_totalSupply"
            ]
        }
    ],
    "pause()": [
        {
            "potential_checks": "hasRole(PAUSER_ROLE,msg.sender)",
            "involved_variables": [
                "msg.sender",
                "_roles"
            ],
            "descriptions": "Ensure that the caller has the PAUSER_ROLE before pausing the contract.",
            "references": [
                "_paused"
            ]
        }
    ],
    "unpause()": [
        {
            "potential_checks": "hasRole(PAUSER_ROLE,msg.sender)",
            "involved_variables": [
                "msg.sender",
                "_roles"
            ],
            "descriptions": "Ensure that the caller has the PAUSER_ROLE before unpausing the contract.",
            "references": [
                "_paused"
            ]
        }
    ]
}