{
    "setVRFCoordinatorInfoByMethod(GameVRF.FulfillmentMethod method, bytes32 gasLane, address coordAddress, uint64 subscriptionId, uint32 callbackGasLimit)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the owner before setting VRF coordinator information.",
            "references": ["coordinatorInfoByMethod"]
        }
    ],
    "getRequestConfirmations() returns (uint16)": [],
    "setRequestConfirmations(uint16 requestConfirmations)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the owner before setting request confirmations.",
            "references": [
                "_requestConfirmations"
            ]
        }
    ],
    "getNumWords() returns (uint256)": [],
    "setVRFCoordinator(address coordinator, bool active)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the owner before setting VRF coordinator.",
            "references": [
                "vrfCoordinators"
            ]
        }
    ],
    "rawFulfillRandomWords(uint256 requestId, uint256[] randomWords)": [
        {
            "potential_checks": "vrfCoordinators[msg.sender]",
            "involved_variables": [
                "vrfCoordinators",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is a registered VRF coordinator before fulfilling random words.",
            "references": [
                "gameIdByRequestId",
                "gameById"
            ]
        }
    ],
    "pendingOwner() returns (address)": [],

    "acceptOwnership()": [
        {
            "potential_checks": "_pendingOwner == msg.sender",
            "involved_variables": [
                "_pendingOwner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the pending owner before accepting ownership.",
            "references": [
                "_owner",
                "_pendingOwner"
            ]

        }
    ],
    "owner() returns (address)": [],
    "renounceOwnership()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before renouncing ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "transferOwnership(address newOwner)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before transfer ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "setMinBet(uint256 minBet_)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the owner before setting the minimum bet.",
            "references": ["minBet"]
        }
    ],
    "setMaxBetDivisor(uint256 maxBetDivisor_)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the owner before setting the maximum bet divisor.",
            "references": ["maxBetDivisor"]
        }
    ],
    "setMaxConsecutiveRounds(uint256 maxConsecutiveRounds_)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the owner before setting the maximum consecutive rounds.",
            "references": ["maxConsecutiveRounds"]
        }
    ],
    "setBetMultiplePerRound(uint256 betMultiplePerRound_)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the owner before setting the bet multiple per round.",
            "references": ["betMultiplePerRound"]
        }
    ],
    "getGameInfo(uint256 gameId) returns (CentralGameBase.GameInfo)": [],
    "getManyGameInfo(uint256[] gameIds) returns (CentralGameBase.GameInfo[])": [

    ],
    "setPaused(bool paused_)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the owner before setting the paused state.",
            "references": ["paused"]
        }
    ],
    "setRakeDistributorAddress(address rakeAddress)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the owner before setting the rake distributor address.",
            "references": ["rakeDistributorAddress"]
        }
    ],
    "setTreasuryAddress(address _treasuryAddress)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the owner before setting the treasury address.",
            "references": ["treasuryAddress"]
        }
    ],
    "setReferralTrackerAddress(address _referralTrackerAddress)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the owner before setting the referral tracker address.",
            "references": ["referralTrackerAddress"]
        }
    ],
    "setCurrentGameId(uint256 gameId_)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the owner before setting the current game ID.",
            "references": ["currentGameId"]
        }
    ],
    "rescueNative(uint256 amount)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"

            ],
            "descriptions": "Ensure that the caller is the owner before rescuing native tokens.",
            "references": [
                "value"
            ]
        }
    ],
    "rescueERC20(address tokenAddress)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the owner before rescuing ERC20 tokens.",
            "references": ["balance"]
        }
    ],
    "rescueERC721(address tokenAddress, uint256 tokenId)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the owner before rescuing ERC721 tokens.",
            "references": [
                "balance"
            ]
        }
    ],
    "playGame(uint8 subgame, Slide.RoundChoice[] choices, string referralCode, GameVRF.FulfillmentMethod method) returns (uint256)": [
        {
            "potential_checks": "tx.origin == msg.sender",
            "involved_variables": [
                "tx.origin",
                "msg.sender"
            ],
            "descriptions": "Ensure that the transaction origin is the same as the message sender to prevent contract calls.",
            "references": [
                "gameById",
                "minMarksByGameId",
                "maxMarksByGameId"
            ]
        },
        {
        "potential_checks": "!ITreasury(treasuryAddress).isTreasuryTooLow()",
        "involved_variables":  ["treasuryAddress"],
        "descriptions": "Verify treasury has sufficient funds.",
            "references": [
                "gameById",
                "minMarksByGameId",
                "maxMarksByGameId"
            ]
        }
    ],
    "forceRequestWinner(uint256 gameId, GameVRF.FulfillmentMethod method)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the owner before forcing a request for a winner.",
            "references": [
                "gameById",
                "gameIdByRequestId"
            ]
        }
    ],
    "getMaxBetPerRound(uint8 minMark, uint8 maxMark) returns (uint256)": []
}