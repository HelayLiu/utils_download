{
    "owner() returns (address)": [],
    "renounceOwnership()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before renouncing ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "transferOwnership(address newOwner)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before transfer ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "supportsInterface(bytes4 interfaceId) returns (bool)": [],
    "tokenOfOwnerByIndex(address owner, uint256 index) returns (uint256)": [],
    "totalSupply() returns (uint256)": [],
    "tokenByIndex(uint256 index) returns (uint256)": [],
    "balanceOf(address owner) returns (uint256)": [],
    "ownerOf(uint256 tokenId) returns (address)": [],
    "safeTransferFrom(address from, address to, uint256 tokenId, bytes data)": [
        {
            "potential_checks":"_owners[tokenId] == msg.sender || operatorApprovals[_owners[tokenId]][msg.sender] ||_tokenApprovals[tokenId]",
            "involved_variables": [
                "_owners",
                "msg.sender",
                "operatorApprovals",
                "owner",
                "_tokenApprovals",
                "tokenId"
            ],
            "descriptions": "Ensure that the caller is either the owner of the token, an approved operator, or has a specific token approval.",
            "references": [
                "_owners",
                "_balances"
            ]
        }
    ],
    "safeTransferFrom(address from, address to, uint256 tokenId)": [
        {
            "potential_checks":"_owners[tokenId] == msg.sender || operatorApprovals[_owners[tokenId]][msg.sender] ||_tokenApprovals[tokenId]",
            "involved_variables": [
                "_owners",
                "msg.sender",
                "operatorApprovals",
                "owner",
                "_tokenApprovals",
                "tokenId"
            ],
            "descriptions": "Ensure that the caller is either the owner of the token, an approved operator, or has a specific token approval.",
            "references": [
                "_owners",
                "_balances"
            ]
        }
    ],
    "transferFrom(address from, address to, uint256 tokenId)": [
        {
            "potential_checks":"_owners[tokenId] == msg.sender || operatorApprovals[_owners[tokenId]][msg.sender] ||_tokenApprovals[tokenId]",
            "involved_variables": [
                "_owners",
                "msg.sender",
                "operatorApprovals",
                "owner",
                "_tokenApprovals",
                "tokenId"
            ],
            "descriptions": "Ensure that the caller is either the owner of the token, an approved operator, or has a specific token approval.",
            "references": [
                "_owners",
                "_balances"
            ]
        }
    ],
    "approve(address to, uint256 tokenId)": [],
    "setApprovalForAll(address operator, bool approved)": [],
    "getApproved(uint256 tokenId) returns (address)": [],
    "isApprovedForAll(address owner, address operator) returns (bool)": [],
    "name() returns (string)": [],
    "symbol() returns (string)": [],
    "tokenURI(uint256 tokenId) returns (string)": [

    ],
    "initialize(string _name, string _symbol, string _baseUri, uint256 _mintPrice, address _signer, uint256 _maxSupply, address _paymentReceiver)": [

    ],
    "setPaymentReceiver(address newReceiver)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting a new payment receiver.",
            "references": [
                "paymentReceiver"
            ]
        }
    ],
    "mint(string nonce, bytes signature)": [
        {
            "potential_checks": "_isValidSignature(msg.sender,nonce,signature)",
            "involved_variables": [
                "signature",
                "nonce",
                "msg.sender"
            ],
            "descriptions": "Ensure that the signature is valid for the minting operation.",
            "references": [
                "usedSignatures",
                "_balances",
                "_owners"
            ]
        },
        {
            "potential_checks": "msg.value == mintPrice",
            "involved_variables": [
                "mintPrice",
                "msg.value"
            ],
            "descriptions": "Ensure that the sent value matches the mint price.",
            "references": [
                "_balances",
                "_owners",
                "usedSignatures"
            ]
        },
        {
            "potential_checks": "usedSignatures[signature]",
            "involved_variables": [
                "signature",
                "usedSignatures"
            ],
            "descriptions": "Ensure that the signature has not been used before.",
            "references": [
                "_balances",
                "_owners",
                "usedSignatures"
            ]
        }
    ],
    "setMintConfig(uint256 newPrice, uint256 newMaxSupply)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting new minting configuration.",
            "references": [
                "mintPrice",
                "maxSupply"
            ]
        }
    ],
    "setMintingActive(bool active)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting minting active status.",
            "references": [
                "mintingActive"
            ]
        }
    ],
    "setBaseURI(string _baseUri)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting a new base URI.",
            "references": [
                "baseUri"
            ]
        }
    ],
    "withdrawStrandedETH()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before withdrawing stranded ETH.",
            "references": [
                "value"
            ]
        }
    ],
    "withdrawTokens(address tokenAddress)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before withdrawing tokens.",
            "references": [
                "value"
            ]
        }
    ],
    "transfer(address to, uint256 tokenId)": [
        {
            "potential_checks": "_ownerOf[tokenId] == msg.sender",
            "involved_variables": [
                "msg.sender",
                "tokenId",
                "_ownerOf"
            ],
            "descriptions": "Ensure that the caller is the owner of the token before transferring.",
            "references": [
                "_ownerOf",
                "_balances"
            ]
        }
    ]
}