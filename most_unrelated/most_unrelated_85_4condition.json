{
    "manager() returns (address)": [],
    "renounceManagement()": [
        {
            "specific_checks": "msg.sender == _owner",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Verify ownership before renouncing management",
            "references": [
                "_owner"
            ]
        }
    ],
    "pushManagement(address newOwner_)": [
        {
            "specific_checks": "msg.sender == _owner",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Verify ownership before pushing new management",
            "references": [
                "_newOwner"
            ]
        }
    ],
    "pullManagement()": [
        {
            "specific_checks": "msg.sender == _newOwner",
            "involved_variables": [
                "msg.sender",
                "_newOwner"
            ],
            "descriptions": "Verify caller is designated new owner to claim ownership",
            "references": [
                "_newOwner",
                "_owner"
            ]
        }
    ],
    "permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s)": [
        {
            "specific_checks": "block.timestamp <= deadline",
            "involved_variables": [
                "block.timestamp",
                "deadline"
            ],
            "descriptions": "Ensure permit signature is not expired",
            "references": [
                "_nonces",
                "_allowances"
            ]
        },
        {
            "specific_checks": " signer == owner",
            "involved_variables": [
                "signer",
                "owner",
                "v",
                "r",
                "s"
            ],
            "descriptions": "Validate EIP-2612 permit signature authenticity",
            "references": [
                "_nonces",
                "_allowances"
            ]
        }
    ],
    "nonces(address owner) returns (uint256)": [],
    "name() returns (string)": [],
    "symbol() returns (string)": [],
    "decimals() returns (uint8)": [],
    "totalSupply() returns (uint256)": [],
    "balanceOf(address account) returns (uint256)": [],
    "transfer(address recipient, uint256 amount) returns (bool)": [],
    "allowance(address owner, address spender) returns (uint256)": [],
    "approve(address spender, uint256 amount) returns (bool)": [],
    "transferFrom(address sender, address recipient, uint256 amount) returns (bool)": [
        {
            "potential_checks": "_allowances[sender][msg.sender] >= amount",
            "involved_variables": [
                "sender",
                "msg.sender",
                "amount",
                "_allowances"
            ],
            "descriptions": "Ensure that the sender has enough allowance to transfer the specified amount.",
            "references": [
                "_allowances",
                "_balances"
            ]
        }
    ],
    "increaseAllowance(address spender, uint256 addedValue) returns (bool)": [],
    "decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)": [],
    "initialize(address stakingContract_) returns (bool)": [
        {
            "potential_checks": "msg.sender == initializer",
            "involved_variables": [
                "msg.sender",
                "initializer"
            ],
            "descriptions": "Ensure that the caller is the initializer before proceeding with initialization.",
            "references": [
                "initializer",
                "stakingContract_",
                "_gonBalances"
            ]
        }
    ],
    "setIndex(uint256 _INDEX) returns (bool)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting the index.",
            "references": [
                "INDEX"
            ]
        }
    ],
    "rebase(uint256 profit_, uint256 epoch_) returns (uint256)": [
        {
            "potential_checks": "msg.sender == stakingContract",
            "involved_variables": [
                "stakingContract",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the staking contract before proceeding with rebase.",
            "references": [
                "_gonsPerFragment",
                "_totalSupply"
            ]
        }
    ],
    "balanceOf(address who) returns (uint256)": [],
    "gonsForBalance(uint256 amount) returns (uint256)": [],
    "balanceForGons(uint256 gons) returns (uint256)": [],
    "circulatingSupply() returns (uint256)": [],
    "index() returns (uint256)": [],
    "transfer(address to, uint256 value) returns (bool)": [],
    "allowance(address owner_, address spender) returns (uint256)": [],
    "transferFrom(address from, address to, uint256 value) returns (bool)": [
        {
            "potential_checks": "_allowances[from][msg.sender] >= value",
            "involved_variables": [
                "from",
                "msg.sender",
                "value",
                "_allowances"
            ],
            "descriptions": "Ensure that the spender has enough allowance to transfer from the account.",
            "references": [
                "_allowances",
                "_balances"
            ]
        }
    ],
    "approve(address spender, uint256 value) returns (bool)": []
}