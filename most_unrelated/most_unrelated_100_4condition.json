{
    "setMaxTransferAmount(uint256 amount)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Only the owner can set the maximum transfer amount.",
            "references": ["_maxTransferAmount"]
        }
    ],
    "setRestrictionActive(bool active)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Only the owner can activate or deactivate restrictions.",
            "references": ["_restrictionActive"]
        }
    ],
    "unthrottleAccount(address account, bool unthrottled)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Only the owner can unthrottle accounts.",
            "references": ["_isUnthrottled"]
        }
    ],
    "isUnthrottled(address account) returns (bool)": [],
    "whitelistAccount(address account, bool whitelisted)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Only the owner can whitelist accounts.",
            "references": ["_isWhitelisted"]
        }
    ],
    "isWhitelisted(address account) returns (bool)": [],
    "owner() returns (address)": [],
    "renounceOwnership()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Only the owner can renounce ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "transferOwnership(address newOwner)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Only the owner can transfer ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "transferOutBlacklistedFunds(address[] from)": [
        {
            "potential_checks": "msg.sender == address(lossless)",
            "involved_variables": [
                "msg.sender",
                "lossless"
            ],
            "descriptions": "Only the lossless contract can transfer out blacklisted funds.",
            "references": [
                "_balances",
                "totalAmount"
            ]
        }
    ],
    "setLosslessAdmin(address newAdmin)": [
        {
            "potential_checks": "msg.sender == recoveryAdmin",
            "involved_variables": [
                "msg.sender",
                "recoveryAdmin"
            ],
            "descriptions": "Only the recovery admin can set a new lossless admin.",
            "references": [
                "admin"
            ]
        }
    ],
    "transferRecoveryAdminOwnership(address candidate, bytes32 keyHash)": [
        {
            "potential_checks": "msg.sender == recoveryAdmin",
            "involved_variables": [
                "recoveryAdmin",
                "msg.sender"
            ],
            "descriptions": "Only the recovery admin can transfer ownership.",
            "references": [
                "recoveryAdminCandidate",
                "recoveryAdminKeyHash"
            ]
        }
    ],
    "acceptRecoveryAdminOwnership(bytes key)": [
        {
            "potential_checks": "msg.sender == recoveryAdminCandidate",
            "involved_variables": [
                "msg.sender",
                "recoveryAdminCandidate"
            ],
            "descriptions": "Only the recovery admin candidate can accept ownership.",
            "references": [
                "recoveryAdmin",
                "recoveryAdminCandidate"
            ]
        },
        {
            "potential_checks": "keccak256(bytes)(key) == recoveryAdminKeyHash",
            "involved_variables": [
                "recoveryAdminKeyHash",
                "key"
            ],
            "descriptions": "The key must match the stored hash.",
            "references": [
                "recoveryAdmin",
                "recoveryAdminCandidate"
            ]
        }
    ],
    "proposeLosslessTurnOff()": [
        {
            "potential_checks": "msg.sender == recoveryAdmin",
            "involved_variables": [
                "msg.sender",
                "recoveryAdmin"
            ],
            "descriptions": "Only the recovery admin can propose a lossless turn off.",
            "references": [
                "losslessTurnOffTimestamp"
            ]
        }
    ],
    "executeLosslessTurnOff()": [
        {
            "potential_checks": "msg.sender == recoveryAdmin",
            "involved_variables": [
                "msg.sender",
                "recoveryAdmin"
            ],
            "descriptions": "Only the recovery admin can execute a lossless turn off.",
            "references": [
                "isLosslessOn",
                "losslessTurnOffTimestamp"
            ]
        }
    ],
    "executeLosslessTurnOn()": [
        {
            "potential_checks": "msg.sender == recoveryAdmin",
            "involved_variables": [
                "msg.sender",
                "recoveryAdmin"
            ],
            "descriptions": "Only the recovery admin can execute a lossless turn on.",
            "references": [
                "isLosslessOn",
                "losslessTurnOffTimestamp"
            ]
        }
    ],
    "getAdmin() returns (address)": [],
    "name() returns (string)": [],
    "symbol() returns (string)": [],
    "decimals() returns (uint8)": [],
    "totalSupply() returns (uint256)": [],
    "balanceOf(address account) returns (uint256)": [],
    "transfer(address recipient, uint256 amount) returns (bool)": [
       
        {
            "potential_checks": "_restrictionActive && ! _isUnthrottled[recipient] && ! _isUnthrottled[msg.sender]",
            "involved_variables": [
                "_restrictionActive",
                "recipient",
                "_isUnthrottled",
                "msg.sender"
            ],
            "descriptions": "Restriction is active and neither the recipient nor the sender is unthrottled.",
            "references": [
                "_balances"
            ]
        }
    ],
    "allowance(address owner, address spender) returns (uint256)": [],
    "approve(address spender, uint256 amount) returns (bool)": [
    ],
    "transferFrom(address sender, address recipient, uint256 amount) returns (bool)": [
        {
            "potential_checks": "_restrictionActive && ! _isUnthrottled[recipient] && ! _isUnthrottled[sender]",
            "involved_variables": [
                "_restrictionActive",
                "recipient",
                "_isUnthrottled",
                "sender"
            ],
            "descriptions": "Restriction is active and neither the recipient nor the sender is unthrottled.",
            "references": [
                "_balances"
            ]
        },
        {
            "potential_checks": "_allowances[sender][msg.sender] >= amount",
            "involved_variables": [
                "_allowances",
                "amount",
                "sender",
                "msg.sender"
            ],
            "descriptions": "The allowance for the sender by the spender must be greater than or equal to the amount being transferred.",
            "references": [
                "_allowances",
                "_balances"
            ]
        }
    ],
    "increaseAllowance(address spender, uint256 addedValue) returns (bool)": [

    ],
    "decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)": [
      
    ],
    "burn(uint256 amount)": [

    ],
    "burnFrom(address account, uint256 amount)": [
                {
            "potential_checks": "_allowances[sender][msg.sender] >= amount",
            "involved_variables": [
                "_allowances",
                "amount",
                "sender",
                "msg.sender"
            ],
            "descriptions": "The allowance for the sender by the spender must be greater than or equal to the amount being burned.",
            "references": [
                "_allowances",
                "_balances",
                "_totalSupply"
            ]
        }
    ]
}