{
    "proxiableUUID() returns (bytes32)": [],
    "upgradeTo(address newImplementation)": [
        {  
        "potential_checks": "hasRole(DEFAULT_ADMIN_ROLE, msg.sender)",  
        "involved_variables": ["_roles","msg.sender"],  
        "descriptions": "Restrict upgrades to admin.",  
        "references": ["implementation"]  
        }  
    ],
    "upgradeToAndCall(address newImplementation, bytes data)": [
        {  
        "potential_checks": "hasRole(DEFAULT_ADMIN_ROLE, msg.sender)",  
        "involved_variables": ["_roles","msg.sender"],  
        "descriptions": "Restrict upgrades to admin.",  
        "references": ["implementation"]  
        }  
    ],
    "burn(uint256 amount)": [

    ],
    "burnFrom(address account, uint256 amount)": [
        {
            "potential_checks": "_allowances[account][msg.sender] >= amount",
            "involved_variables": [
                "msg.sender",
                "currentAllowance",
                "amount",
                "account"
            ],
            "descriptions": "Ensure spender has sufficient allowance.",
            "references": ["_allowances", "_balances"]
        }
    ],
    "name() returns (string)": [],
    "symbol() returns (string)": [],
    "decimals() returns (uint8)": [],
    "totalSupply() returns (uint256)": [],
    "balanceOf(address account) returns (uint256)": [],
    "transfer(address to, uint256 amount) returns (bool)": [],
    "allowance(address owner, address spender) returns (uint256)": [],
    "approve(address spender, uint256 amount) returns (bool)": [],
    "transferFrom(address from, address to, uint256 amount) returns (bool)": [
                {
            "potential_checks": "_allowances[account][msg.sender] >= amount",
            "involved_variables": [
                "msg.sender",
                "currentAllowance",
                "amount",
                "account"
            ],
            "descriptions": "Ensure spender has sufficient allowance.",
            "references": ["_allowances", "_balances"]
        }
    ],
    "increaseAllowance(address spender, uint256 addedValue) returns (bool)": [],
    "decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)": [
    ],
    "permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)": [
        {  
            "potential_checks": "block.timestamp <= deadline",  
            "involved_variables": ["deadline", "block.timestamp"],  
            "descriptions": "Ensure permit is not expired.",  
            "references": ["_allowances"]  
            },  
            {  
            "potential_checks": "signer == owner",  
            "involved_variables": ["signer", "owner", "v", "r", "s"],  
            "descriptions": "Verify ECDSA signature matches token owner.",  
            "references": ["_allowances"]  
            }  
    ],
    "nonces(address owner) returns (uint256)": [],
    "DOMAIN_SEPARATOR() returns (bytes32)": [],
    "eip712Domain() returns (bytes1, string, string, uint256, address, bytes32, uint256[])": [],
    "supportsInterface(bytes4 interfaceId) returns (bool)": [],
    "hasRole(bytes32 role, address account) returns (bool)": [],
    "getRoleAdmin(bytes32 role) returns (bytes32)": [],
    "grantRole(bytes32 role, address account)": [
        {  
        "potential_checks": "hasRole(getRoleAdmin(role), msg.sender)",  
        "involved_variables": ["_roles", "msg.sender"],  
        "descriptions": "Restrict to role's admin.",  
        "references": ["_roles"]  
        }  
    ],
    "revokeRole(bytes32 role, address account)": [
        {  
        "potential_checks": "hasRole(getRoleAdmin(role), msg.sender)",  
        "involved_variables": ["_roles", "msg.sender"],  
        "descriptions": "Restrict to role's admin.",  
        "references": ["_roles"]  
        }
    ],
    "renounceRole(bytes32 role, address account)": [
        {  
        "potential_checks": "account == msg.sender",  
        "involved_variables": ["account", "msg.sender"],  
        "descriptions": "Restrict renouncing to self.",  
        "references": ["_roles"]  
        }  
    ],
    "initialize(string _name, string _symbol, uint8 _decimal)": [

    ],
    "mint(address to, uint256 amount)": [
        {
            "potential_checks": "hasRole(MINTER_ROLE, msg.sender)",
            "involved_variables": [
                "_roles",
                "msg.sender"
            ],
            "descriptions": "Restrict minting to MINTER_ROLE.",
            "references": [
                "_balances",
                "_totalSupply"
            ]
        }
    ]
}