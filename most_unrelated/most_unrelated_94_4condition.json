{
    "paused() returns (bool)": [],
    "owner() returns (address)": [],
    "renounceOwnership()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before renouncing ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "transferOwnership(address newOwner)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before transfer ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "pancakeV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes data)": [
        {
            "potential_checks": "CallbackValidation.verifyCallback(pancakeFactoryV3, tokenIn, tokenOut, fee)",
            "involved_variables": ["pancakeFactoryV3", "tokenIn", "tokenOut", "fee"],
            "descriptions": "Validate callback caller is an authentic PancakeSwap V3 pool.",
            "references": []
            }
    ],
    "uniswapV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes data)": [
        {
  "potential_checks": "CallbackValidation.verifyCallback(factoryV3, tokenIn, tokenOut, fee)",
  "involved_variables": ["factoryV3", "tokenIn", "tokenOut", "fee"],
  "descriptions": "Validate callback caller is an authentic Uniswap V3 pool.",
  "references": []
}
    ],
    "initialize(address _factoryV3, address _pancakeFactoryV3, address _WETH, address _feeCollector, uint256 _feeRate)": [],
    "buyMemeToken(address tokenManager, address token, address recipient, uint256 funds, uint256 minAmount) returns (uint256)": [
        {
        "potential_checks": "tokenManager == address(0xEC4549caDcE5DA21Df6E6422d448034B5233bFbC) || tokenManager == address(0x5c952063c7fc8610FFDB798152D69F0B9550762b)",
        "involved_variables": ["tokenManager"],
        "descriptions": "Restrict to authorized token managers only.",
        "references": ["balance"]
        }
    ],
    "sellMemeToken(address tokenManager, address token, address recipient, uint256 tokenAmount) returns (uint256)": [
      
    ],
    "swapV2ExactIn(address tokenIn, address tokenOut, uint256 amountIn, uint256 amountOutMin, address poolAddress) returns (uint256)": [

    ],
    "swapV2ExactOut(address tokenIn, address tokenOut, uint256 amountInMax, uint256 amountOut, address poolAddress) returns (uint256)": [
      
    ],
    "swapV2MultiHopExactIn(address tokenIn, uint256 amountIn, uint256 amountOutMin, address[] path, address recipient, uint256 deadline, address factory) returns (uint256[])": [

    ],
    "swapV2MultiHopExactOut(address tokenIn, uint256 amountInMax, uint256 amountOut, address[] path, address recipient, uint256 deadline, address factory) returns (uint256[])": [],
    "uniswapV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes _data)": [
        {
  "potential_checks": "CallbackValidation.verifyCallback(factoryV3, tokenIn, tokenOut, fee)",
  "involved_variables": ["factoryV3", "tokenIn", "tokenOut", "fee"],
  "descriptions": "Validate callback caller is an authentic Uniswap V3 pool.",
  "references": []
}
    ],
    "pancakeV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes _data)": [
        {
  "potential_checks": "CallbackValidation.verifyCallback(pancakeFactoryV3, tokenIn, tokenOut, fee)",
  "involved_variables": ["pancakeFactoryV3", "tokenIn", "tokenOut", "fee"],
  "descriptions": "Validate callback caller is an authentic PancakeSwap V3 pool.",
  "references": []
}
    ],
    "swapV3ExactIn(SwapX.ExactInputSingleParams params) returns (uint256)": [],
    "swapV3ExactOut(SwapX.ExactOutputSingleParams params) returns (uint256)": [],
    "swapV3MultiHopExactIn(SwapX.ExactInputParams params) returns (uint256)": [],
    "swapV3MultiHopExactOut(SwapX.ExactOutputParams params) returns (uint256)": [],
    "swapMixedMultiHopExactIn(SwapX.ExactInputMixedParams params) returns (uint256)": [],
    "getPool(address tokenA, address tokenB, uint24 fee) returns (IUniswapV3Pool)": [],
    "pause()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before pausing the contract.",
            "references": ["_paused"]
        }
    ],
    "unpause()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before unpausing the contract.",
            "references": [
                "_paused"
            ]
        }
    ],
    "setWETH(address addr)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting WETH address.",
            "references": ["WETH"]
        }
    ],
    "setFeeRate(uint256 rate)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting fee rate.",
            "references": [
                "feeRate"
            ]
        }
    ],
    "setFeeCollector(address addr)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting fee collector address.",
            "references": ["feeCollector"]
        }
    ],
    "rescueERC20Token(address token, address recipient)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before rescuing ERC20 tokens.",
            "references": [
                "balance"
            ]
        }
    ],
    "withdrawETH(address recipient)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before withdrawing ETH.",
            "references": ["balance"]
        }
    ]
}