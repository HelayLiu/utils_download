{
    "totalSupply() returns (uint256)": [],
    "supportsInterface(bytes4 interfaceId) returns (bool)": [],
    "balanceOf(address owner) returns (uint256)": [],
    "ownerOf(uint256 tokenId) returns (address)": [],
    "name() returns (string)": [],
    "symbol() returns (string)": [],
    "tokenURI(uint256 tokenId) returns (string)": [],
    "approve(address to, uint256 tokenId)": [],
    "getApproved(uint256 tokenId) returns (address)": [],
    "setApprovalForAll(address operator, bool approved)": [],
    "isApprovedForAll(address owner, address operator) returns (bool)": [],
    "transferFrom(address from, address to, uint256 tokenId)": [
        {
            "potential_checks": "msg.sender == from || _operatorApprovals[from][msg.sender] || _tokenApprovals[tokenId] == msg.sender",
            "involved_variables": [
                "from",
                "tokenId",
                "msg.sender",
                "_operatorApprovals",
                "_tokenApprovals"
            ],
            "descriptions": "Ensure that the caller is either the owner, an approved operator, or has been granted approval for the specific token.",
            "references": [
                "_balances",
                "_owners"
            ]
        }
    ],
    "safeTransferFrom(address from, address to, uint256 tokenId)": [
                {
            "potential_checks": "msg.sender == from || _operatorApprovals[from][msg.sender] || _tokenApprovals[tokenId] == msg.sender",
            "involved_variables": [
                "from",
                "tokenId",
                "msg.sender",
                "_operatorApprovals",
                "_tokenApprovals"
            ],
            "descriptions": "Ensure that the caller is either the owner, an approved operator, or has been granted approval for the specific token.",
            "references": [
                "_balances",
                "_owners"
            ]
        }
    ],
    "safeTransferFrom(address from, address to, uint256 tokenId, bytes _data)": [
            {
            "potential_checks": "msg.sender == from || _operatorApprovals[from][msg.sender] || _tokenApprovals[tokenId] == msg.sender",
            "involved_variables": [
                "from",
                "tokenId",
                "msg.sender",
                "_operatorApprovals",
                "_tokenApprovals"
            ],
            "descriptions": "Ensure that the caller is either the owner, an approved operator, or has been granted approval for the specific token.",
            "references": [
                "_balances",
                "_owners"
            ]
        }
    ],
    "safeTransferFrom(address from, address to, uint256 tokenId, bytes data)": [
            {
            "potential_checks": "msg.sender == from || _operatorApprovals[from][msg.sender] || _tokenApprovals[tokenId] == msg.sender",
            "involved_variables": [
                "from",
                "tokenId",
                "msg.sender",
                "_operatorApprovals",
                "_tokenApprovals"
            ],
            "descriptions": "Ensure that the caller is either the owner, an approved operator, or has been granted approval for the specific token.",
            "references": [
                "_balances",
                "_owners"
            ]
        }
    ],
    "multicall(bytes[] data) returns (bytes[])": [],
    "isTrustedForwarder(address forwarder) returns (bool)": [],
    "claim(address _receiver, uint256 _quantity, address _currency, uint256 _pricePerToken, IDrop.AllowlistProof _allowlistProof, bytes _data)": [
        {
        "potential_checks": "_currentIndex + quantity <= nextTokenIdToLazyMint",
        "involved_variables": ["_currentIndex", "nextTokenIdToLazyMint","_quantity"],
        "descriptions": "Ensure claimed tokens are within lazy-minted range.",
        "references": ["claimCondition"]
        },
        {
        "potential_checks": "verifyClaim(activeConditionId, _dropMsgSender(), _quantity, _currency, _pricePerToken, _allowlistProof)",
        "involved_variables": ["activeConditionId","_dropMsgSender()","_quantity","_currency","_pricePerToken","_allowlistProof"],
        "descriptions": "Validate claim against active claim phase rules.",
        "references": ["claimCondition"]
        }
    ],
    "setClaimConditions(IClaimCondition.ClaimCondition[] _conditions, bool _resetClaimEligibility)": [
        {
        "potential_checks": "hasRole(DEFAULT_ADMIN_ROLE, msg.sender)",
        "involved_variables": ["msg.sender","_hasRole"],
        "descriptions": "Verify msg.sender is admin to set claim conditions.",
        "references": ["claimCondition"]
        }
    ],
    "verifyClaim(uint256 _conditionId, address _claimer, uint256 _quantity, address _currency, uint256 _pricePerToken, IDrop.AllowlistProof _allowlistProof) returns (bool)": [

    ],
    "getActiveClaimConditionId() returns (uint256)": [

    ],
    "getClaimConditionById(uint256 _conditionId) returns (IClaimCondition.ClaimCondition)": [],
    "getSupplyClaimedByWallet(uint256 _conditionId, address _claimer) returns (uint256)": [],
    "claim(address receiver, uint256 quantity, address currency, uint256 pricePerToken, IDrop.AllowlistProof allowlistProof, bytes data)": [],
    "setClaimConditions(IClaimCondition.ClaimCondition[] phases, bool resetClaimEligibility)": [
                {
        "potential_checks": "hasRole(DEFAULT_ADMIN_ROLE, msg.sender)",
        "involved_variables": ["msg.sender","_hasRole"],
        "descriptions": "Verify msg.sender is admin to set claim conditions.",
        "references": ["claimCondition"]
        }
    ],
    "getRoleMember(bytes32 role, uint256 index) returns (address)": [],
    "getRoleMemberCount(bytes32 role) returns (uint256)": [],
    "hasRole(bytes32 role, address account) returns (bool)": [],
    "hasRoleWithSwitch(bytes32 role, address account) returns (bool)": [],
    "getRoleAdmin(bytes32 role) returns (bytes32)": [],
    "grantRole(bytes32 role, address account)": [
        {
            "potential_checks": "_hasRole[_getRoleAdmin[role]][msg.sender]",
            "involved_variables": [
                "_hasRole",
                "msg.sender",
                "role"
            ],
            "descriptions": "Only the admin of the role can grant it.",
            "references": [
                "_hasRole"
            ]
        }
    ],
    "revokeRole(bytes32 role, address account)": [
        {
            "potential_checks": "_hasRole[_getRoleAdmin[role]][msg.sender]",
            "involved_variables": [
                "_hasRole",
                "msg.sender",
                "role"
            ],
            "descriptions": "Only the admin of the role can revoke it.",
            "references": [
                "_hasRole"
            ]
        }
    ],
    "renounceRole(bytes32 role, address account)": [
        {
            "potential_checks": "msg.sender == account",
            "involved_variables": [
                "msg.sender",
                "account"
            ],
            "descriptions": "Only the account itself can renounce its role.",
            "references": [
                "_hasRole"
            ]
        }
    ],
    "lazyMint(uint256 _amount, string _baseURIForTokens, bytes _data) returns (uint256)": [
        {
        "potential_checks": "hasRole(minterRole, msg.sender)",
        "involved_variables": ["msg.sender","_hasRole","minterRole"],
        "descriptions": "Verify msg.sender has minter role to lazy mint.",
        "references": ["nextTokenIdToLazyMint","batchIds","baseURI"]
        }
    ],
    "getBaseURICount() returns (uint256)": [],
    "getBatchIdAtIndex(uint256 _index) returns (uint256)": [],
    "lazyMint(uint256 amount, string baseURIForTokens, bytes extraData) returns (uint256)": [
        {
        "potential_checks": "hasRole(minterRole, msg.sender)",
        "involved_variables": ["msg.sender","_hasRole","minterRole"],
        "descriptions": "Verify msg.sender has minter role to lazy mint.",
        "references": ["nextTokenIdToLazyMint","batchIds","baseURI"]
        }
    ],
    "getRevealURI(uint256 _batchId, bytes _key) returns (string)": [
        {
            "potential_checks": "keccak256(bytes)(abi.encodePacked(revealedURI,_key,block.chainid)) == provenanceHash",
            "involved_variables": [
                "revealedURI",
                "_key",
                "block.chainid"
            ],
            "descriptions": "Ensure the key matches the hash of the revealed URI and chain ID and the provenance is store in hash.",
            "references": ["encryptedData"]
        }
    ],
    "encryptDecrypt(bytes data, bytes key) returns (bytes)": [],
    "isEncryptedBatch(uint256 _batchId) returns (bool)": [],
    "reveal(uint256 identifier, bytes key) returns (string)": [
        {
        "potential_checks": "hasRole(metadataRole, msg.sender)",
        "involved_variables": ["msg.sender","_hasRole","metadataRole"],
        "descriptions": "Verify msg.sender has metadata role to reveal URI.",
        "references": ["encryptedData"]
        }
    ],
    "owner() returns (address)": [],
    "setOwner(address _newOwner)": [
        {
            "potential_checks": "msg.sender == _owner",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is the current owner before changing ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "primarySaleRecipient() returns (address)": [],
    "setPrimarySaleRecipient(address _saleRecipient)": [
        {
        "potential_checks": "hasRole(DEFAULT_ADMIN_ROLE, msg.sender)",
        "involved_variables": ["msg.sender"],
        "descriptions": "Verify msg.sender is admin to set primary sale recipient.",
        "references": ["recipient"]
        }
    ],
    "royaltyInfo(uint256 tokenId, uint256 salePrice) returns (address, uint256)": [],
    "getRoyaltyInfoForToken(uint256 _tokenId) returns (address, uint16)": [],
    "getDefaultRoyaltyInfo() returns (address, uint16)": [],
    "setDefaultRoyaltyInfo(address _royaltyRecipient, uint256 _royaltyBps)": [
        {
            "potential_checks": "hasRole(DEFAULT_ADMIN_ROLE, msg.sender)",
            "involved_variables": [
                "msg.sender",
                "_hasRole"
            ],
            "descriptions": "Only the admin can set the default royalty info.",
            "references": [
                "_royaltyRecipient",
                "_royaltyBps"
            ]
        }
    ],
    "setRoyaltyInfoForToken(uint256 _tokenId, address _recipient, uint256 _bps)": [
        {
            "potential_checks": "hasRole(DEFAULT_ADMIN_ROLE, msg.sender)",
            "involved_variables": [
                "msg.sender",
                "_hasRole"
            ],
            "descriptions": "Only the admin can set the royalty info for a specific token.",
            "references": [
                "royaltyInfoForToken"
            ]
        }
    ],
    "setRoyaltyInfoForToken(uint256 tokenId, address recipient, uint256 bps)": [
        {
            "potential_checks": "hasRole(DEFAULT_ADMIN_ROLE, msg.sender)",
            "involved_variables": [
                "msg.sender",
                "_hasRole"
            ],
            "descriptions": "Only the admin can set the royalty info for a specific token.",
            "references": [
                "royaltyInfoForToken"
            ]
        }
    ],
    "getRoyaltyInfoForToken(uint256 tokenId) returns (address, uint16)": [],
    "getPlatformFeeInfo() returns (address, uint16)": [],
    "getFlatPlatformFeeInfo() returns (address, uint256)": [],
    "getPlatformFeeType() returns (IPlatformFee.PlatformFeeType)": [],
    "setPlatformFeeInfo(address _platformFeeRecipient, uint256 _platformFeeBps)": [
        {
            "potential_checks": "hasRole(DEFAULT_ADMIN_ROLE, msg.sender)",
            "involved_variables": [
                "msg.sender",
                "_hasRole"
            ],
            "descriptions": "Only the admin can set the platform fee info.",
            "references": [
                "platformFeeBps",
                "platformFeeRecipient"
            ]
        }
    ],
    "setFlatPlatformFeeInfo(address _platformFeeRecipient, uint256 _flatFee)": [
        {
            "potential_checks": "hasRole(DEFAULT_ADMIN_ROLE, msg.sender)",
            "involved_variables": [
                "msg.sender",
                "_hasRole"
            ],
            "descriptions": "Only the admin can set the flat platform fee info.",
            "references": [
                "flatPlatformFee",
                "flatPlatformFeeRecipient"
            ]
        }
    ],
    "setPlatformFeeType(IPlatformFee.PlatformFeeType _feeType)": [
        {
            "potential_checks": "hasRole(DEFAULT_ADMIN_ROLE, msg.sender)",
            "involved_variables": [
                "msg.sender",
                "_hasRole"
            ],
            "descriptions": "Only the admin can set the platform fee type.",
            "references": [
                "platformFeeType"
            ]
        }
    ],
    "setContractURI(string _uri)": [
        {
            "potential_checks": "hasRole(DEFAULT_ADMIN_ROLE, msg.sender)",
            "involved_variables": [
                "msg.sender",
                "_hasRole"
            ],
            "descriptions": "Only the admin can set the contract URI.",
            "references": [
                "contractURI"
            ]
        }
    ],
    "contractURI() returns (string)": [],
    "initialize(address _defaultAdmin, string _name, string _symbol, string _contractURI, address[] _trustedForwarders, address _saleRecipient, address _royaltyRecipient, uint128 _royaltyBps, uint128 _platformFeeBps, address _platformFeeRecipient)": [
    
    ],
    "tokenURI(uint256 _tokenId) returns (string)": [

    ],
    "contractType() returns (bytes32)": [],
    "contractVersion() returns (uint8)": [],
    "reveal(uint256 _index, bytes _key) returns (string)": [
        {
            "potential_checks": "hasRole(metadataRole, msg.sender)",
            "involved_variables": [
                "msg.sender",
                "_hasRole"
            ],
            "descriptions": "Only the metadata role can reveal the URI.",
            "references": [
                "encryptedData"
            ]
        }
    ],
    "updateBatchBaseURI(uint256 _index, string _uri)": [
       {
        "potential_checks": "hasRole(metadataRole, msg.sender)",
        "involved_variables": ["msg.sender","_hasRole"],
        "descriptions": "Verify msg.sender has metadata role to update URI.",
        "references": ["baseURI"]
        } 
    ],
    "freezeBatchBaseURI(uint256 _index)": [
        {
            "potential_checks": "hasRole(metadataRole, msg.sender)",
            "involved_variables": [
                "msg.sender",
                "_hasRole"
            ],
            "descriptions": "Only the metadata role can freeze the batch base URI.",
            "references": [
                "batchFrozen"
            ]
        }
    ],
    "setMaxTotalSupply(uint256 _maxTotalSupply)": [
        {
            "potential_checks": "hasRole(DEFAULT_ADMIN_ROLE, msg.sender)",
            "involved_variables": [
                "msg.sender",
                "_hasRole"
            ],
            "descriptions": "Only the admin can set the maximum total supply.",
            "references": [
                "maxTotalSupply"
            ]
        }
    ],
    "totalMinted() returns (uint256)": [],
    "nextTokenIdToMint() returns (uint256)": [],
    "nextTokenIdToClaim() returns (uint256)": [],
    "burn(uint256 tokenId)": [
                {
            "potential_checks": "msg.sender == from || _operatorApprovals[from][msg.sender] || _tokenApprovals[tokenId] == msg.sender",
            "involved_variables": [
                "from",
                "tokenId",
                "msg.sender",
                "_operatorApprovals",
                "_tokenApprovals"
            ],
            "descriptions": "Ensure that the caller is either the owner, an approved operator, or has been granted approval for the specific token.",
            "references": [
                "_balances",
                "_owners"
            ]
        }
    ]
}