{
    "transfer(address _to, uint256 _value) returns (bool)": [
        {
            "potential_checks": "tokenBlacklist[msg.sender] == false",
            "involved_variables": [
                "tokenBlacklist",
                "msg.sender"
            ],
            "descriptions": "Prevent blacklisted users from transferring tokens.",
            "references": [
                "balances"
            ]
        }
    ],
    "transferFrom(address _from, address _to, uint256 _value) returns (bool)": [
        {
            "potential_checks": "tokenBlacklist[msg.sender] == false",
            "involved_variables": [
                "tokenBlacklist",
                "msg.sender"
            ],
            "descriptions": "Prevent blacklisted users from transferring tokens.",
            "references": [
                "balances"
            ]
        },
        {
            "potential_checks": "_value <= allowed[_from][msg.sender]",
            "involved_variables": [
                "allowed",
                "_value",
                "_from",
                "msg.sender"
            ],
            "descriptions": "Ensure that the spender has enough allowance to transfer the specified value.",
            "references": [
                "allowed",
                "balances"
            ]
        }
    ],
    "approve(address _spender, uint256 _value) returns (bool)": [],
    "increaseApproval(address _spender, uint256 _addedValue) returns (bool)": [],
    "decreaseApproval(address _spender, uint256 _subtractedValue) returns (bool)": [
    ],
    "blackListAddress(address listAddress, bool isBlackListed) returns (bool)": [
        {
            "potential_checks": "msg.sender == owner",
            "involved_variables": [
                "owner",
                "msg.sender"
            ],
            "descriptions": "Only the owner can blacklist or unblacklist an address.",
            "references": [
                "tokenBlacklist"
            ]
        }
    ],
    "pause()": [
        {
            "potential_checks": "msg.sender == owner",
            "involved_variables": [
                "msg.sender",
                "owner"
            ],
            "descriptions": "Only the owner can pause the contract.",
            "references": [
                "paused"
            ]
        }
    ],
    "unpause()": [
        {
            "potential_checks": "msg.sender == owner",
            "involved_variables": [
                "msg.sender",
                "owner"
            ],
            "descriptions": "Only the owner can unpause the contract.",
            "references": [
                "paused"
            ]
        }
    ],
    "transferOwnership(address newOwner)": [
        {
            "potential_checks": "msg.sender == owner",
            "involved_variables": [
                "msg.sender",
                "newOwner"
            ],
            "descriptions": "Only the current owner can transfer ownership to a new owner.",
            "references": [
                "owner"
            ]
        }
    ],
    "balanceOf(address _owner) returns (uint256)": [],
    "allowance(address _owner, address _spender) returns (uint256)": [],
    "allowance(address owner, address spender) returns (uint256)": [],
    "transferFrom(address from, address to, uint256 value) returns (bool)": [
        {
            "potential_checks": "tokenBlacklist[from] == false",
            "involved_variables": [
                "tokenBlacklist",
                "from"
            ],
            "descriptions": "Prevent blacklisted users from transferring tokens.",
            "references": [
                "balances"
            ]
        },
        {
            "potential_checks": "value <= allowed[from][msg.sender]",
            "involved_variables": [
                "allowed",
                "value",
                "from",
                "msg.sender"
            ],
            "descriptions": "Ensure that the spender has enough allowance to transfer the specified value.",
            "references": [
                "allowed",
                "balances"
            ]
        }
    ],
    "approve(address spender, uint256 value) returns (bool)": [],
    "balanceOf(address who) returns (uint256)": [],
    "transfer(address to, uint256 value) returns (bool)": [
        {
            "potential_checks": "tokenBlacklist[msg.sender] == false",
            "involved_variables": [
                "tokenBlacklist",
                "msg.sender"
            ],
            "descriptions": "Prevent blacklisted users from transferring tokens.",
            "references": [
                "balances"
            ]
        }
    ],
    "burn(uint256 _value)": [
    ],
    "updateFee(uint256 _txFee, uint256 _burnFee, address _FeeAddress)": [
        {
            "potential_checks": "msg.sender == owner",
            "involved_variables": [
                "msg.sender",
                "owner"
            ],
            "descriptions": "",
            "references": [
                "txFee",
                "burnFee"
            ]
        }
    ],
    "mint(address account, uint256 amount)": [
        {
            "potential_checks": "msg.sender == owner",
            "involved_variables": [
                "msg.sender",
                "owner"
            ],
            "descriptions": "Only the owner can mint new tokens.",
            "references": [
                "balances",
                "totalSupply"
            ]
        }
    ]
}