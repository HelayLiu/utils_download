{
    "owner() returns (address)": [],
    "renounceOwnership()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before renouncing ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "transferOwnership(address newOwner)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before transfer ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "supportsInterface(bytes4 interfaceId) returns (bool)": [],
    "royaltyInfo(uint256 tokenId, uint256 salePrice) returns (address, uint256)": [],
    "totalSupply() returns (uint256)": [],
    "balanceOf(address owner) returns (uint256)": [],
    "name() returns (string)": [],
    "symbol() returns (string)": [],
    "tokenURI(uint256 tokenId) returns (string)": [],
    "ownerOf(uint256 tokenId) returns (address)": [],
    "approve(address to, uint256 tokenId)": [],
    "getApproved(uint256 tokenId) returns (address)": [],
    "setApprovalForAll(address operator, bool approved)": [],
    "isApprovedForAll(address owner, address operator) returns (bool)": [],
    "transferFrom(address from, address to, uint256 tokenId)": [
        {
            "potential_checks":"_owners[tokenId] == msg.sender || operatorApprovals[_owners[tokenId]][msg.sender] ||_tokenApprovals[tokenId]",
            "involved_variables": [
                "_owners",
                "msg.sender",
                "operatorApprovals",
                "owner",
                "_tokenApprovals",
                "tokenId"
            ],
            "descriptions": "Ensure that the caller is either the owner of the token, an approved operator, or has a specific token approval.",
            "references": [
                "_owners",
                "_balances"
            ]
        }
    ],
    "safeTransferFrom(address from, address to, uint256 tokenId)": [
        {
            "potential_checks":"_owners[tokenId] == msg.sender || operatorApprovals[_owners[tokenId]][msg.sender] ||_tokenApprovals[tokenId]",
            "involved_variables": [
                "_owners",
                "msg.sender",
                "operatorApprovals",
                "owner",
                "_tokenApprovals",
                "tokenId"
            ],
            "descriptions": "Ensure that the caller is either the owner of the token, an approved operator, or has a specific token approval.",
            "references": [
                "_owners",
                "_balances"
            ]
        }
    ],
    "safeTransferFrom(address from, address to, uint256 tokenId, bytes _data)": [
        {
            "potential_checks":"_owners[tokenId] == msg.sender || operatorApprovals[_owners[tokenId]][msg.sender] ||_tokenApprovals[tokenId]",
            "involved_variables": [
                "_owners",
                "msg.sender",
                "operatorApprovals",
                "owner",
                "_tokenApprovals",
                "tokenId"
            ],
            "descriptions": "Ensure that the caller is either the owner of the token, an approved operator, or has a specific token approval.",
            "references": [
                "_owners",
                "_balances"
            ]
        }
    ],
    "safeTransferFrom(address from, address to, uint256 tokenId, bytes data)": [
        {
            "potential_checks":"_owners[tokenId] == msg.sender || operatorApprovals[_owners[tokenId]][msg.sender] ||_tokenApprovals[tokenId]",
            "involved_variables": [
                "_owners",
                "msg.sender",
                "operatorApprovals",
                "owner",
                "_tokenApprovals",
                "tokenId"
            ],
            "descriptions": "Ensure that the caller is either the owner of the token, an approved operator, or has a specific token approval.",
            "references": [
                "_owners",
                "_balances"
            ]
        }
    ],
    "setApprovalForAll(address operator, bool _approved)": [],
    "mintLive() returns (bool)": [
    ],
    "setNewMaxPerMintGroup(uint256 mintId, uint256 newMax)": [
        {
            "potential_checks": "msg.sender == _owner",
            "involved_variables": ["msg.sender","_owner"],
            "descriptions": "Restrict mint group updates to contract owner.",
            "references": ["maxSupplyPerMintGroup"]
        }
    ],
    "setMintQuota(address[] addressToAdd, uint256 mintId, uint256[] _mintQuotas)": [
        {
            "potential_checks": "msg.sender == _owner",
            "involved_variables": ["msg.sender","_owner"],
            "descriptions": "Restrict mint quota updates to contract owner.",
            "references": ["mintQuotas"]
        }
    ],
    "stopOrStartpresaleMint(bool presaleStatus, uint256 mintId)": [
        {
            "potential_checks": "msg.sender == _owner",
            "involved_variables": ["msg.sender","_owner"],
            "descriptions": "Restrict presale status updates to contract owner.",
            "references": ["contractPresaleActive"]
        }
    ],
    "schedulePresaleMintStart(uint256 startTimestamp, uint256 mintId)": [
        {
            "potential_checks": "msg.sender == _owner",
            "involved_variables": ["msg.sender","_owner"],
            "descriptions": "Restrict presale start scheduling to contract owner.",
            "references": ["presaleScheduledStartTimestamp"]
        }
    ],
    "presaleActive(uint256 mintId) returns (bool)": [
    ],
    "setMaxMintPerWallet(uint256 newMaxMintPerWallet, uint256 mintGroupId)": [
        {
            "potential_checks": "msg.sender == _owner",
            "involved_variables": ["msg.sender","_owner"],
            "descriptions": "Restrict max mint per wallet updates to contract owner.",
            "references": ["maxMintPerWallet"]
        }
    ],
    "changeSalePrice(uint256 newmintPrice, uint256 mintId)": [
        {
            "potential_checks": "msg.sender == _owner",
            "involved_variables": ["msg.sender","_owner"],
            "descriptions": "Restrict mintPrice updates to contract owner.",
            "references": ["mintPrice"]
        }        
    ],
    "airdropNFTs(address[] recipients, uint256[] amounts) returns (uint256)": [
        {
            "potential_checks": "msg.sender == _owner",
            "involved_variables": ["msg.sender","_owner"],
            "descriptions": "Restrict airdropNFTs to contract owner.",
            "references": ["pendingBalances","totalCharge", "_balances"]
        }          
    ],
    "canMintCheck(uint256 amount, uint256 mintId, address minterAddress) returns (bool, string)": [
    ],
    "batchMint(uint256 amount, uint256 mintId) returns (uint256)": [
        {
            "potential_checks": "amount + addressMints[msg.sender][mintId] <= maxMintPerWallet[mintId]",
            "involved_variables": ["addressMints", "maxMintPerWallet", "msg.sender", "mintId", "amount"],
            "descriptions": "Enforce per-wallet mint limit.",
            "references": ["addressMints", "totalCostWithFee"]
        }
    ],
    "canDelegateMintCheck(uint256 amount, uint256 mintId, address vault, address minterAddress) returns (bool, string)": [
    ],
    "delegatedMint(uint256 amount, uint256 mintId, address vault) returns (uint256)": [
        {
            "potential_checks": "IDelegateRegistry.checkDelegateForContract(msg.sender, vault, address(this))",
            "involved_variables": ["msg.sender", "vault", "this"],
            "descriptions": "Verify caller has delegation rights for the vault.",
            "references": ["addressMints", "maxMintPerWallet"]
        },
        {
            "potential_checks": "amount + addressMints[vault][mintId] <= maxMintPerWallet[mintId]",
            "involved_variables": ["addressMints", "maxMintPerWallet", "vault", "mintId", "amount"],
            "descriptions": "Enforce per-wallet mint limit for vault.",
            "references": ["addressMints", "maxMintPerWallet"]
        }
    ],
    "quoteBatchMint(uint256 mintId, uint256 amount) returns (uint256, uint256)": [],
    "quoteAirdropFees(uint256 amount) returns (uint256)": [],
    "changeMintStatus(bool status)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before changing mint status.",
            "references": [
                "contractMintLive"
            ]
        }
    ],
    "setMintLiveTimestamp(uint256 timestamp)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting mint live timestamp.",
            "references": [
                "scheduledMintLiveTimestamp"
            ]
        }
    ],
    "setBaseURI(string newBaseURI)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting the base URI.",
            "references": [
                "baseURI"
            ]
        }
    ],
    "withdrawMintFunds()": [

    ],
    "withdrawFeeFunds()": [
    ],
    "checkPendingBalance() returns (uint256)": [],
    "checkPendingBalanceFor(address user) returns (uint256)": [],
    "setNewKingdomlyFeeContract(KingdomlyFeeContract _kingdomlyFeeContract)": [
        {
            "potential_checks": "msg.sender == kingdomlyAdmin",
            "involved_variables": [
                "kingdomlyAdmin",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the kingdomly admin before setting a new KingdomlyFeeContract.",
            "references": [
                "kingdomlyFeeContract"
            ]
        }
    ],
    "getKingdomlyFeeContract() returns (KingdomlyFeeContract)": [],
    "threeDollarsEth() returns (uint256)": []
}