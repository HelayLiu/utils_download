{
    "owner() returns (address)": [],
    "renounceOwnership()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before renouncing ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "transferOwnership(address newOwner)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before transfer ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "totalSupply() returns (uint256)": [],
    "decimals() returns (uint8)": [],
    "symbol() returns (string)": [],
    "name() returns (string)": [],
    "getOwner() returns (address)": [],
    "balanceOf(address account) returns (uint256)": [],
    "transfer(address recipient, uint256 amount) returns (bool)": [

    ],
    "allowance(address _owner, address spender) returns (uint256)": [],
    "approve(address spender, uint256 amount) returns (bool)": [],
    "transferFrom(address sender, address recipient, uint256 amount) returns (bool)": [
        {
            "potential_checks": "_allowances[sender][msg.sender] >= amount",
            "involved_variables": [
                "sender",
                "msg.sender",
                "amount",
                "_allowances"
            ],
            "descriptions": "Ensure that the spender has enough allowance to transfer from the sender.",
            "references": [
                "_allowances",
                "_balances",
                "_totalSupply"
            ]
        }
    ],
    "allowance(address owner, address spender) returns (uint256)": [],
    "increaseAllowance(address spender, uint256 addedValue) returns (bool)": [],
    "decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)": [],
    "burn(uint256 amount) returns (bool)": [],
    "upisstop() returns (bool)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is the current owner before checking if the contract is stopped.",
            "references": [
                "isstop"
            ]
        }
    ],
    "upisopenbuy() returns (bool)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is the current owner before checking if open buy is enabled.",
            "references": [
                "isopenbuy"
            ]
        }
    ],
    "showisopenbuy() returns (uint256)": [],
    "showisstop() returns (uint256)": [],
    "addwhiteaddresss(address[] _acc)": [
        {
            "potential_checks": "msg.sender == safeaddress",
            "involved_variables": [
                "msg.sender",
                "safeaddress"
            ],
            "descriptions": "Ensure that the caller is the safe address before adding to the whitelist.",
            "references": [
                "_whiteaddress"
            ]
        }
    ],
    "removewhiteaddress(address[] _acc)": [
        {
            "potential_checks": "msg.sender == safeaddress",
            "involved_variables": [
                "msg.sender",
                "safeaddress"
            ],
            "descriptions": "Ensure that the caller is the safe address before removing from the whitelist.",
            "references": [
                "_whiteaddress"
            ]
        }
    ],
    "getlpall() returns (uint256)": [],
    "autoapprovetoken(address token, address to) returns (bool)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before auto approving token transfers.",
            "references": [
                "_allowances"
            ]
        }
    ]
}