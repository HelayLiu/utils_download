{
    "proxiableUUID() returns (bytes32)": [],
    "upgradeTo(address newImplementation)": [
        {
            "potential_checks": "hasRole(OWNER_ROLE, msg.sender)",
            "involved_variables": [
                "msg.sender",
                "_roles"
            ],
            "descriptions": "Ensure that the caller has the OWNER_ROLE before upgrading the implementation.",
            "references": [
                "_IMPLEMENTATION_SLOT"
            ]
        }
    ],
    "upgradeToAndCall(address newImplementation, bytes data)": [
                {
            "potential_checks": "hasRole(OWNER_ROLE, msg.sender)",
            "involved_variables": [
                "msg.sender",
                "_roles"
            ],
            "descriptions": "Ensure that the caller has the OWNER_ROLE before upgrading the implementation.",
            "references": [
                "_IMPLEMENTATION_SLOT"
            ]
        }
    ],
    "supportsInterface(bytes4 interfaceId) returns (bool)": [],
    "hasRole(bytes32 role, address account) returns (bool)": [],
    "getRoleAdmin(bytes32 role) returns (bytes32)": [],
    "grantRole(bytes32 role, address account)": [
        {  
        "potential_checks": "hasRole(getRoleAdmin(role), msg.sender)",  
        "involved_variables": ["msg.sender", "_roles"],  
        "descriptions": "Verify caller has admin role for `role`.",  
        "references": ["_roles"]  
        }  
    ],
    "revokeRole(bytes32 role, address account)": [
        {  
        "potential_checks": "hasRole(getRoleAdmin(role), msg.sender)",  
        "involved_variables": ["msg.sender", "_roles"],  
        "descriptions": "Verify caller has admin role for `role`.",  
        "references": ["_roles"]  
        }  
    ],
    "renounceRole(bytes32 role, address account)": [
        {  
        "potential_checks": "account == msg.sender",  
        "involved_variables": ["account", "msg.sender"],  
        "descriptions": "Ensure account renouncing role is the caller.",  
        "references": ["_roles"]  
        }          
    ],
    "paused() returns (bool)": [],
    "name() returns (string)": [],
    "symbol() returns (string)": [],
    "decimals() returns (uint8)": [],
    "totalSupply() returns (uint256)": [],
    "balanceOf(address account) returns (uint256)": [],
    "transfer(address to, uint256 amount) returns (bool)": [],
    "allowance(address owner, address spender) returns (uint256)": [],
    "approve(address spender, uint256 amount) returns (bool)": [],
    "transferFrom(address from, address to, uint256 amount) returns (bool)": [
        {  
        "potential_checks": "_allowances[from][msg.sender] >= amount",  
        "involved_variables": ["_allowances", "from", "msg.sender", "amount"],  
        "descriptions": "Ensure spender has sufficient allowance.",  
        "references": ["_allowances","_balances"]  
        }
    ],
    "increaseAllowance(address spender, uint256 addedValue) returns (bool)": [],
    "decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)": [
    ],
    "cap() returns (uint256)": [],
    "initialize(string tokenName, string tokenSymbol, uint256 maxSupply, address owner, address distributor)": [
    ],
    "mint(address to, uint256 amount)": [
        {
            "potential_checks": "hasRole(MINTER_ROLE,msg.sender)",
            "involved_variables": [
                "msg.sender",
                "_roles"
            ],
            "descriptions": "Ensure that the caller has the MINTER_ROLE before minting tokens.",
            "references": [
                "_balances",
                "_totalSupply"
            ]
        }
    ],
    "burn(uint256 amount)": [
        {
            "potential_checks": "hasRole(BURNER_ROLE,msg.sender)",
            "involved_variables": [
                "msg.sender",
                "_roles"
            ],
            "descriptions": "Ensure that the caller has the BURNER_ROLE before burning tokens.",
            "references": [
                "_balances",
                "_totalSupply"
            ]
        }
    ],
    "pause()": [
        {
            "potential_checks": "hasRole(OWNER_ROLE,msg.sender)",
            "involved_variables": [
                "msg.sender",
                "_roles"
            ],
            "descriptions": "Ensure that the caller has the OWNER_ROLE before pausing the contract.",
            "references": [
                "_paused"
            ]
        }
    ],
    "unpause()": [
        {
            "potential_checks": "hasRole(OWNER_ROLE,msg.sender)",
            "involved_variables": [
                "msg.sender",
                "_roles"
            ],
            "descriptions": "Ensure that the caller has the OWNER_ROLE before pausing the contract.",
            "references": [
                "_paused"
            ]
        }
    ]
}