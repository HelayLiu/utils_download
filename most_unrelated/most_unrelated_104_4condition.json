{
    "pendingOwner() returns (address)": [],
    "renounceOwnership()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before renouncing ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "transferOwnership(address newOwner)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before transfer ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "acceptOwnership()": [
        {
            "potential_checks": "pendingOwner == msg.sender",
            "involved_variables": [
                "pendingOwner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the pending owner before accepting ownership.",
            "references": [
                "pendingOwner"
            ]
        }
    ],
    "owner() returns (address)": [],
    "paused() returns (bool)": [],
    "pause()": [
        {
            "potential_checks": "msg.sender == _owner",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Allows only owner to pause contract",
            "references": [
                "_paused"
            ]
        }
    ],
    "unpause()": [
        {
            "potential_checks": "msg.sender == _owner",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Allows only owner to unpause contract",
            "references": [
                "_paused"
            ]
        }
    ],
    "allowContract(address _addr)": [
        {
            "potential_checks": "msg.sender == _owner",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Allows only owner to allow a contract",
            "references": [
                "_allowedContracts"
            ]
        }
    ],
    "disallowContract(address _addr)": [
        {
            "potential_checks": "msg.sender == _owner",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Allows only owner to disallow a contract",
            "references": [
                "_allowedContracts"
            ]
        }
    ],
    "__importLegacyGlobalShares(uint256 _start, uint256 _end)": [
        {
            "potential_checks": "msg.sender == _owner",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Allows only owner to import legacy global shares",
            "references": [
                "totalDailyShares"
            ]
        }
    ],
    "getUserDockComposition(address _user) returns (MINING.dockCompData)": [],
    "getUserDockCompositionAndUpdate(address _user) returns (MINING.dockCompData)": [],
    "submit(string _tkn, address _owner, uint256[] _tokensId, uint256[] data, uint256[] workouts, uint256 _day) returns (bool)": [
        {
            "potential_checks": "dockCon.isOwnerOfAll(_owner, _tokensId)",
            "involved_variables": [
                "_owner",
                "_tokensId"
            ],
            "descriptions": "Authenticate user ownership of all submitted tokens.",
            "references": [
                "submittedByOwner",
                "totalDailyShares",
                "dailySubmissions",
                "submittedByDock",
                "submittedByOwner",
                "submitted",
                "usedData"
            ]
        },
        {
            "potential_checks": "msg.value >= (_fees)",
            "involved_variables": [
                "msg.value",
                "_fees"
            ],
            "descriptions": "Ensure that the value sent with the transaction is sufficient to cover the fees.",
            "references": [
                "submittedByOwner",
                "totalDailyShares",
                "dailySubmissions",
                "submittedByDock",
                "submittedByOwner",
                "submitted",
                "usedData"
            ]
        },
        {
            "potential_checks": "keccak256(abi.encodePacked(_tkn)) == tknHash",
            "involved_variables": [
                "tknHash",
                "_tkn"
            ],
            "descriptions": "Ensure that the token hash matches the expected value and the tknHash should store the hash of the token string.",
            "references": [
                "submittedByOwner",
                "totalDailyShares",
                "dailySubmissions",
                "submittedByDock",
                "submittedByOwner",
                "submitted",
                "usedData",
                "tknHash"
            ]
        }
    ],
    "claim(string _tkn, address _owner) returns (bool)": [
        {
            "potential_checks": "keccak256(abi.encodePacked(_tkn)) == tknHash",
            "involved_variables": [
                "tknHash",
                "_tkn"
            ],
            "descriptions": "Ensure that the token hash matches the expected value and the tknHash should store the hash of the token string.",
            "references": [
                "tknHash",
                "claimed",
                "submitted",
                "dayClaimed"
            ]
        }
    ],
    "claimWithTokens(string _tkn, address _owner, address[] tokens) returns (bool)": [
        {
            "potential_checks": "keccak256(abi.encodePacked(_tkn)) == tknHash",
            "involved_variables": [
                "tknHash",
                "_tkn"
            ],
            "descriptions": "Ensure that the token hash matches the expected value and the tknHash should store the hash of the token string.",
            "references": [
                "tknHash",
                "claimed",
                "submitted",
                "dayClaimed"
            ]
        }
    ],
    "addDailyShares(uint32 _day, uint256 _shares)": [
        {
            "potential_checks": "allowedContracts[msg.sender] == true",
            "involved_variables": [
                "allowedContracts",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is an allowed contract before adding daily shares.",
            "references": [
                "totalDailyShares"
            ]
        }
    ],
    "isAlreadySubmitted(address _owner, uint256 _days) returns (bool)": [],
    "isAlreadySubmittedByMiner(uint256 _tkn, uint256 _day) returns (bool)": [],
    "getInvalidMinersToSubmit(uint256[] _tkns, uint256 _day) returns (uint256[])": [],
    "getPendingClaimsNbr(address _owner) returns (uint256)": [],
    "getPendingClaims(address _owner) returns (MINING.submittedData[])": [],
    "getSubmissionsPerDay(uint256 _day, uint256 _length) returns (MINING.submittedPerDay[])": [],
    "getSubPerDay(address _owner, uint32 _days) returns (MINING.shareData)": [],
    "getClaimPerDay(address _owner, uint32 _days) returns (MINING.shareData)": [],
    "getDate() returns (uint256)": [],
    "getTime() returns (uint256)": [],
    "SetTimeZoneOffset(int256 _value)": [
        {
            "potential_checks": "msg.sender == _owner",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Allows only owner to set the time zone offset.",
            "references": [
                "_timeZoneOffset"
            ]
        }
    ],
    "getDayShares(uint256 _day) returns (uint256)": [],
    "simulateShares(uint256[] tokensId, uint256[] data, uint256[] workouts) returns (uint256)": [],
    "isValidDateToSubmit(uint256 _days) returns (bool)": [],
    "isValidDateToMine(uint256 _days) returns (bool)": [],
    "getAirdropsPerDay() returns (IAirdrops.dailyDistribution[])": [],
    "getAirdropsActive() returns (address[])": [],
    "trackId(address _owner, uint256 _days) returns (bytes)": [],
    "dataFprint(uint256 _days, uint256[] data, uint256[] workouts) returns (bytes)": [],
    "getMaxClaimDays() returns (uint256)": [],
    "getTokenValueTier() returns (uint256)": [],
    "getSubFees(uint256[] tokensId) returns (uint256, uint256)": [],
    "getClaimFees(uint256 _days) returns (uint256, uint256)": [],
    "setusdTokenAddress(address _addr)": [
        {
            "potential_checks": "msg.sender == _owner",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Allows only owner to set the USD token address.",
            "references": [
                "usdToken"
            ]
        }
    ],
    "setwrappedCoinAddress(address _addr)": [
        {
            "potential_checks": "msg.sender == _owner",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Allows only owner to set the wrapped coin address.",
            "references": [
                "wrappedCoin"
            ]
        }
    ],
    "settokenPricingCon(address _addr)": [
        {
            "potential_checks": "msg.sender == _owner",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Allows only owner to set the token pricing contract address.",
            "references": [
                "tokenPricingCon"
            ]
        }
    ],
    "setLegacyContract(address _addr)": [
        {
            "potential_checks": "msg.sender == _owner",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Allows only owner to set the legacy contract address.",
            "references": [
                "legacyCon"
            ]
        }
    ],
    "setActivitiesContract(address _addr)": [
        {
            "potential_checks": "msg.sender == _owner",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Allows only owner to set the activities contract address.",
            "references": [
                "activitiesCon"
            ]
        }
    ],
    "setdockContract(address _addr)": [
        {
            "potential_checks": "msg.sender == _owner",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Allows only owner to set the dock contract address.",
            "references": [
                "dockCon"
            ]
        }
    ],
    "setFeesContract(address _addr)": [
        {
            "potential_checks": "msg.sender == _owner",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Allows only owner to set the fees contract address.",
            "references": [
                "feesCon"
            ]
        }
    ],
    "setLogsContract(address _addr)": [
        {
            "potential_checks": "msg.sender == _owner",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Allows only owner to set the logs contract address.",
            "references": [
                "logsCon"
            ]
        }
    ],
    "setLeaseContract(address _addr)": [
        {
            "potential_checks": "msg.sender == _owner",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Allows only owner to set the lease contract address.",
            "references": [
                "leaseCon"
            ]
        }
    ],
    "setAirdropsContract(address _addr)": [
        {
            "potential_checks": "msg.sender == _owner",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Allows only owner to set the airdrops contract address.",
            "references": [
                "airdropsCon"
            ]
        }
    ],
    "setTknHash(string _str)": [
        {
            "potential_checks": "msg.sender == _owner",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Allows only owner to set the token hash.",
            "references": [
                "tknHash"
            ]
        },
        {
            "potential_checks": "tknHash = keccak256(abi.encodePacked(_str)",
            "involved_variables": [
                "tknHash",
                "_str"
            ],
            "descriptions": "Ensure that the token hash is set correctly by hashing the provided string.",
            "references": [
                "tknHash"
            ]
        }
    ],
    "setStartingDate(uint256 _days)": [
        {
            "potential_checks": "msg.sender == _owner",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Allows only owner to set the starting date.",
            "references": [
                "startingDate"
            ]
        }
    ],
    "setUniqueCheck(bool _v)": [
        {
            "potential_checks": "msg.sender == _owner",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Allows only owner to set the unique check flag.",
            "references": [
                "checkDataUnique"
            ]
        }
    ],
    "setDaysBuffer(uint256 _days)": [
        {
            "potential_checks": "msg.sender == _owner",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Allows only owner to set the days buffer.",
            "references": [
                "daysBuffer"
            ]
        }
    ],
    "getDaysBuffer() returns (uint256)": [],
    "getBalance() returns (uint256)": [],
    "withdraw()": [
        {
            "potential_checks": "msg.sender == _owner",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Allows only owner to withdraw funds from the contract.",
            "references": [
                "balance"
            ]
        }
    ],
    "withdrawAmount(uint256 _amount)": [
        {
            "potential_checks": "msg.sender == _owner",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Allows only owner to withdraw a specific amount from the contract.",
            "references": [
                "balance"
            ]
        }
    ],
    "transferToken(address _tokenAddress, address addr, uint256 amount) returns (uint256)": [
        {
            "potential_checks": "msg.sender == _owner",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Allows only owner to transfer tokens from the contract.",
            "references": [
                "balance"
            ]
        }
    ]
}