{
    "permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)": [
        {
            "potential_checks": "block.timestamp <= deadline",
            "involved_variables": ["block.timestamp", "deadline"],
            "descriptions": "Ensure permit signature is not expired",
            "references": ["_allowances"]
        },
        {
            "potential_checks": "signer == owner",
            "involved_variables": ["signer", "owner", "v", "r", "s"],
            "descriptions": "Verify signature matches token owner",
            "references": ["_allowances"]
        }
    ],
    "nonces(address owner) returns (uint256)": [],
    "DOMAIN_SEPARATOR() returns (bytes32)": [],
    "eip712Domain() returns (bytes1, string, string, uint256, address, bytes32, uint256[])": [],
    "name() returns (string)": [],
    "symbol() returns (string)": [],
    "decimals() returns (uint8)": [],
    "totalSupply() returns (uint256)": [],
    "balanceOf(address account) returns (uint256)": [],
    "transfer(address to, uint256 amount) returns (bool)": [],
    "allowance(address owner, address spender) returns (uint256)": [],
    "approve(address spender, uint256 amount) returns (bool)": [],
    "transferFrom(address from, address to, uint256 amount) returns (bool)": [
        {
            "potential_checks": "_allowances[from][msg.sender] >= amount",
            "involved_variables": [
                "_allowances",
                "from",
                "msg.sender",
                "amount"
            ],
            "descriptions": "Verify spender allowance covers transfer amount to isolate unauthorized access.",
            "references": [
                "_balances"
            ]
        }
    ],
    "increaseAllowance(address spender, uint256 addedValue) returns (bool)": [],
    "decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)": [
    ],
    "setLockbox(address _lockbox)": [
        {
            "potential_checks": "msg.sender == FACTORY",
            "involved_variables": ["msg.sender", "FACTORY"],
            "descriptions": "Restrict lockbox setup to factory",
            "references": ["lockbox"]
        }
    ],
    "setLimits(address _bridge, uint256 _mintingLimit, uint256 _burningLimit)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": ["msg.sender", "_owner"],
            "descriptions": "Enforce owner-only limit configuration",
            "references": ["bridges"]
        }
    ],
    "mintingMaxLimitOf(address _minter) returns (uint256)": [],
    "burningMaxLimitOf(address _bridge) returns (uint256)": [],
    "mintingCurrentLimitOf(address _minter) returns (uint256)": [],
    "burningCurrentLimitOf(address _bridge) returns (uint256)": [
    ],
    "mint(address _user, uint256 _amount)": [
        {
        "potential_checks": "_currentLimit >= _amount",
        "involved_variables": ["_currentLimit", "_amount"],
        "descriptions": "Enforce bridge minting limits",
        "references": ["bridges"]
    }
    ],
    "burn(address _user, uint256 _amount)": [
        {
            "potential_checks": "msg.sender != _user && _allowance[_user][msg.sender] < _amount",
            "involved_variables": [
                "_amount",
                "_user",
                "msg.sender",
                "_allowance"
            ],
            "descriptions": "Ensure user has sufficient allowance for burn",
            "references": [
                "_balances",
                "totalSupply"
            ]
        }
    ],
    "owner() returns (address)": [],
    "renounceOwnership()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before renouncing ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "transferOwnership(address newOwner)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before transfer ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "initialize(string _name, string _symbol, address _factory)": [
    ],
    "mintingMaxLimitOf(address _bridge) returns (uint256)": [],
    "mintingCurrentLimitOf(address _bridge) returns (uint256)": [
    ]
}