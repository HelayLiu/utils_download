{
    "approveAndCall(address spender, uint256 value, bytes data) returns (bool)": [],
    "transferAndCall(address to, uint256 value, bytes data) returns (bool)": [
    ],
    "permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s)": [
        {
            "potential_checks": "block.timestamp <= deadline",
            "involved_variables": [
                "deadline",
                "block.timestamp"
            ],
            "descriptions": "Ensure that the deadline has not passed before allowing the permit.",
            "references": ["allowance"]
        },
        {
            "potential_checks": "verifyEIP712(owner, spender, amount, deadline, v, r, s) || verifyPersonalSign(owner, spender, amount, deadline, v, r, s) == False",
            "involved_variables": [
                "owner",
                "spender",
                "amount",
                "v",
                "r",
                "s"
            ],
            "descriptions": "Ensure that the signature is valid for the permit.",
            "references": ["allowance"]
        }
    ],
    "nonces(address owner) returns (uint256)": [],
    "totalSupply() returns (uint256)": [],
    "balanceOf(address account) returns (uint256)": [],
    "transfer(address recipient, uint256 amount) returns (bool)": [],
    "allowance(address owner, address spender) returns (uint256)": [],
    "approve(address spender, uint256 amount) returns (bool)": [],
    "transferFrom(address sender, address recipient, uint256 amount) returns (bool)": [
        {
        "potential_checks": "allowance[from][msg.sender] >= value",
        "involved_variables": ["allowance", "value", "from", "msg.sender"],
        "descriptions": "Verify spender's allowance is sufficient.",
        "references": ["balanceOf", "allowance"]
        }
    ],
    "owner() returns (address)": [
    ],
    "changeDCRMOwner(address newOwner) returns (bool)": [
        {
            "potential_checks": "msg.sender == _oldOwner",
            "involved_variables": [
                "msg.sender",
                "_oldOwner"
            ],
            "descriptions": "Ensure that the caller is the current owner before changing ownership.",
            "references": [
                "_newOwner"
            ]
        }
    ],
    "Swapin(bytes32 txhash, address account, uint256 amount) returns (bool)": [
        {
            "potential_checks": "msg.sender == _oldOwner || msg.sender == _newOwner",
            "involved_variables": [
                "msg.sender",
                "_oldOwner",
                "_newOwner"
            ],
            "descriptions": "Ensure that the caller is either the old or new owner before processing the swap-in.",
            "references": [
                "balanceOf",
                "_totalSupply"
            ]
        }
    ],
    "Swapout(uint256 amount, address bindaddr) returns (bool)": [],
    "approve(address spender, uint256 value) returns (bool)": [],
    "permit(address target, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)": [
        {
            "potential_checks": "block.timestamp <= deadline",
            "involved_variables": [
                "deadline",
                "block.timestamp"
            ],
            "descriptions": "Ensure that the deadline has not passed before allowing the permit.",
            "references": ["allowance"]
        },
        {
            "potential_checks": "verifyEIP712(owner, spender, amount, deadline, v, r, s) || verifyPersonalSign(owner, spender, amount, deadline, v, r, s) == False",
            "involved_variables": [
                "owner",
                "spender",
                "amount",
                "v",
                "r",
                "s"
            ],
            "descriptions": "Ensure that the signature is valid for the permit.",
            "references": ["allowance"]
        }
    ],
    "transferWithPermit(address target, address to, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns (bool)": [
        {
            "potential_checks": "block.timestamp <= deadline",
            "involved_variables": [
                "deadline",
                "block.timestamp"
            ],
            "descriptions": "Ensure that the deadline has not passed before allowing the permit.",
            "references": ["allowance"]
        },
        {
            "potential_checks": "verifyEIP712(owner, spender, amount, deadline, v, r, s) || verifyPersonalSign(owner, spender, amount, deadline, v, r, s) == False",
            "involved_variables": [
                "owner",
                "spender",
                "amount",
                "v",
                "r",
                "s"
            ],
            "descriptions": "Ensure that the signature is valid for the permit.",
            "references": ["allowance"]
        }
    ],
    "transfer(address to, uint256 value) returns (bool)": [
    ],
    "transferFrom(address from, address to, uint256 value) returns (bool)": [
        {
        "potential_checks": "allowance[from][msg.sender] >= value",
        "involved_variables": ["allowance", "value", "from", "msg.sender"],
        "descriptions": "Verify spender's allowance is sufficient.",
        "references": ["balanceOf", "allowance"]
        }
    ]
}