{
    "owner() returns (address)": [],
    "renounceOwnership()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before renouncing ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "transferOwnership(address newOwner)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before transfer ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "paused() returns (bool)": [
        {
            "potential_checks": "msg.sender == _owner",
            "involved_variables": ["msg.sender", "_owner"],
            "descriptions": "Restrict unpause to contract owner.",
            "references": ["_paused"]
        }
    ],
    "burn(uint256 amount)": [
    ],
    "burnFrom(address account, uint256 amount)": [
        {
            "potential_checks": "_allowances[account][msg.sender] >= amount",
            "involved_variables": [
                "account",
                "msg.sender",
                "amount"
            ],
            "descriptions": "Ensure that the spender has enough allowance to burn tokens from the account.",
            "references": [
                "_allowances",
                "_balances"
            ]
        }
    ],
    "name() returns (string)": [],
    "symbol() returns (string)": [],
    "decimals() returns (uint8)": [],
    "totalSupply() returns (uint256)": [],
    "balanceOf(address account) returns (uint256)": [],
    "transfer(address recipient, uint256 amount) returns (bool)": [],
    "allowance(address owner, address spender) returns (uint256)": [],
    "approve(address spender, uint256 amount) returns (bool)": [],
    "transferFrom(address sender, address recipient, uint256 amount) returns (bool)": [
        {
            "potential_checks": "_allowances[account][msg.sender] >= amount",
            "involved_variables": [
                "account",
                "msg.sender",
                "amount"
            ],
            "descriptions": "Ensure that the spender has enough allowance to transfer tokens from the account.",
            "references": [
                "_allowances",
                "_balances"
            ]
        }
    ],
    "increaseAllowance(address spender, uint256 addedValue) returns (bool)": [],
    "decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)": [
    ],
    "pause()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before pausing the contract.",
            "references": [
                "_paused"
            ]
        }
    ],
    "unpause()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before unpausing the contract.",
            "references": [
                "_paused"
            ]
        }
    ],
    "airdropACTIVE(address[] recipients, uint256[] tokenAmount) returns (bool)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before executing the airdrop.",
            "references": [
                "_balances"
            ]
        }
    ]
}