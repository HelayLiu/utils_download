{
    "supportsInterface(bytes4 interfaceId) returns (bool)": [],
    "uri(uint256 ) returns (string)": [],
    "balanceOf(address account, uint256 id) returns (uint256)": [],
    "balanceOfBatch(address[] accounts, uint256[] ids) returns (uint256[])": [],
    "setApprovalForAll(address operator, bool approved)": [],
    "isApprovedForAll(address account, address operator) returns (bool)": [],
    "safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data)": [
        {
        "specific_checks": "from == msg.sender || isApprovedForAll(from, msg.sender)",
        "involved_variables": ["from", "msg.sender", "_isApprovedForAll"],
        "descriptions": "Verify msg.sender owns tokens or is approved operator.",
        "references": ["_balances"]
        },
        {
        "specific_checks": "hasRole(transferRole, from) || hasRole(transferRole, to) || hasRole(transferRole, address(0))",
        "involved_variables": ["_hasRole", "to", "from"],
        "descriptions": "Verify from/to has TRANSFER_ROLE when transfers are restricted.",
        "references": ["_balances"]
}
    ],
    "safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data)": [
                {
        "specific_checks": "from == msg.sender || isApprovedForAll(from, msg.sender)",
        "involved_variables": ["from", "msg.sender", "_isApprovedForAll"],
        "descriptions": "Verify msg.sender owns tokens or is approved operator.",
        "references": ["_balances"]
        },
        {
        "specific_checks": "hasRole(transferRole, from) || hasRole(transferRole, to) || hasRole(transferRole, address(0))",
        "involved_variables": ["_hasRole", "to", "from"],
        "descriptions": "Verify from/to has TRANSFER_ROLE when transfers are restricted.",
        "references": ["_balances"]
}
    ],
    "uri(uint256 id) returns (string)": [],
    "multicall(bytes[] data) returns (bytes[])": [],
    "isTrustedForwarder(address forwarder) returns (bool)": [],
    "claim(address _receiver, uint256 _tokenId, uint256 _quantity, address _currency, uint256 _pricePerToken, IDrop1155.AllowlistProof _allowlistProof, bytes _data)": [
        {
            ""
        }
    ],
    "setClaimConditions(uint256 _tokenId, IClaimCondition.ClaimCondition[] _conditions, bool _resetClaimEligibility)": [
 
    ],
    "verifyClaim(uint256 _conditionId, address _claimer, uint256 _tokenId, uint256 _quantity, address _currency, uint256 _pricePerToken, IDrop1155.AllowlistProof _allowlistProof) returns (bool)": [

    ],
    "getActiveClaimConditionId(uint256 _tokenId) returns (uint256)": [
    ],
    "getClaimConditionById(uint256 _tokenId, uint256 _conditionId) returns (IClaimCondition.ClaimCondition)": [],
    "getSupplyClaimedByWallet(uint256 _tokenId, uint256 _conditionId, address _claimer) returns (uint256)": [],
    "claim(address receiver, uint256 tokenId, uint256 quantity, address currency, uint256 pricePerToken, IDrop1155.AllowlistProof allowlistProof, bytes data)": [],
    "setClaimConditions(uint256 tokenId, IClaimCondition.ClaimCondition[] phases, bool resetClaimEligibility)": [],
    "getRoleMember(bytes32 role, uint256 index) returns (address)": [],
    "getRoleMemberCount(bytes32 role) returns (uint256)": [],
    "hasRole(bytes32 role, address account) returns (bool)": [],
    "hasRoleWithSwitch(bytes32 role, address account) returns (bool)": [],
    "getRoleAdmin(bytes32 role) returns (bytes32)": [],
    "grantRole(bytes32 role, address account)": [],
    "revokeRole(bytes32 role, address account)": [],
    "renounceRole(bytes32 role, address account)": [],
    "lazyMint(uint256 _amount, string _baseURIForTokens, bytes _data) returns (uint256)": [],
    "getBaseURICount() returns (uint256)": [],
    "getBatchIdAtIndex(uint256 _index) returns (uint256)": [],
    "lazyMint(uint256 amount, string baseURIForTokens, bytes extraData) returns (uint256)": [],
    "owner() returns (address)": [],
    "setOwner(address _newOwner)": [],
    "primarySaleRecipient() returns (address)": [],
    "setPrimarySaleRecipient(address _saleRecipient)": [],
    "royaltyInfo(uint256 tokenId, uint256 salePrice) returns (address, uint256)": [],
    "getRoyaltyInfoForToken(uint256 _tokenId) returns (address, uint16)": [],
    "getDefaultRoyaltyInfo() returns (address, uint16)": [],
    "setDefaultRoyaltyInfo(address _royaltyRecipient, uint256 _royaltyBps)": [],
    "setRoyaltyInfoForToken(uint256 _tokenId, address _recipient, uint256 _bps)": [],
    "setRoyaltyInfoForToken(uint256 tokenId, address recipient, uint256 bps)": [],
    "getRoyaltyInfoForToken(uint256 tokenId) returns (address, uint16)": [],
    "getPlatformFeeInfo() returns (address, uint16)": [],
    "getFlatPlatformFeeInfo() returns (address, uint256)": [],
    "getPlatformFeeType() returns (IPlatformFee.PlatformFeeType)": [],
    "setPlatformFeeInfo(address _platformFeeRecipient, uint256 _platformFeeBps)": [],
    "setFlatPlatformFeeInfo(address _platformFeeRecipient, uint256 _flatFee)": [],
    "setPlatformFeeType(IPlatformFee.PlatformFeeType _feeType)": [],
    "setContractURI(string _uri)": [],
    "contractURI() returns (string)": [],
    "initialize(address _defaultAdmin, string _name, string _symbol, string _contractURI, address[] _trustedForwarders, address _saleRecipient, address _royaltyRecipient, uint128 _royaltyBps, uint128 _platformFeeBps, address _platformFeeRecipient)": [
    ],
    "uri(uint256 _tokenId) returns (string)": [
    ],
    "contractType() returns (bytes32)": [],
    "contractVersion() returns (uint8)": [],
    "setMaxTotalSupply(uint256 _tokenId, uint256 _maxTotalSupply)": [

    ],
    "setSaleRecipientForToken(uint256 _tokenId, address _saleRecipient)": [

    ],
    "updateBatchBaseURI(uint256 _index, string _uri)": [
        
    ],
    "freezeBatchBaseURI(uint256 _index)": [

    ],
    "nextTokenIdToMint() returns (uint256)": [],
    "burnBatch(address account, uint256[] ids, uint256[] values)": [
    ]
}