{
    "totalSupply() returns (uint256)": [],
    "decimals() returns (uint8)": [],
    "symbol() returns (string)": [],
    "name() returns (string)": [],
    "getOwner() returns (address)": [],
    "balanceOf(address account) returns (uint256)": [],
    "transfer(address recipient, uint256 amount) returns (bool)": [
        {
        "potential_checks": "TradingOpen || authorizations[sender] || authorizations[recipient]",
        "involved_variables": ["TradingOpen", "authorizations[sender]", "authorizations[recipient]"],
        "descriptions": "Allows transfers only if trading is enabled or sender/recipient is authorized.",
        "references": ["_allowances","_balances"]
        }
    ],
    "allowance(address _owner, address spender) returns (uint256)": [],
    "approve(address spender, uint256 amount) returns (bool)": [],
    "transferFrom(address sender, address recipient, uint256 amount) returns (bool)": [
        {
        "potential_checks": "amount <= _allowances[sender][msg.sender] || _allowances[sender][msg.sender] == type(uint256).max",
        "involved_variables": ["amount", "_allowances","sender","msg.sender"],
        "descriptions": "Verifies spender has sufficient allowance.",
        "references": ["_allowances","_balances"]
        },
        {
        "potential_checks": "TradingOpen || authorizations[sender] || authorizations[recipient]",
        "involved_variables": ["TradingOpen", "authorizations[sender]", "authorizations[recipient]"],
        "descriptions": "Allows transfers only if trading is enabled or sender/recipient is authorized.",
        "references": ["_allowances","_balances"]
        }
    ],
    "owner() returns (address)": [],
    "renounceOwnership()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before renouncing ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "transferOwnership(address newOwner)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before transfer ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "allowance(address holder, address spender) returns (uint256)": [],
    "approveMax(address spender) returns (bool)": [],
    "maxWalletRule(uint256 maxWallPercent)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting max wallet rule.",
            "references": [
                "_maxWalletToken"
            ]
        }
    ],
    "removeLimits()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before removing limits.",
            "references": [
                "_maxTxAmount",
                "_maxWalletToken"
            ]
        }
    ],
    "manualSend()": [],
    "clearStuckToken(address tokenAddress, uint256 tokens) returns (bool)": [
    ],
    "setStructure(uint256 _percentonbuy, uint256 _percentonsell, uint256 _wallettransfer)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting structure.",
            "references": [
                "sellpercent",
                "buypercent",
                "transferpercent"
            ]
        }
    ],
    "startTrading()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "",
            "references": [
                "sellpercent",
                "buypercent",
                "transferpercent"
            ]
        }
    ],
    "reduceFee()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before reducing fee.",
            "references": [
                "sellpercent",
                "buypercent",
                "transferpercent"
            ]
        }
    ],
    "setParameters(uint256 _liquidityFee, uint256 _buybackFee, uint256 _marketingFee, uint256 _devFee, uint256 _burnFee, uint256 _feeDenominator)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "msg.sender",
                "_owner"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting parameters.",
            "references": [
                "liquidityFee",
                "buybackFee",
                "marketingFee",
                "devFee",
                "burnFee",
                "feeDenominator",
                "totalFee"
            ]
        }
    ],
    "setWallets(address _autoLiquidityReceiver, address _marketingFeeReceiver, address _devFeeReceiver, address _burnFeeReceiver, address _buybackFeeReceiver)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting wallets.",
            "references": [
                "autoLiquidityReceiver",
                "marketingFeeReceiver",
                "devFeeReceiver",
                "burnFeeReceiver",
                "buybackFeeReceiver"
            ]
        }
    ],
    "setSwapBackSettings(bool _enabled, uint256 _amount)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting swap back settings.",
            "references": [
                "swapEnabled",
                "swapThreshold"
            ]
        }
    ],
    "checkRatio(uint256 ratio, uint256 accuracy) returns (bool)": [],
    "showBacking(uint256 accuracy) returns (uint256)": [],
    "showSupply() returns (uint256)": []
}