{
    "existAddress(address wallet) returns (bool)": [
    ],
    "allowedAddresses() returns (address[])": [],
    "setAllowedAddress(address wallet)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Only the owner can set allowed addresses.",
            "references": [
                "_allowedAddresses"
            ]
        }
    ],
    "removeAllowedAddress(address wallet)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Only the owner can remove allowed addresses.",
            "references": [
                "_allowedAddresses"
            ]
        }
    ],
    "mainWallet() returns (address)": [],
    "setMainWallet(address newWallet)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Only the owner can set main wallet.",
            "references": [
                "_mainWallet"
            ]
        }
    ],
    "owner() returns (address)": [],
    "renounceOwnership()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before renouncing ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "transferOwnership(address newOwner)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before transfer ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "burn(uint256 tokenId)": [
        {
            "potential_checks": "_isApprovedOrOwner(msg.sender,tokenId)",
            "involved_variables": [
                "tokenId",
                "msg.sender"
            ],
            "descriptions": "Verifies caller owns or is approved to burn token, updating _owners/_balances.",
            "references": ["_owners", "_balances"]
        }
    ],
    "supportsInterface(bytes4 interfaceId) returns (bool)": [],
    "balanceOf(address owner) returns (uint256)": [],
    "ownerOf(uint256 tokenId) returns (address)": [],
    "name() returns (string)": [],
    "symbol() returns (string)": [],
    "tokenURI(uint256 tokenId) returns (string)": [
    ],
    "approve(address to, uint256 tokenId)": [],
    "getApproved(uint256 tokenId) returns (address)": [],
    "setApprovalForAll(address operator, bool approved)": [],
    "isApprovedForAll(address owner, address operator) returns (bool)": [],
    "transferFrom(address from, address to, uint256 tokenId)": [
        {  
        "potential_checks": "require(_isApprovedOrOwner(_msgSender(), tokenId))",  
        "involved_variables": ["msg.sender", "tokenId"],  
        "descriptions": "Verifies caller is owner/approved before transferring token.",  
        "references": ["_owners", "_tokenApprovals"]  
        }  
    ],
    "safeTransferFrom(address from, address to, uint256 tokenId)": [
        {  
        "potential_checks": "require(_isApprovedOrOwner(_msgSender(), tokenId))",  
        "involved_variables": ["msg.sender", "tokenId"],  
        "descriptions": "Verifies caller is owner/approved before transferring token.",  
        "references": ["_owners", "_tokenApprovals"]  
        }  
    ],
    "safeTransferFrom(address from, address to, uint256 tokenId, bytes data)": [
        {  
        "potential_checks": "require(_isApprovedOrOwner(_msgSender(), tokenId))",  
        "involved_variables": ["msg.sender", "tokenId"],  
        "descriptions": "Verifies caller is owner/approved before transferring token.",  
        "references": ["_owners", "_tokenApprovals"]  
        }  
    ],
    "paused() returns (bool)": [
        {  
        "potential_checks": "msg.sender == _owner",  
        "involved_variables": ["msg.sender", "_owner"],  
        "descriptions": "Allows only owner to pause contract if not already paused.",  
        "references": ["_paused"]  
        }  
    ],
    "tokenOfOwnerByIndex(address owner, uint256 index) returns (uint256)": [],
    "totalSupply() returns (uint256)": [],
    "tokenByIndex(uint256 index) returns (uint256)": [],
    "mint(string itemURI) returns (uint256)": [
        {  
        "potential_checks": "existAllowedAddress(msg.sender) || msg.sender == owner",  
        "involved_variables": ["msg.sender", "_allowedAddresses", "owner"],  
        "descriptions": "Verifies caller is owner/allowed to mint tokens and write to _owners/_tokenURIs.",  
        "references": ["_owners", "_tokenURIs"]  
        }  
    ],
    "update(uint256 tokenId, uint256 fieldId)": [
        {  
        "potential_checks": "existAllowedAddress(msg.sender) || msg.sender == owner",  
        "involved_variables": ["msg.sender", "_allowedAddresses", "owner"],  
        "descriptions": "Verifies caller is owner/allowed to update tokens and write to _owners/_tokenURIs.",  
        "references": ["_owners", "_tokenURIs"]  
        }  
    ],
    "setBaseURI(string baseUri)": [
    {  
        "potential_checks": "existAllowedAddress(msg.sender) || msg.sender == owner",  
        "involved_variables": ["msg.sender", "_allowedAddresses", "owner"],  
        "descriptions": "Verifies caller is owner/allowed to set BaseURI",  
        "references": ["_baseUri"]  
        }  
    ],
    "getBaseURI() returns (string)": [],
    "updateURI(uint256 tokenId, string uri)": [
    {  
        "potential_checks": "existAllowedAddress(msg.sender) || msg.sender == owner",  
        "involved_variables": ["msg.sender", "_allowedAddresses", "owner"],  
        "descriptions": "Verifies caller is owner/allowed to set _tokenURIs",  
        "references": ["_tokenURIs"]  
        }  
    ],
    "pause()": [
        {  
        "potential_checks": "msg.sender == _owner",  
        "involved_variables": ["msg.sender", "_owner"],  
        "descriptions": "Allows only owner to pause contract",  
        "references": ["_paused"]  
        }  
    ],
    "unpause()": [
        {  
        "potential_checks": "msg.sender == _owner",  
        "involved_variables": ["msg.sender", "_owner"],  
        "descriptions": "Allows only owner to unpause contract",  
        "references": ["_paused"]  
        }  
    ],
    "safeMint(address to, string uri)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Only owner can safe mint tokens.",
            "references": [
                "_owners",
                "_tokenURIs"
            ]
        }
    ]
}