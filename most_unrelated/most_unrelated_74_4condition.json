{
    "getOrderStatus(bytes32 orderHash_) returns (OrderStatus)": [],
    "validateOrder(Order order_)": [

    ],
    "cancelOrder(Order order_)": [
    {  
    "potential_checks": "order_.maker == msg.sender",  
    "involved_variables": ["order_", "msg.sender"],  
    "descriptions": "Ensures only the order maker can cancel the order, enforcing write isolation.",  
    "references": ["orderStatus"]  
    }
    ],
    "cancelOrders(Order[] orders_)": [
    {  
    "potential_checks": "order_.maker == msg.sender",  
    "involved_variables": ["order_", "msg.sender"],  
    "descriptions": "Ensures only the order maker can cancel the order, enforcing write isolation.",  
    "references": ["orderStatus"]  
    }
    ],
    "incrementNonce()": [],
    "isValidNonce(address user_, uint256 userNonce_) returns (bool)": [],
    "validateOrderSignature(bytes32 orderHash_, Order order_)": [],
    "getConditionId(uint256 tokenId_) returns (bytes32)": [],
    "getComplement(uint256 tokenId_) returns (uint256)": [],
    "validateTokenId(uint256 tokenId_)": [
    ],
    "validateComplement(uint256 token0_, uint256 token1_)": [],
    "hashOrder(Order order_) returns (bytes32)": [
    ],
    "getMaxFeeRate() returns (uint256)": [],
    "getConditionId(uint256 token_) returns (bytes32)": [],
    "getComplement(uint256 token_) returns (uint256)": [
    ],
    "validateComplement(uint256 token_, uint256 complement_)": [
    ],
    "isValidNonce(address user_, uint256 nonce_) returns (bool)": [],
    "getCollateral() returns (address)": [],
    "getAdapter() returns (address)": [],
    "eip712Domain() returns (bytes1, string, string, uint256, address, bytes32, uint256[])": [],
    "getAuth() returns (address)": [],
    "implementation() returns (address)": [],
    "proxiableUUID() returns (bytes32)": [],
    "upgradeTo(address newImplementation)": [
        {
            "potential_checks": "auth.hasRole(UPGRADER_ROLE,msg.sender)",
            "involved_variables": [
                "auth",
                "UPGRADER_ROLE",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller has the UPGRADER_ROLE before upgrading the implementation.",
            "references": [
                "_IMPLEMENTATION_SLOT"
            ]
        }
    ],
    "upgradeToAndCall(address newImplementation, bytes data)": [
        {
            "potential_checks": "auth.hasRole(UPGRADER_ROLE,msg.sender)",
            "involved_variables": [
                "auth",
                "UPGRADER_ROLE",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller has the UPGRADER_ROLE before upgrading the implementation.",
            "references": [
                "_IMPLEMENTATION_SLOT"
            ]
        }
    ],
    "paused() returns (bool)": [],
    "onERC1155Received(address , address , uint256 , uint256 , bytes ) returns (bytes4)": [],
    "onERC1155BatchReceived(address , address , uint256[] , uint256[] , bytes ) returns (bytes4)": [],
    "supportsInterface(bytes4 interfaceId) returns (bool)": [],
    "onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes data) returns (bytes4)": [],
    "onERC1155BatchReceived(address operator, address from, uint256[] ids, uint256[] values, bytes data) returns (bytes4)": [],
    "__CTFExchange_init(address authModule_, address collateral_, address adapter_, address conditionalTokens_)": [
    ],
    "pauseTrading()": [
        {
            "potential_checks": "auth.hasRole(ADMIN_ROLE,msg.sender)",
            "involved_variables": [
                "auth",
                "ADMIN_ROLE",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller has the ADMIN_ROLE before pausing trading.",
            "references": [
                "_paused"
            ]
        }
    ],
    "unpauseTrading()": [
        {
            "potential_checks": "auth.hasRole(ADMIN_ROLE,msg.sender)",
            "involved_variables": [
                "auth",
                "ADMIN_ROLE",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller has the ADMIN_ROLE before unpausing trading.",
            "references": [
                "_paused"
            ]
        }
    ],
    "fillOrder(Order order_, uint256 fillAmount_)": [
        {
            "potential_checks": "auth.hasRole(OPERATOR_ROLE, msg.sender)",
            "involved_variables": [
                "msg.sender",
                "auth"
            ],
            "descriptions": "Ensure that the caller has the OPERATOR_ROLE before filling the order.",
            "references": [
                "_balances"
            ]
        }
    ],
    "fillOrders(Order[] orders_, uint256[] fillAmounts_)": [
           {
            "potential_checks": "auth.hasRole(OPERATOR_ROLE, msg.sender)",
            "involved_variables": [
                "msg.sender",
                "auth"
            ],
            "descriptions": "Ensure that the caller has the OPERATOR_ROLE before filling the order.",
            "references": [
                "_balances"
            ]
        }
    ],
    "matchOrders(Order takerOrder_, Order[] makerOrders_, uint256 takerFillAmount_, uint256[] makerFillAmounts_)": [
        {
            "potential_checks": "auth.hasRole(OPERATOR_ROLE,msg.sender)",
            "involved_variables": [
                "msg.sender",
                "auth",
                "OPERATOR_ROLE"
            ],
            "descriptions": "Ensure that the caller has the OPERATOR_ROLE before matching orders.",
            "references": [
                "_balances"
            ]
        }
    ],
    "registerToken(uint256 token, uint256 complement, bytes32 conditionId)": [
        {
            "potential_checks": "auth.hasRole(ADMIN_ROLE,msg.sender)",
            "involved_variables": [
                "msg.sender",
                "auth",
                "ADMIN_ROLE"
            ],
            "descriptions": "Ensure that the caller has the ADMIN_ROLE before registering a token.",
            "references": [
                "registry"
            ]
        }
    ]
}