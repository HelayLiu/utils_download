{
    "paused() returns (bool)": [],
    "supportsInterface(bytes4 interfaceId) returns (bool)": [],
    "hasRole(bytes32 role, address account) returns (bool)": [],
    "getRoleAdmin(bytes32 role) returns (bytes32)": [],
    "grantRole(bytes32 role, address account)": [
        {
            "potential_checks": "hasRole(getRoleAdmin(role), msg.sender)",
            "involved_variables":  ["_roles", "msg.sender"],
            "descriptions": "Restrict to role admin",
            "references": [
                "_roles"
            ]
        }
    ],
    "revokeRole(bytes32 role, address account)": [
        {
            "potential_checks": "hasRole(getRoleAdmin(role), msg.sender)",
            "involved_variables": ["_roles", "msg.sender"],
            "descriptions": "Restrict to role admin",
            "references": [
                "_roles"
            ]
        }
    ],
    "renounceRole(bytes32 role, address account)": [
        {
            "potential_checks": "account == msg.sender",
            "involved_variables": ["_roles", "msg.sender"],
            "descriptions": "Allow users to renounce their own roles",
            "references": [
                "_roles"
            ]
        }
    ],
    "deposit(address _receiver, string _referralId) returns (uint256)": [
        {
            "potential_checks": "msg.value >= minDeposit() && msg.value <= maxDeposit()",
            "involved_variables":  ["minDeposit", "maxDeposit", "msg.value"],
            "descriptions": "Ensure deposit amount is within allowed limits",
            "references": ["_balances"]
        }
    ],
    "deposit(address _receiver) returns (uint256)": [
        {
            "potential_checks": "msg.value >= minDeposit() && msg.value <= maxDeposit()",
            "involved_variables":  ["minDeposit", "maxDeposit", "msg.value"],
            "descriptions": "Ensure deposit amount is within allowed limits",
            "references": ["_balances"]
        }
    ],
    "previewDeposit(uint256 _assets) returns (uint256)": [
    ],
    "previewWithdraw(uint256 _shares) returns (uint256)": [
    ],
    "getExchangeRate() returns (uint256)": [],
    "totalAssets() returns (uint256)": [],
    "convertToShares(uint256 _assets) returns (uint256)": [
    ],
    "convertToAssets(uint256 _shares) returns (uint256)": [
    ],
    "maxDeposit() returns (uint256)": [
    ],
    "minDeposit() returns (uint256)": [
    ],
    "receiveExecutionLayerRewards()": [],
    "receiveWithdrawVaultUserShare()": [],
    "receiveEthFromAuction()": [],
    "receiveExcessEthFromPool(uint8 _poolId)": [],
    "transferETHToUserWithdrawManager(uint256 _amount)": [
    {
        "potential_checks": "msg.sender == staderConfig.getUserWithdrawManager()",
        "involved_variables":  ["staderConfig", "msg.sender"],
        "descriptions": "Restrict access to UserWithdrawManager contract",
        "references": ["staderConfig"]
    }
    ],
    "validatorBatchDeposit(uint8 _poolId)": [
        {
            "potential_checks": "poolUtils.isExistingPoolId(_poolId)",
            "involved_variables":  ["poolUtils", "_poolId"],
            "descriptions": "Verify pool ID exists",
            "references": ["staderConfig","poolAddress"]
        },
        {
            "potential_checks": "availableETHForNewDeposit >= poolDepositSize",
            "involved_variables":  ["availableETHForNewDeposit", "poolDepositSize"],
            "descriptions": "Ensure sufficient ETH for deposit",
            "references": ["staderConfig","poolAddress"]
        }
    ],
    "depositETHOverTargetWeight()": [
        {
            "potential_checks": "block.number >= lastExcessETHDepositBlock + excessETHDepositCoolDown",
            "involved_variables":  ["lastExcessETHDepositBlock", "excessETHDepositCoolDown"],
            "descriptions": "Enforce cooldown between excess deposits",
            "references": ["staderConfig"]
        },
        {
            "potential_checks": "availableETHForNewDeposit >= ETH_PER_NODE",
            "involved_variables":  ["availableETHForNewDeposit"],
            "descriptions": "Ensure sufficient ETH for validator allocation",
            "references": ["staderConfig"]
        }
    ],
    "isVaultHealthy() returns (bool)": [],
    "initialize(address _admin, address _staderConfig)": [
 
    ],
    "updateExcessETHDepositCoolDown(uint256 _excessETHDepositCoolDown)": [
        {
            "potential_checks": "hasRole(MANAGER_ROLE, msg.sender)",
            "involved_variables":  ["_roles","msg.sender"],
            "descriptions": "Restrict to manager role",
            "references": ["excessETHDepositCoolDown"]
        }
    ],
    "updateStaderConfig(address _staderConfig)": [
        {
            "potential_checks": "hasRole(DEFAULT_ADMIN_ROLE, msg.sender)",
            "involved_variables": ["_roles","msg.sender"],
            "descriptions": "Restrict to admin role",
            "references": ["staderConfig"]
        }
    ],
    "pause()": [
        {
            "potential_checks": "hasRole(MANAGER_ROLE, msg.sender)",
            "involved_variables":  ["_roles","msg.sender"],
            "descriptions": "Restrict to manager role",
            "references": ["_paused"]
        }
    ],
    "unpause()": [
        {
            "potential_checks": "hasRole(DEFAULT_ADMIN_ROLE, msg.sender)",
            "involved_variables":  ["_roles","msg.sender"],
            "descriptions": "Restrict to admin role",
            "references": ["_paused"]
        }
    ]
}