{
    "checkpoints(address account, uint32 pos) returns (ERC20Votes.Checkpoint)": [],
    "numCheckpoints(address account) returns (uint32)": [],
    "delegates(address account) returns (address)": [],
    "getVotes(address account) returns (uint256)": [
    ],
    "getPastVotes(address account, uint256 blockNumber) returns (uint256)": [
 
    ],
    "getPastTotalSupply(uint256 blockNumber) returns (uint256)": [
 
    ],
    "delegate(address delegatee)": [

    ],
    "delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s)": [
    ],
    "permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)": [
        {
            "potential_checks" : "deadline >= block.timestamp",
            "involved_variables": [
                "deadline",
                "block.timestamp"
            ],
            "descriptions": "Ensure that the permit is not expired.",
            "references": [
                "_allowances"
            ]
        },
        {
            "potential_checks": "signer == owner",
            "involved_variables": [
                "signer",
                "owner",
                "v",
                "r",
                "s"
            ],
            "descriptions": "Ensure that the signature is valid and matches the owner.",
            "references": [
                "_allowances"
            ]
        }
    ],
    "nonces(address owner) returns (uint256)": [],
    "DOMAIN_SEPARATOR() returns (bytes32)": [],
    "name() returns (string)": [],
    "symbol() returns (string)": [],
    "decimals() returns (uint8)": [],
    "totalSupply() returns (uint256)": [],
    "balanceOf(address account) returns (uint256)": [],
    "transfer(address recipient, uint256 amount) returns (bool)": [],
    "allowance(address owner, address spender) returns (uint256)": [],
    "approve(address spender, uint256 amount) returns (bool)": [],
    "transferFrom(address sender, address recipient, uint256 amount) returns (bool)": [
        {
            "potential_checks": "_allowances[sender][msg.sender] >= amount",
            "involved_variables": [
                "sender",
                "msg.sender",
                "amount",
                "_allowances"
            ],
            "descriptions": "Ensure that the spender has enough allowance to transfer from the sender.",
            "references": [
                "_allowances",
                "_balances",
                "_totalSupply"
            ]
        }
    ],
    "increaseAllowance(address spender, uint256 addedValue) returns (bool)": [],
    "decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)": [
    ],
    "changeRouterAddress(TerraceRouter newRouter)": [
        {
            "potential_checks": "msg.sender == admin",
            "involved_variables": [
                "admin",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the admin before changing the router address.",
            "references": [
                "router"
            ]
        }
    ],
    "revoke()": [
        {
            "potential_checks": "msg.sender == admin",
            "involved_variables": [
                "admin",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the admin before revoking permissions.",
            "references": [
                "admin"
            ]
        }
    ],
    "rewardBorrowable()": [],
    "enterBorrowableAllIn() returns (uint256)": [
    ],
    "enterBorrowable(uint256 _amount) returns (uint256)": [
    ],
    "enter(uint256 _amount) returns (uint256)": [
    ],
    "leave(uint256 _share)": [
    ],
    "leaveWithBorrowable(uint256 _share)": [],
    "TOKENBalance(address _account) returns (uint256)": [],
    "xTOKENForTOKEN(uint256 _xTOKENAmount) returns (uint256)": [],
    "BorrowableBalance(address _account) returns (uint256)": [],
    "xTOKENForBorrowable(uint256 _xTOKENAmount) returns (uint256)": []
}