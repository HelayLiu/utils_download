{
    "owner() returns (address)": [],
    "renounceOwnership()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before renouncing ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "transferOwnership(address newOwner)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before transfer ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "initialize(IERC20Upgradeable _rewardToken, uint256 _rewardPerBlock, uint256 _startBlock)": [
    ],
    "setMunicipalityAddress(address _municipalityAddress)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": ["_owner", "msg.sender"],
            "descriptions": "Ensure that the caller is the current owner before setting municipality address.",
            "references": ["municipalityAddress"]
        }
    ],
    "setMinerNFTAddress(address _minerNFTAddress)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": ["_owner", "msg.sender"],
            "descriptions": "Ensure that the caller is the current owner before setting miner NFT address.",
            "references": ["minerV1NFTAddress"]
        }
    ],
    "setWhiteListedAddresses(address _address, bool _whiteList)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": ["_owner", "msg.sender"],
            "descriptions": "Ensure that the caller is the current owner before setting white listed addresses.",
            "references": ["whiteListed"]
        }
    ],
    "setRewardTokenAddress(IERC20Upgradeable _rewardToken)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": ["_owner", "msg.sender"],
            "descriptions": "Ensure that the caller is the current owner before setting reward token address.",
            "references": ["rewardToken"]
        }
    ],
    "setNetGymStreetAddress(address _address)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": ["_owner", "msg.sender"],
            "descriptions": "Ensure that the caller is the current owner before setting NetGymStreet address.",
            "references": ["netGymStreetAddr"]
        }
    ],
    "setCompanyWallet(address _address)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": ["_owner", "msg.sender"],
            "descriptions": "Ensure that the caller is the current owner before setting company wallet address.",
            "references": ["companyWallet"]
        }
    ],
    "setBibackAddress(address _address)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": ["_owner", "msg.sender"],
            "descriptions": "Ensure that the caller is the current owner before setting Biback address.",
            "references": ["bibackAddress"]
        }
    ],
    "setUSDTAddress(address _usdtAddress)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": ["_owner", "msg.sender"],
            "descriptions": "Ensure that the caller is the current owner before setting USDT address.",
            "references": ["busdAddr"]
        }
    ],
    "setTokenAddresses(address[6] _addresses)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": ["_owner", "msg.sender"],
            "descriptions": "Ensure that the caller is the current owner before setting token addresses.",
            "references": [
                "gymnet",
                "busdAddr",
                "web2BackendAddress",
                "wbnbAddress",
                "routerAddress",
                "municipalityAddressKB"
            ]
        }
    ],
    "setPoolInfo(uint256 lastRewardBlock, uint256 accRewardPerShare)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": ["_owner", "msg.sender"],
            "descriptions": "Ensure that the caller is the current owner before setting pool info.",
            "references": ["poolInfo"]
        }
    ],
    "updateStartBlock(uint256 _startBlock)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": ["_owner", "msg.sender"],
            "descriptions": "Ensure that the caller is the current owner before updating start block.",
            "references": ["startBlock"]
        }
    ],
    "setIsPoolActive(bool _isPoolActive)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": ["_owner", "msg.sender"],
            "descriptions": "Ensure that the caller is the current owner before setting pool active status.",
            "references": ["isPoolActive"]
        }
    ],
    "setMinerPublicBuildingAddress(address _minerPublicBuilding)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": ["_owner", "msg.sender"],
            "descriptions": "Ensure that the caller is the current owner before setting miner public building address.",
            "references": ["minerPublicBuilding"]
        }
    ],
    "setRewardPerBlock(uint256 _rewardPerBlock)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": ["_owner", "msg.sender"],
            "descriptions": "Ensure that the caller is the current owner before setting reward per block.",
            "references": ["rewardPerBlock"]
        }
    ],
    "setStartBlock(uint256 _startBlock)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": ["_owner", "msg.sender"],
            "descriptions": "Ensure that the caller is the current owner before setting start block.",
            "references": ["startBlock"]
        }
    ],
    "getUserMinersIdsByIndex(address _user) returns (uint256[])": [
    ],
    "deposit(address _user, uint256 _hashrate, bool _isWeb2)": [
        {
            "potential_checks": "whiteListed[msg.sender]",
            "involved_variables":  ["msg.sender"],
            "descriptions": "Verify caller is whitelisted to deposit.",
            "references": ["poolInfo", "userInfo","totalHashRate","userRewardsDebt","totalMintedTokens","utilInfo"]
        }
    ],
    "withdraw(address _user, uint256 _hashRate)": [
        {
            "potential_checks": "whiteListed[msg.sender]",
            "involved_variables":  ["msg.sender"],
            "descriptions": "Verify caller is whitelisted to withdraw.",
            "references": ["poolInfo", "userInfo","totalHashRate","userRewardsDebt","totalMintedTokens","utilInfo"]
        }
    ],
    "claim()": [

    ],
    "claimAll()": [
    ],
    "claimRewardsBE(address _user)": [
        {
            "potential_checks":"msg.sender == web2BackendAddress || msg.sender == bibackAddress",
            "involved_variables": [
                "web2BackendAddress",
                "bibackAddress",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is either web2BackendAddress or bibackAddress before claiming rewards.",
            "references": [ "_userInfo","userRewardsDebt","totalMintedTokens","utilInfo"]

        }
    ],
    "pendingReward(address _user) returns (uint256)": [],
    "getMinersCount(address _user) returns (uint256)": [],
    "getUtilityPendRew(address _user) returns (uint256)": [],
    "updatePool()": [],
    "getPendingRewardsFromAllMiners(address _user) returns (uint256)": [],
    "getUserActiveMiners(address _user) returns (uint256)": [],
    "setTotalClaims(address _user, uint256 value)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": ["_owner", "msg.sender"],
            "descriptions": "Ensure that the caller is the current owner before setting total claims.",
            "references": ["userInfo"]
        }
    ],
    "setRewardDept(address _user, uint256 value)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": ["_owner", "msg.sender"],
            "descriptions": "Ensure that the caller is the current owner before setting reward debt.",
            "references": ["userRewardsDebt"]
        }
    ],
    "getUserActiveMinersByRange(address _user, uint256 _upLimit, uint256 _lowLimit) returns (uint256[], uint256)": [
    
    ],
    "convert()": [
        {
            "potential_checks": "whiteListed[msg.sender]",
            "involved_variables": ["msg.sender", "whiteListed"],
            "descriptions": "Ensure that the caller is whitelisted before converting.",
            "references": ["_allowances"]
        }
    ],
    "claimVBTC(address[] _user)": [
        {
            "potential_checks": "whiteListed[msg.sender]",
            "involved_variables": ["msg.sender", "whiteListed"],
            "descriptions": "Ensure that the caller is whitelisted before claiming VBTC.",
            "references": ["userInfo", "userRewardsDebt", "totalMintedTokens", "utilInfo"]
        }
    ],
    "utilUpdt(address _user, uint256 _referrerId, uint256 _amount)": [
        {
            "potential_checks": "msg.sender == municipalityAddress || msg.sender == municipalityAddressKB",
            "involved_variables":  ["msg.sender","municipalityAddress", "municipalityAddressKB"],
            "descriptions": "Ensure only municipality contracts update utility balances.",
            "references": ["utilInfo","compUtililtyBalanceCounter"]
        }
    ],
    "paymentForMystery(address _user, uint256 _amount)": [
        {
            "potential_checks": "whiteListed[msg.sender]",
            "involved_variables": ["msg.sender", "whiteListed"],
            "descriptions": "Ensure that the caller is whitelisted before processing payment for mystery.",
            "references": ["userInfo"]
        }
    ],
    "internalTopUp(address _user, uint256 _amount)": [
        {
            "potential_checks": "msg.sender == netGymStreetAddr",
            "involved_variables": [
                "msg.sender",
                "netGymStreetAddr"
            ],
            "descriptions": "Ensure that the caller is the NetGymStreet contract before performing internal top-up.",
            "references": [
                "utilInfo"
            ]
        }
    ],
    "topUp(address _user, uint256 _amount, bool _isGasBack)": [
    ],
    "topUpGrant(address _user, uint256 _amount)": [
        {
            "potential_checks":"_owner == msg.sender",
            "involved_variables": ["_owner", "msg.sender"],
            "descriptions": "Ensure that the caller is the current owner before granting top-up.",
            "references": ["userInfo"]
        }
    ],
    "binaryDistributionSplit(address[] _users, uint256[] _amountToSplit)": [
        {
            "potential_checks": "msg.sender == web2BackendAddress || msg.sender == bibackAddress",
            "involved_variables": [
                "bibackAddress",
                "msg.sender",
                "web2BackendAddress"
            ],
            "descriptions": "Ensure that the caller is either web2BackendAddress or bibackAddress before performing binary distribution split.",
            "references": [
                "utilInfo"
            ]
        }
    ],
    "binaryCommissionDistribution(address[] _users, uint256[] _gymnetAmount, uint256[] _utilityAmount, uint256 _totalBusd)": [
        {
            "potential_checks": "msg.sender == web2BackendAddress || msg.sender == bibackAddress",
            "involved_variables": [
                "bibackAddress",
                "msg.sender",
                "web2BackendAddress"
            ],
            "descriptions": "Ensure that the caller is either web2BackendAddress or bibackAddress before performing binary commission distribution.",
            "references": [
                "utilInfo"
            ]
        }
    ],
    "addingUtilityBalance(address _referrer, uint256 _gymAmount, uint256 _utilityAmount, uint256 _busdAmount)": [
        {
            "potential_checks": "msg.sender == web2BackendAddress || msg.sender == bibackAddress",
            "involved_variables": [
                "bibackAddress",
                "web2BackendAddress",
                "_busdAmount"
            ],
            "descriptions": "Ensure that the caller is either web2BackendAddress or bibackAddress before adding utility balance.",
            "references": [
                "utilInfo"
            ]
        }
    ],
    "claimAllRewards(address _user, uint256 _busdAmount)": [
        {
            "potential_checks": "msg.sender == web2BackendAddress || msg.sender == bibackAddress == False",
            "involved_variables": [
                "bibackAddress",
                "msg.sender",
                "web2BackendAddress"
            ],
            "descriptions": "Ensure that the caller is not web2BackendAddress or bibackAddress before claiming all rewards.",
            "references": [
                "utilInfo"
            ]
        }
    ],
    "updateUs(address _oldAddress, address _newAddress)": [
        {
            "potential_checks": "whiteListed[msg.sender]",
            "involved_variables": [
                "msg.sender",
                "whiteListed"
            ],
            "descriptions": "Ensure that the caller is whitelisted before updating US address.",
            "references": [
                "userRewardsDebt"
            ]
        }
    ],
    "updateUsKB(address _oldAddress, address _newAddress)": [
        {
            "potential_checks": "whiteListed[msg.sender]",
            "involved_variables": [
                "msg.sender",
                "whiteListed"
            ],
            "descriptions": "Ensure that the caller is whitelisted before updating USKB address.",
            "references": [
                "userRewardsDebt"
            ]
        }
    ],
    "incentiveSplitter(address _user, uint256 _USDTAmount, uint256 _gymAmount, uint256 _utilAmount, uint256 eventtype)": [
        {
            "potential_checks": "msg.sender == web2BackendAddress || msg.sender == bibackAddress",
            "involved_variables": [
                "bibackAddress",
                "msg.sender",
                "web2BackendAddress"
            ],
            "descriptions": "Ensure that the caller is either web2BackendAddress or bibackAddress before performing incentive split.",
            "references": [
                "utilInfo"
            ]
        }
    ],
    "incentiveSplitterBulk(address[] _users, uint256[] _USDTAmount, uint256[] _gymAmount, uint256[] _utilAmount, uint256 eventtype)": [
        {
            "potential_checks": "msg.sender == web2BackendAddress || msg.sender == bibackAddress",
            "involved_variables": [
                "bibackAddress",
                "msg.sender",
                "web2BackendAddress"
            ],
            "descriptions": "Ensure that the caller is either web2BackendAddress or bibackAddress before performing bulk incentive split.",
            "references": [
                "utilInfo"
            ]
        }
    ],
    "buyBack() returns (uint256)": [
        {
            "potential_checks": "msg.sender == netGymStreetAddr",
            "involved_variables": [
                "msg.sender",
                "netGymStreetAddr"
            ],
            "descriptions": "Ensure that the caller is not the NetGymStreet contract before performing buy back.",
            "references": [
                "_busdAmount"
            ]
        }
    ],
    "syncBalance(address _token, uint256 _amt, address _wallet)": [
        {
            "potential_checks": "whiteListed[msg.sender]",
            "involved_variables": [
                "msg.sender",
                "whiteListed"
            ],
            "descriptions": "Ensure that the caller is whitelisted before syncing balance.",
            "references": [
                "_balances",
                "_allowances"
            ]
        }
    ]
}