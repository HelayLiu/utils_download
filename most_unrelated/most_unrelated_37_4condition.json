{
    "owner() returns (address)": [],
    "renounceOwnership()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before renouncing ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "transferOwnership(address newOwner)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before transfer ownership.",
            "references": [
                "_owner"
            ]
        }
    ],
    "name() returns (string)": [],
    "symbol() returns (string)": [],
    "decimals() returns (uint8)": [],
    "totalSupply() returns (uint256)": [],
    "balanceOf(address account) returns (uint256)": [],
    "transfer(address to, uint256 amount) returns (bool)": [],
    "allowance(address owner, address spender) returns (uint256)": [],
    "approve(address spender, uint256 amount) returns (bool)": [],
    "transferFrom(address from, address to, uint256 amount) returns (bool)": [
        {
            "potential_checks": "_allowances[from][msg.sender] >= value",
            "involved_variables": ["_allowances", "from", "msg.sender", "value"],
            "descriptions": "Verify spender allowance covers transfer amount to isolate unauthorized access.",
            "references": ["_balances"]
        }
    ],
    "increaseAllowance(address spender, uint256 addedValue) returns (bool)": [],
    "decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)": [
    ],
    "launch(string name, string symbol, uint256 amountLeft)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before launching.",
            "references": [
                "_name",
                "_symbol",
                "uniswapV2Pair",
                "tradingStartBlock",
                "automatedMarketMakerPairs",
                "tradingActive"
            ]
        }
    ],
    "limitsOff() returns (bool)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before disabling limits.",
            "references": ["limitsInEffect"]
        }
    ],
    "updateSwapTokensAtAmount(uint256 newAmount) returns (bool)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before updating swap tokens at amount.",
            "references": ["swapTokensAtAmount"]
        }
    ],
    "updateSwapEnabled(bool enabled)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before updating swap enabled.",
            "references": [
                "swapEnabled"
            ]
        }
    ],
    "updateMaxTransaction(uint256 newNum)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before updating max transaction.",
            "references": [
                "maxTransactionAmount"
            ]
        }
    ],
    "updateMaxWallet(uint256 newNum)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before updating max wallet.",
            "references": [
                "maxWallet"
            ]
        }
    ],
    "disableWalletLimits(address updAds, bool isEx)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before disabling wallet limits.",
            "references": [
                "_isExcludedMaxTransactionAmount"
            ]
        }
    ],
    "setBuyFees(uint256 _marketingFee, uint256 _liquidityFee)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting buy fees.",
            "references": [
                "buyMarketingFee",
                "buyLiquidityFee",
                "buyTotalFees"
            ]
        }
    ],
    "setSellFees(uint256 _marketingFee, uint256 _liquidityFee)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting sell fees.",
            "references": [
                "sellMarketingFee",
                "sellLiquidityFee",
                "sellTotalFees"
            ]
        }
    ],
    "_excludeFromFees(address account, bool excluded)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before excluding from fees.",
            "references": [
                "_isExcludedFromFees"
            ]
        }
    ],
    "excludeFromFees(address account, bool excluded)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before excluding from fees.",
            "references": [
                "_isExcludedFromFees"
            ]
        }
    ],
    "setAutomatedMarketMakerPair(address pair, bool value)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before setting automated market maker pair.",
            "references": [
                "automatedMarketMakerPairs"
            ]
        }
    ],
    "updateMarketingWallet(address _Treasury)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before updating marketing wallet.",
            "references": [
                "Treasury"
            ]
        }
    ],
    "isExcludedFromFees(address account) returns (bool)": [],
    "blacklist(address _address, bool _isBlacklisting)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before blacklisting an address.",
            "references": [
                "blacklists"
            ]
        }

    ],
    "renounceBlacklist()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before renouncing blacklist.",
            "references": [
                "blacklistRenounced"
            ]
        }
    ],
    "unsetReducedFirstBlock()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before unsetting reduced first block.",
            "references": [
                "reducedFirstBlockEnabled"
            ]
        }
    ],
    "updateRestrictSwapBack(bool newVal)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before updating restrict swap back.",
            "references": [
                "restrictSwapBack"
            ]
        }
    ],
    "removeStuckTokens()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before removing stuck tokens.",
            "references": [
                "uniswapV2Router",
                "_allowances"
            ]
        }
    ],
    "recoverETH()": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before recovering ETH.",
            "references": [
                "Treasury"
            ]
        }
    ],
    "recoverTokens(address token)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before recovering Tokens.",
            "references": [
                "Treasury"
            ]
        }
    ],
    "allocateReserve(uint256 amount)": [
        {
            "potential_checks": "_owner == msg.sender",
            "involved_variables": [
                "_owner",
                "msg.sender"
            ],
            "descriptions": "Ensure that the caller is the current owner before allocating reserve.",
            "references": [
                "Treasury"
            ]
        }
 
    ]
}